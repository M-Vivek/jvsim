// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registration_service.proto

#ifndef PROTOBUF_registration_5fservice_2eproto__INCLUDED
#define PROTOBUF_registration_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace registration {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_registration_5fservice_2eproto();
void protobuf_AssignDesc_registration_5fservice_2eproto();
void protobuf_ShutdownFile_registration_5fservice_2eproto();

class RegisterReply;
class RegisterRequest;

// ===================================================================

class RegisterRequest : public ::google::protobuf::Message {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRequest& default_instance();

  enum InputTypeCase {
    kJsonInput = 1,
    kFileInput = 2,
    INPUT_TYPE_NOT_SET = 0,
  };

  void Swap(RegisterRequest* other);

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const { return New(NULL); }

  RegisterRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string json_input = 1;
  private:
  bool has_json_input() const;
  public:
  void clear_json_input();
  static const int kJsonInputFieldNumber = 1;
  const ::std::string& json_input() const;
  void set_json_input(const ::std::string& value);
  void set_json_input(const char* value);
  void set_json_input(const char* value, size_t size);
  ::std::string* mutable_json_input();
  ::std::string* release_json_input();
  void set_allocated_json_input(::std::string* json_input);

  // optional string file_input = 2;
  private:
  bool has_file_input() const;
  public:
  void clear_file_input();
  static const int kFileInputFieldNumber = 2;
  const ::std::string& file_input() const;
  void set_file_input(const ::std::string& value);
  void set_file_input(const char* value);
  void set_file_input(const char* value, size_t size);
  ::std::string* mutable_file_input();
  ::std::string* release_file_input();
  void set_allocated_file_input(::std::string* file_input);

  // optional string target = 3;
  void clear_target();
  static const int kTargetFieldNumber = 3;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // optional string register_id = 4;
  void clear_register_id();
  static const int kRegisterIdFieldNumber = 4;
  const ::std::string& register_id() const;
  void set_register_id(const ::std::string& value);
  void set_register_id(const char* value);
  void set_register_id(const char* value, size_t size);
  ::std::string* mutable_register_id();
  ::std::string* release_register_id();
  void set_allocated_register_id(::std::string* register_id);

  // optional bool skip_authentication = 5;
  void clear_skip_authentication();
  static const int kSkipAuthenticationFieldNumber = 5;
  bool skip_authentication() const;
  void set_skip_authentication(bool value);

  InputTypeCase input_type_case() const;
  // @@protoc_insertion_point(class_scope:registration.RegisterRequest)
 private:
  inline void set_has_json_input();
  inline void set_has_file_input();

  inline bool has_input_type() const;
  void clear_input_type();
  inline void clear_has_input_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  ::google::protobuf::internal::ArenaStringPtr register_id_;
  bool skip_authentication_;
  union InputTypeUnion {
    InputTypeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr json_input_;
    ::google::protobuf::internal::ArenaStringPtr file_input_;
  } input_type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_registration_5fservice_2eproto();
  friend void protobuf_AssignDesc_registration_5fservice_2eproto();
  friend void protobuf_ShutdownFile_registration_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegisterReply : public ::google::protobuf::Message {
 public:
  RegisterReply();
  virtual ~RegisterReply();

  RegisterReply(const RegisterReply& from);

  inline RegisterReply& operator=(const RegisterReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterReply& default_instance();

  void Swap(RegisterReply* other);

  // implements Message ----------------------------------------------

  inline RegisterReply* New() const { return New(NULL); }

  RegisterReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterReply& from);
  void MergeFrom(const RegisterReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  bool result() const;
  void set_result(bool value);

  // optional string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:registration.RegisterReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_registration_5fservice_2eproto();
  friend void protobuf_AssignDesc_registration_5fservice_2eproto();
  friend void protobuf_ShutdownFile_registration_5fservice_2eproto();

  void InitAsDefaultInstance();
  static RegisterReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRequest

// optional string json_input = 1;
inline bool RegisterRequest::has_json_input() const {
  return input_type_case() == kJsonInput;
}
inline void RegisterRequest::set_has_json_input() {
  _oneof_case_[0] = kJsonInput;
}
inline void RegisterRequest::clear_json_input() {
  if (has_json_input()) {
    input_type_.json_input_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_input_type();
  }
}
inline const ::std::string& RegisterRequest::json_input() const {
  // @@protoc_insertion_point(field_get:registration.RegisterRequest.json_input)
  if (has_json_input()) {
    return input_type_.json_input_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RegisterRequest::set_json_input(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.json_input)
  if (!has_json_input()) {
    clear_input_type();
    set_has_json_input();
    input_type_.json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.json_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.json_input)
}
inline void RegisterRequest::set_json_input(const char* value) {
  if (!has_json_input()) {
    clear_input_type();
    set_has_json_input();
    input_type_.json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.json_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:registration.RegisterRequest.json_input)
}
inline void RegisterRequest::set_json_input(const char* value, size_t size) {
  if (!has_json_input()) {
    clear_input_type();
    set_has_json_input();
    input_type_.json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.json_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:registration.RegisterRequest.json_input)
}
inline ::std::string* RegisterRequest::mutable_json_input() {
  if (!has_json_input()) {
    clear_input_type();
    set_has_json_input();
    input_type_.json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:registration.RegisterRequest.json_input)
  return input_type_.json_input_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_json_input() {
  if (has_json_input()) {
    clear_has_input_type();
    return input_type_.json_input_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RegisterRequest::set_allocated_json_input(::std::string* json_input) {
  if (!has_json_input()) {
    input_type_.json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_input_type();
  if (json_input != NULL) {
    set_has_json_input();
    input_type_.json_input_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        json_input);
  }
  // @@protoc_insertion_point(field_set_allocated:registration.RegisterRequest.json_input)
}

// optional string file_input = 2;
inline bool RegisterRequest::has_file_input() const {
  return input_type_case() == kFileInput;
}
inline void RegisterRequest::set_has_file_input() {
  _oneof_case_[0] = kFileInput;
}
inline void RegisterRequest::clear_file_input() {
  if (has_file_input()) {
    input_type_.file_input_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_input_type();
  }
}
inline const ::std::string& RegisterRequest::file_input() const {
  // @@protoc_insertion_point(field_get:registration.RegisterRequest.file_input)
  if (has_file_input()) {
    return input_type_.file_input_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void RegisterRequest::set_file_input(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.file_input)
  if (!has_file_input()) {
    clear_input_type();
    set_has_file_input();
    input_type_.file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.file_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.file_input)
}
inline void RegisterRequest::set_file_input(const char* value) {
  if (!has_file_input()) {
    clear_input_type();
    set_has_file_input();
    input_type_.file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.file_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:registration.RegisterRequest.file_input)
}
inline void RegisterRequest::set_file_input(const char* value, size_t size) {
  if (!has_file_input()) {
    clear_input_type();
    set_has_file_input();
    input_type_.file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.file_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:registration.RegisterRequest.file_input)
}
inline ::std::string* RegisterRequest::mutable_file_input() {
  if (!has_file_input()) {
    clear_input_type();
    set_has_file_input();
    input_type_.file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:registration.RegisterRequest.file_input)
  return input_type_.file_input_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_file_input() {
  if (has_file_input()) {
    clear_has_input_type();
    return input_type_.file_input_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void RegisterRequest::set_allocated_file_input(::std::string* file_input) {
  if (!has_file_input()) {
    input_type_.file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_input_type();
  if (file_input != NULL) {
    set_has_file_input();
    input_type_.file_input_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        file_input);
  }
  // @@protoc_insertion_point(field_set_allocated:registration.RegisterRequest.file_input)
}

// optional string target = 3;
inline void RegisterRequest::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::target() const {
  // @@protoc_insertion_point(field_get:registration.RegisterRequest.target)
  return target_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.target)
}
inline void RegisterRequest::set_target(const char* value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:registration.RegisterRequest.target)
}
inline void RegisterRequest::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:registration.RegisterRequest.target)
}
inline ::std::string* RegisterRequest::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:registration.RegisterRequest.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_target() {
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:registration.RegisterRequest.target)
}

// optional string register_id = 4;
inline void RegisterRequest::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::register_id() const {
  // @@protoc_insertion_point(field_get:registration.RegisterRequest.register_id)
  return register_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_register_id(const ::std::string& value) {
  
  register_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.register_id)
}
inline void RegisterRequest::set_register_id(const char* value) {
  
  register_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:registration.RegisterRequest.register_id)
}
inline void RegisterRequest::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:registration.RegisterRequest.register_id)
}
inline ::std::string* RegisterRequest::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:registration.RegisterRequest.register_id)
  return register_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_register_id() {
  
  return register_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_register_id(::std::string* register_id) {
  if (register_id != NULL) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:registration.RegisterRequest.register_id)
}

// optional bool skip_authentication = 5;
inline void RegisterRequest::clear_skip_authentication() {
  skip_authentication_ = false;
}
inline bool RegisterRequest::skip_authentication() const {
  // @@protoc_insertion_point(field_get:registration.RegisterRequest.skip_authentication)
  return skip_authentication_;
}
inline void RegisterRequest::set_skip_authentication(bool value) {
  
  skip_authentication_ = value;
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.skip_authentication)
}

inline bool RegisterRequest::has_input_type() const {
  return input_type_case() != INPUT_TYPE_NOT_SET;
}
inline void RegisterRequest::clear_has_input_type() {
  _oneof_case_[0] = INPUT_TYPE_NOT_SET;
}
inline RegisterRequest::InputTypeCase RegisterRequest::input_type_case() const {
  return RegisterRequest::InputTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RegisterReply

// optional bool result = 1;
inline void RegisterReply::clear_result() {
  result_ = false;
}
inline bool RegisterReply::result() const {
  // @@protoc_insertion_point(field_get:registration.RegisterReply.result)
  return result_;
}
inline void RegisterReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:registration.RegisterReply.result)
}

// optional string error = 2;
inline void RegisterReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterReply::error() const {
  // @@protoc_insertion_point(field_get:registration.RegisterReply.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:registration.RegisterReply.error)
}
inline void RegisterReply::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:registration.RegisterReply.error)
}
inline void RegisterReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:registration.RegisterReply.error)
}
inline ::std::string* RegisterReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:registration.RegisterReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterReply::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:registration.RegisterReply.error)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace registration

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_registration_5fservice_2eproto__INCLUDED
