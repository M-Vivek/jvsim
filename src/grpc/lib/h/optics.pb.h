// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: optics.proto

#ifndef PROTOBUF_optics_2eproto__INCLUDED
#define PROTOBUF_optics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "telemetry_top.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_optics_2eproto();
void protobuf_AssignDesc_optics_2eproto();
void protobuf_ShutdownFile_optics_2eproto();

class Optics;
class OpticsDiagLaneStats;
class OpticsDiagStats;
class OpticsInfos;

// ===================================================================

class Optics : public ::google::protobuf::Message {
 public:
  Optics();
  virtual ~Optics();

  Optics(const Optics& from);

  inline Optics& operator=(const Optics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Optics& default_instance();

  void Swap(Optics* other);

  // implements Message ----------------------------------------------

  inline Optics* New() const { return New(NULL); }

  Optics* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Optics& from);
  void MergeFrom(const Optics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Optics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OpticsInfos Optics_diag = 1;
  int optics_diag_size() const;
  void clear_optics_diag();
  static const int kOpticsDiagFieldNumber = 1;
  const ::OpticsInfos& optics_diag(int index) const;
  ::OpticsInfos* mutable_optics_diag(int index);
  ::OpticsInfos* add_optics_diag();
  ::google::protobuf::RepeatedPtrField< ::OpticsInfos >*
      mutable_optics_diag();
  const ::google::protobuf::RepeatedPtrField< ::OpticsInfos >&
      optics_diag() const;

  // @@protoc_insertion_point(class_scope:Optics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::OpticsInfos > optics_diag_;
  friend void  protobuf_AddDesc_optics_2eproto();
  friend void protobuf_AssignDesc_optics_2eproto();
  friend void protobuf_ShutdownFile_optics_2eproto();

  void InitAsDefaultInstance();
  static Optics* default_instance_;
};
// -------------------------------------------------------------------

class OpticsInfos : public ::google::protobuf::Message {
 public:
  OpticsInfos();
  virtual ~OpticsInfos();

  OpticsInfos(const OpticsInfos& from);

  inline OpticsInfos& operator=(const OpticsInfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpticsInfos& default_instance();

  void Swap(OpticsInfos* other);

  // implements Message ----------------------------------------------

  inline OpticsInfos* New() const { return New(NULL); }

  OpticsInfos* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpticsInfos& from);
  void MergeFrom(const OpticsInfos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpticsInfos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string if_name = 1;
  bool has_if_name() const;
  void clear_if_name();
  static const int kIfNameFieldNumber = 1;
  const ::std::string& if_name() const;
  void set_if_name(const ::std::string& value);
  void set_if_name(const char* value);
  void set_if_name(const char* value, size_t size);
  ::std::string* mutable_if_name();
  ::std::string* release_if_name();
  void set_allocated_if_name(::std::string* if_name);

  // optional uint32 snmp_if_index = 2;
  bool has_snmp_if_index() const;
  void clear_snmp_if_index();
  static const int kSnmpIfIndexFieldNumber = 2;
  ::google::protobuf::uint32 snmp_if_index() const;
  void set_snmp_if_index(::google::protobuf::uint32 value);

  // optional .OpticsDiagStats optics_diag_stats = 3;
  bool has_optics_diag_stats() const;
  void clear_optics_diag_stats();
  static const int kOpticsDiagStatsFieldNumber = 3;
  const ::OpticsDiagStats& optics_diag_stats() const;
  ::OpticsDiagStats* mutable_optics_diag_stats();
  ::OpticsDiagStats* release_optics_diag_stats();
  void set_allocated_optics_diag_stats(::OpticsDiagStats* optics_diag_stats);

  // @@protoc_insertion_point(class_scope:OpticsInfos)
 private:
  inline void set_has_if_name();
  inline void clear_has_if_name();
  inline void set_has_snmp_if_index();
  inline void clear_has_snmp_if_index();
  inline void set_has_optics_diag_stats();
  inline void clear_has_optics_diag_stats();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr if_name_;
  ::OpticsDiagStats* optics_diag_stats_;
  ::google::protobuf::uint32 snmp_if_index_;
  friend void  protobuf_AddDesc_optics_2eproto();
  friend void protobuf_AssignDesc_optics_2eproto();
  friend void protobuf_ShutdownFile_optics_2eproto();

  void InitAsDefaultInstance();
  static OpticsInfos* default_instance_;
};
// -------------------------------------------------------------------

class OpticsDiagStats : public ::google::protobuf::Message {
 public:
  OpticsDiagStats();
  virtual ~OpticsDiagStats();

  OpticsDiagStats(const OpticsDiagStats& from);

  inline OpticsDiagStats& operator=(const OpticsDiagStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpticsDiagStats& default_instance();

  void Swap(OpticsDiagStats* other);

  // implements Message ----------------------------------------------

  inline OpticsDiagStats* New() const { return New(NULL); }

  OpticsDiagStats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpticsDiagStats& from);
  void MergeFrom(const OpticsDiagStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpticsDiagStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 optics_type = 1;
  bool has_optics_type() const;
  void clear_optics_type();
  static const int kOpticsTypeFieldNumber = 1;
  ::google::protobuf::uint32 optics_type() const;
  void set_optics_type(::google::protobuf::uint32 value);

  // optional double module_temp = 2;
  bool has_module_temp() const;
  void clear_module_temp();
  static const int kModuleTempFieldNumber = 2;
  double module_temp() const;
  void set_module_temp(double value);

  // optional double module_temp_high_alarm_threshold = 3;
  bool has_module_temp_high_alarm_threshold() const;
  void clear_module_temp_high_alarm_threshold();
  static const int kModuleTempHighAlarmThresholdFieldNumber = 3;
  double module_temp_high_alarm_threshold() const;
  void set_module_temp_high_alarm_threshold(double value);

  // optional double module_temp_low_alarm_threshold = 4;
  bool has_module_temp_low_alarm_threshold() const;
  void clear_module_temp_low_alarm_threshold();
  static const int kModuleTempLowAlarmThresholdFieldNumber = 4;
  double module_temp_low_alarm_threshold() const;
  void set_module_temp_low_alarm_threshold(double value);

  // optional double module_temp_high_warning_threshold = 5;
  bool has_module_temp_high_warning_threshold() const;
  void clear_module_temp_high_warning_threshold();
  static const int kModuleTempHighWarningThresholdFieldNumber = 5;
  double module_temp_high_warning_threshold() const;
  void set_module_temp_high_warning_threshold(double value);

  // optional double module_temp_low_warning_threshold = 6;
  bool has_module_temp_low_warning_threshold() const;
  void clear_module_temp_low_warning_threshold();
  static const int kModuleTempLowWarningThresholdFieldNumber = 6;
  double module_temp_low_warning_threshold() const;
  void set_module_temp_low_warning_threshold(double value);

  // optional double laser_output_power_high_alarm_threshold_dbm = 7;
  bool has_laser_output_power_high_alarm_threshold_dbm() const;
  void clear_laser_output_power_high_alarm_threshold_dbm();
  static const int kLaserOutputPowerHighAlarmThresholdDbmFieldNumber = 7;
  double laser_output_power_high_alarm_threshold_dbm() const;
  void set_laser_output_power_high_alarm_threshold_dbm(double value);

  // optional double laser_output_power_low_alarm_threshold_dbm = 8;
  bool has_laser_output_power_low_alarm_threshold_dbm() const;
  void clear_laser_output_power_low_alarm_threshold_dbm();
  static const int kLaserOutputPowerLowAlarmThresholdDbmFieldNumber = 8;
  double laser_output_power_low_alarm_threshold_dbm() const;
  void set_laser_output_power_low_alarm_threshold_dbm(double value);

  // optional double laser_output_power_high_warning_threshold_dbm = 9;
  bool has_laser_output_power_high_warning_threshold_dbm() const;
  void clear_laser_output_power_high_warning_threshold_dbm();
  static const int kLaserOutputPowerHighWarningThresholdDbmFieldNumber = 9;
  double laser_output_power_high_warning_threshold_dbm() const;
  void set_laser_output_power_high_warning_threshold_dbm(double value);

  // optional double laser_output_power_low_warning_threshold_dbm = 10;
  bool has_laser_output_power_low_warning_threshold_dbm() const;
  void clear_laser_output_power_low_warning_threshold_dbm();
  static const int kLaserOutputPowerLowWarningThresholdDbmFieldNumber = 10;
  double laser_output_power_low_warning_threshold_dbm() const;
  void set_laser_output_power_low_warning_threshold_dbm(double value);

  // optional double laser_rx_power_high_alarm_threshold_dbm = 11;
  bool has_laser_rx_power_high_alarm_threshold_dbm() const;
  void clear_laser_rx_power_high_alarm_threshold_dbm();
  static const int kLaserRxPowerHighAlarmThresholdDbmFieldNumber = 11;
  double laser_rx_power_high_alarm_threshold_dbm() const;
  void set_laser_rx_power_high_alarm_threshold_dbm(double value);

  // optional double laser_rx_power_low_alarm_threshold_dbm = 12;
  bool has_laser_rx_power_low_alarm_threshold_dbm() const;
  void clear_laser_rx_power_low_alarm_threshold_dbm();
  static const int kLaserRxPowerLowAlarmThresholdDbmFieldNumber = 12;
  double laser_rx_power_low_alarm_threshold_dbm() const;
  void set_laser_rx_power_low_alarm_threshold_dbm(double value);

  // optional double laser_rx_power_high_warning_threshold_dbm = 13;
  bool has_laser_rx_power_high_warning_threshold_dbm() const;
  void clear_laser_rx_power_high_warning_threshold_dbm();
  static const int kLaserRxPowerHighWarningThresholdDbmFieldNumber = 13;
  double laser_rx_power_high_warning_threshold_dbm() const;
  void set_laser_rx_power_high_warning_threshold_dbm(double value);

  // optional double laser_rx_power_low_warning_threshold_dbm = 14;
  bool has_laser_rx_power_low_warning_threshold_dbm() const;
  void clear_laser_rx_power_low_warning_threshold_dbm();
  static const int kLaserRxPowerLowWarningThresholdDbmFieldNumber = 14;
  double laser_rx_power_low_warning_threshold_dbm() const;
  void set_laser_rx_power_low_warning_threshold_dbm(double value);

  // optional double laser_bias_current_high_alarm_threshold = 15;
  bool has_laser_bias_current_high_alarm_threshold() const;
  void clear_laser_bias_current_high_alarm_threshold();
  static const int kLaserBiasCurrentHighAlarmThresholdFieldNumber = 15;
  double laser_bias_current_high_alarm_threshold() const;
  void set_laser_bias_current_high_alarm_threshold(double value);

  // optional double laser_bias_current_low_alarm_threshold = 16;
  bool has_laser_bias_current_low_alarm_threshold() const;
  void clear_laser_bias_current_low_alarm_threshold();
  static const int kLaserBiasCurrentLowAlarmThresholdFieldNumber = 16;
  double laser_bias_current_low_alarm_threshold() const;
  void set_laser_bias_current_low_alarm_threshold(double value);

  // optional double laser_bias_current_high_warning_threshold = 17;
  bool has_laser_bias_current_high_warning_threshold() const;
  void clear_laser_bias_current_high_warning_threshold();
  static const int kLaserBiasCurrentHighWarningThresholdFieldNumber = 17;
  double laser_bias_current_high_warning_threshold() const;
  void set_laser_bias_current_high_warning_threshold(double value);

  // optional double laser_bias_current_low_warning_threshold = 18;
  bool has_laser_bias_current_low_warning_threshold() const;
  void clear_laser_bias_current_low_warning_threshold();
  static const int kLaserBiasCurrentLowWarningThresholdFieldNumber = 18;
  double laser_bias_current_low_warning_threshold() const;
  void set_laser_bias_current_low_warning_threshold(double value);

  // optional bool module_temp_high_alarm = 19;
  bool has_module_temp_high_alarm() const;
  void clear_module_temp_high_alarm();
  static const int kModuleTempHighAlarmFieldNumber = 19;
  bool module_temp_high_alarm() const;
  void set_module_temp_high_alarm(bool value);

  // optional bool module_temp_low_alarm = 20;
  bool has_module_temp_low_alarm() const;
  void clear_module_temp_low_alarm();
  static const int kModuleTempLowAlarmFieldNumber = 20;
  bool module_temp_low_alarm() const;
  void set_module_temp_low_alarm(bool value);

  // optional bool module_temp_high_warning = 21;
  bool has_module_temp_high_warning() const;
  void clear_module_temp_high_warning();
  static const int kModuleTempHighWarningFieldNumber = 21;
  bool module_temp_high_warning() const;
  void set_module_temp_high_warning(bool value);

  // optional bool module_temp_low_warning = 22;
  bool has_module_temp_low_warning() const;
  void clear_module_temp_low_warning();
  static const int kModuleTempLowWarningFieldNumber = 22;
  bool module_temp_low_warning() const;
  void set_module_temp_low_warning(bool value);

  // repeated .OpticsDiagLaneStats optics_lane_diag_stats = 23;
  int optics_lane_diag_stats_size() const;
  void clear_optics_lane_diag_stats();
  static const int kOpticsLaneDiagStatsFieldNumber = 23;
  const ::OpticsDiagLaneStats& optics_lane_diag_stats(int index) const;
  ::OpticsDiagLaneStats* mutable_optics_lane_diag_stats(int index);
  ::OpticsDiagLaneStats* add_optics_lane_diag_stats();
  ::google::protobuf::RepeatedPtrField< ::OpticsDiagLaneStats >*
      mutable_optics_lane_diag_stats();
  const ::google::protobuf::RepeatedPtrField< ::OpticsDiagLaneStats >&
      optics_lane_diag_stats() const;

  // @@protoc_insertion_point(class_scope:OpticsDiagStats)
 private:
  inline void set_has_optics_type();
  inline void clear_has_optics_type();
  inline void set_has_module_temp();
  inline void clear_has_module_temp();
  inline void set_has_module_temp_high_alarm_threshold();
  inline void clear_has_module_temp_high_alarm_threshold();
  inline void set_has_module_temp_low_alarm_threshold();
  inline void clear_has_module_temp_low_alarm_threshold();
  inline void set_has_module_temp_high_warning_threshold();
  inline void clear_has_module_temp_high_warning_threshold();
  inline void set_has_module_temp_low_warning_threshold();
  inline void clear_has_module_temp_low_warning_threshold();
  inline void set_has_laser_output_power_high_alarm_threshold_dbm();
  inline void clear_has_laser_output_power_high_alarm_threshold_dbm();
  inline void set_has_laser_output_power_low_alarm_threshold_dbm();
  inline void clear_has_laser_output_power_low_alarm_threshold_dbm();
  inline void set_has_laser_output_power_high_warning_threshold_dbm();
  inline void clear_has_laser_output_power_high_warning_threshold_dbm();
  inline void set_has_laser_output_power_low_warning_threshold_dbm();
  inline void clear_has_laser_output_power_low_warning_threshold_dbm();
  inline void set_has_laser_rx_power_high_alarm_threshold_dbm();
  inline void clear_has_laser_rx_power_high_alarm_threshold_dbm();
  inline void set_has_laser_rx_power_low_alarm_threshold_dbm();
  inline void clear_has_laser_rx_power_low_alarm_threshold_dbm();
  inline void set_has_laser_rx_power_high_warning_threshold_dbm();
  inline void clear_has_laser_rx_power_high_warning_threshold_dbm();
  inline void set_has_laser_rx_power_low_warning_threshold_dbm();
  inline void clear_has_laser_rx_power_low_warning_threshold_dbm();
  inline void set_has_laser_bias_current_high_alarm_threshold();
  inline void clear_has_laser_bias_current_high_alarm_threshold();
  inline void set_has_laser_bias_current_low_alarm_threshold();
  inline void clear_has_laser_bias_current_low_alarm_threshold();
  inline void set_has_laser_bias_current_high_warning_threshold();
  inline void clear_has_laser_bias_current_high_warning_threshold();
  inline void set_has_laser_bias_current_low_warning_threshold();
  inline void clear_has_laser_bias_current_low_warning_threshold();
  inline void set_has_module_temp_high_alarm();
  inline void clear_has_module_temp_high_alarm();
  inline void set_has_module_temp_low_alarm();
  inline void clear_has_module_temp_low_alarm();
  inline void set_has_module_temp_high_warning();
  inline void clear_has_module_temp_high_warning();
  inline void set_has_module_temp_low_warning();
  inline void clear_has_module_temp_low_warning();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double module_temp_;
  double module_temp_high_alarm_threshold_;
  double module_temp_low_alarm_threshold_;
  double module_temp_high_warning_threshold_;
  double module_temp_low_warning_threshold_;
  double laser_output_power_high_alarm_threshold_dbm_;
  double laser_output_power_low_alarm_threshold_dbm_;
  double laser_output_power_high_warning_threshold_dbm_;
  double laser_output_power_low_warning_threshold_dbm_;
  double laser_rx_power_high_alarm_threshold_dbm_;
  double laser_rx_power_low_alarm_threshold_dbm_;
  double laser_rx_power_high_warning_threshold_dbm_;
  double laser_rx_power_low_warning_threshold_dbm_;
  double laser_bias_current_high_alarm_threshold_;
  double laser_bias_current_low_alarm_threshold_;
  ::google::protobuf::uint32 optics_type_;
  bool module_temp_high_alarm_;
  bool module_temp_low_alarm_;
  bool module_temp_high_warning_;
  bool module_temp_low_warning_;
  double laser_bias_current_high_warning_threshold_;
  double laser_bias_current_low_warning_threshold_;
  ::google::protobuf::RepeatedPtrField< ::OpticsDiagLaneStats > optics_lane_diag_stats_;
  friend void  protobuf_AddDesc_optics_2eproto();
  friend void protobuf_AssignDesc_optics_2eproto();
  friend void protobuf_ShutdownFile_optics_2eproto();

  void InitAsDefaultInstance();
  static OpticsDiagStats* default_instance_;
};
// -------------------------------------------------------------------

class OpticsDiagLaneStats : public ::google::protobuf::Message {
 public:
  OpticsDiagLaneStats();
  virtual ~OpticsDiagLaneStats();

  OpticsDiagLaneStats(const OpticsDiagLaneStats& from);

  inline OpticsDiagLaneStats& operator=(const OpticsDiagLaneStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpticsDiagLaneStats& default_instance();

  void Swap(OpticsDiagLaneStats* other);

  // implements Message ----------------------------------------------

  inline OpticsDiagLaneStats* New() const { return New(NULL); }

  OpticsDiagLaneStats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpticsDiagLaneStats& from);
  void MergeFrom(const OpticsDiagLaneStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpticsDiagLaneStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 lane_number = 1;
  bool has_lane_number() const;
  void clear_lane_number();
  static const int kLaneNumberFieldNumber = 1;
  ::google::protobuf::uint32 lane_number() const;
  void set_lane_number(::google::protobuf::uint32 value);

  // optional double lane_laser_temperature = 2;
  bool has_lane_laser_temperature() const;
  void clear_lane_laser_temperature();
  static const int kLaneLaserTemperatureFieldNumber = 2;
  double lane_laser_temperature() const;
  void set_lane_laser_temperature(double value);

  // optional double lane_laser_output_power_dbm = 3;
  bool has_lane_laser_output_power_dbm() const;
  void clear_lane_laser_output_power_dbm();
  static const int kLaneLaserOutputPowerDbmFieldNumber = 3;
  double lane_laser_output_power_dbm() const;
  void set_lane_laser_output_power_dbm(double value);

  // optional double lane_laser_receiver_power_dbm = 4;
  bool has_lane_laser_receiver_power_dbm() const;
  void clear_lane_laser_receiver_power_dbm();
  static const int kLaneLaserReceiverPowerDbmFieldNumber = 4;
  double lane_laser_receiver_power_dbm() const;
  void set_lane_laser_receiver_power_dbm(double value);

  // optional double lane_laser_bias_current = 5;
  bool has_lane_laser_bias_current() const;
  void clear_lane_laser_bias_current();
  static const int kLaneLaserBiasCurrentFieldNumber = 5;
  double lane_laser_bias_current() const;
  void set_lane_laser_bias_current(double value);

  // optional bool lane_laser_output_power_high_alarm = 6;
  bool has_lane_laser_output_power_high_alarm() const;
  void clear_lane_laser_output_power_high_alarm();
  static const int kLaneLaserOutputPowerHighAlarmFieldNumber = 6;
  bool lane_laser_output_power_high_alarm() const;
  void set_lane_laser_output_power_high_alarm(bool value);

  // optional bool lane_laser_output_power_low_alarm = 7;
  bool has_lane_laser_output_power_low_alarm() const;
  void clear_lane_laser_output_power_low_alarm();
  static const int kLaneLaserOutputPowerLowAlarmFieldNumber = 7;
  bool lane_laser_output_power_low_alarm() const;
  void set_lane_laser_output_power_low_alarm(bool value);

  // optional bool lane_laser_output_power_high_warning = 8;
  bool has_lane_laser_output_power_high_warning() const;
  void clear_lane_laser_output_power_high_warning();
  static const int kLaneLaserOutputPowerHighWarningFieldNumber = 8;
  bool lane_laser_output_power_high_warning() const;
  void set_lane_laser_output_power_high_warning(bool value);

  // optional bool lane_laser_output_power_low_warning = 9;
  bool has_lane_laser_output_power_low_warning() const;
  void clear_lane_laser_output_power_low_warning();
  static const int kLaneLaserOutputPowerLowWarningFieldNumber = 9;
  bool lane_laser_output_power_low_warning() const;
  void set_lane_laser_output_power_low_warning(bool value);

  // optional bool lane_laser_receiver_power_high_alarm = 10;
  bool has_lane_laser_receiver_power_high_alarm() const;
  void clear_lane_laser_receiver_power_high_alarm();
  static const int kLaneLaserReceiverPowerHighAlarmFieldNumber = 10;
  bool lane_laser_receiver_power_high_alarm() const;
  void set_lane_laser_receiver_power_high_alarm(bool value);

  // optional bool lane_laser_receiver_power_low_alarm = 11;
  bool has_lane_laser_receiver_power_low_alarm() const;
  void clear_lane_laser_receiver_power_low_alarm();
  static const int kLaneLaserReceiverPowerLowAlarmFieldNumber = 11;
  bool lane_laser_receiver_power_low_alarm() const;
  void set_lane_laser_receiver_power_low_alarm(bool value);

  // optional bool lane_laser_receiver_power_high_warning = 12;
  bool has_lane_laser_receiver_power_high_warning() const;
  void clear_lane_laser_receiver_power_high_warning();
  static const int kLaneLaserReceiverPowerHighWarningFieldNumber = 12;
  bool lane_laser_receiver_power_high_warning() const;
  void set_lane_laser_receiver_power_high_warning(bool value);

  // optional bool lane_laser_receiver_power_low_warning = 13;
  bool has_lane_laser_receiver_power_low_warning() const;
  void clear_lane_laser_receiver_power_low_warning();
  static const int kLaneLaserReceiverPowerLowWarningFieldNumber = 13;
  bool lane_laser_receiver_power_low_warning() const;
  void set_lane_laser_receiver_power_low_warning(bool value);

  // optional bool lane_laser_bias_current_high_alarm = 14;
  bool has_lane_laser_bias_current_high_alarm() const;
  void clear_lane_laser_bias_current_high_alarm();
  static const int kLaneLaserBiasCurrentHighAlarmFieldNumber = 14;
  bool lane_laser_bias_current_high_alarm() const;
  void set_lane_laser_bias_current_high_alarm(bool value);

  // optional bool lane_laser_bias_current_low_alarm = 15;
  bool has_lane_laser_bias_current_low_alarm() const;
  void clear_lane_laser_bias_current_low_alarm();
  static const int kLaneLaserBiasCurrentLowAlarmFieldNumber = 15;
  bool lane_laser_bias_current_low_alarm() const;
  void set_lane_laser_bias_current_low_alarm(bool value);

  // optional bool lane_laser_bias_current_high_warning = 16;
  bool has_lane_laser_bias_current_high_warning() const;
  void clear_lane_laser_bias_current_high_warning();
  static const int kLaneLaserBiasCurrentHighWarningFieldNumber = 16;
  bool lane_laser_bias_current_high_warning() const;
  void set_lane_laser_bias_current_high_warning(bool value);

  // optional bool lane_laser_bias_current_low_warning = 17;
  bool has_lane_laser_bias_current_low_warning() const;
  void clear_lane_laser_bias_current_low_warning();
  static const int kLaneLaserBiasCurrentLowWarningFieldNumber = 17;
  bool lane_laser_bias_current_low_warning() const;
  void set_lane_laser_bias_current_low_warning(bool value);

  // optional bool lane_tx_loss_of_signal_alarm = 18;
  bool has_lane_tx_loss_of_signal_alarm() const;
  void clear_lane_tx_loss_of_signal_alarm();
  static const int kLaneTxLossOfSignalAlarmFieldNumber = 18;
  bool lane_tx_loss_of_signal_alarm() const;
  void set_lane_tx_loss_of_signal_alarm(bool value);

  // optional bool lane_rx_loss_of_signal_alarm = 19;
  bool has_lane_rx_loss_of_signal_alarm() const;
  void clear_lane_rx_loss_of_signal_alarm();
  static const int kLaneRxLossOfSignalAlarmFieldNumber = 19;
  bool lane_rx_loss_of_signal_alarm() const;
  void set_lane_rx_loss_of_signal_alarm(bool value);

  // optional bool lane_tx_laser_disabled_alarm = 20;
  bool has_lane_tx_laser_disabled_alarm() const;
  void clear_lane_tx_laser_disabled_alarm();
  static const int kLaneTxLaserDisabledAlarmFieldNumber = 20;
  bool lane_tx_laser_disabled_alarm() const;
  void set_lane_tx_laser_disabled_alarm(bool value);

  // @@protoc_insertion_point(class_scope:OpticsDiagLaneStats)
 private:
  inline void set_has_lane_number();
  inline void clear_has_lane_number();
  inline void set_has_lane_laser_temperature();
  inline void clear_has_lane_laser_temperature();
  inline void set_has_lane_laser_output_power_dbm();
  inline void clear_has_lane_laser_output_power_dbm();
  inline void set_has_lane_laser_receiver_power_dbm();
  inline void clear_has_lane_laser_receiver_power_dbm();
  inline void set_has_lane_laser_bias_current();
  inline void clear_has_lane_laser_bias_current();
  inline void set_has_lane_laser_output_power_high_alarm();
  inline void clear_has_lane_laser_output_power_high_alarm();
  inline void set_has_lane_laser_output_power_low_alarm();
  inline void clear_has_lane_laser_output_power_low_alarm();
  inline void set_has_lane_laser_output_power_high_warning();
  inline void clear_has_lane_laser_output_power_high_warning();
  inline void set_has_lane_laser_output_power_low_warning();
  inline void clear_has_lane_laser_output_power_low_warning();
  inline void set_has_lane_laser_receiver_power_high_alarm();
  inline void clear_has_lane_laser_receiver_power_high_alarm();
  inline void set_has_lane_laser_receiver_power_low_alarm();
  inline void clear_has_lane_laser_receiver_power_low_alarm();
  inline void set_has_lane_laser_receiver_power_high_warning();
  inline void clear_has_lane_laser_receiver_power_high_warning();
  inline void set_has_lane_laser_receiver_power_low_warning();
  inline void clear_has_lane_laser_receiver_power_low_warning();
  inline void set_has_lane_laser_bias_current_high_alarm();
  inline void clear_has_lane_laser_bias_current_high_alarm();
  inline void set_has_lane_laser_bias_current_low_alarm();
  inline void clear_has_lane_laser_bias_current_low_alarm();
  inline void set_has_lane_laser_bias_current_high_warning();
  inline void clear_has_lane_laser_bias_current_high_warning();
  inline void set_has_lane_laser_bias_current_low_warning();
  inline void clear_has_lane_laser_bias_current_low_warning();
  inline void set_has_lane_tx_loss_of_signal_alarm();
  inline void clear_has_lane_tx_loss_of_signal_alarm();
  inline void set_has_lane_rx_loss_of_signal_alarm();
  inline void clear_has_lane_rx_loss_of_signal_alarm();
  inline void set_has_lane_tx_laser_disabled_alarm();
  inline void clear_has_lane_tx_laser_disabled_alarm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double lane_laser_temperature_;
  double lane_laser_output_power_dbm_;
  double lane_laser_receiver_power_dbm_;
  double lane_laser_bias_current_;
  ::google::protobuf::uint32 lane_number_;
  bool lane_laser_output_power_high_alarm_;
  bool lane_laser_output_power_low_alarm_;
  bool lane_laser_output_power_high_warning_;
  bool lane_laser_output_power_low_warning_;
  bool lane_laser_receiver_power_high_alarm_;
  bool lane_laser_receiver_power_low_alarm_;
  bool lane_laser_receiver_power_high_warning_;
  bool lane_laser_receiver_power_low_warning_;
  bool lane_laser_bias_current_high_alarm_;
  bool lane_laser_bias_current_low_alarm_;
  bool lane_laser_bias_current_high_warning_;
  bool lane_laser_bias_current_low_warning_;
  bool lane_tx_loss_of_signal_alarm_;
  bool lane_rx_loss_of_signal_alarm_;
  bool lane_tx_laser_disabled_alarm_;
  friend void  protobuf_AddDesc_optics_2eproto();
  friend void protobuf_AssignDesc_optics_2eproto();
  friend void protobuf_ShutdownFile_optics_2eproto();

  void InitAsDefaultInstance();
  static OpticsDiagLaneStats* default_instance_;
};
// ===================================================================

static const int kJnprOpticsExtFieldNumber = 10;
extern ::google::protobuf::internal::ExtensionIdentifier< ::JuniperNetworksSensors,
    ::google::protobuf::internal::MessageTypeTraits< ::Optics >, 11, false >
  jnpr_optics_ext;

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Optics

// repeated .OpticsInfos Optics_diag = 1;
inline int Optics::optics_diag_size() const {
  return optics_diag_.size();
}
inline void Optics::clear_optics_diag() {
  optics_diag_.Clear();
}
inline const ::OpticsInfos& Optics::optics_diag(int index) const {
  // @@protoc_insertion_point(field_get:Optics.Optics_diag)
  return optics_diag_.Get(index);
}
inline ::OpticsInfos* Optics::mutable_optics_diag(int index) {
  // @@protoc_insertion_point(field_mutable:Optics.Optics_diag)
  return optics_diag_.Mutable(index);
}
inline ::OpticsInfos* Optics::add_optics_diag() {
  // @@protoc_insertion_point(field_add:Optics.Optics_diag)
  return optics_diag_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::OpticsInfos >*
Optics::mutable_optics_diag() {
  // @@protoc_insertion_point(field_mutable_list:Optics.Optics_diag)
  return &optics_diag_;
}
inline const ::google::protobuf::RepeatedPtrField< ::OpticsInfos >&
Optics::optics_diag() const {
  // @@protoc_insertion_point(field_list:Optics.Optics_diag)
  return optics_diag_;
}

// -------------------------------------------------------------------

// OpticsInfos

// required string if_name = 1;
inline bool OpticsInfos::has_if_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpticsInfos::set_has_if_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpticsInfos::clear_has_if_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpticsInfos::clear_if_name() {
  if_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_if_name();
}
inline const ::std::string& OpticsInfos::if_name() const {
  // @@protoc_insertion_point(field_get:OpticsInfos.if_name)
  return if_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpticsInfos::set_if_name(const ::std::string& value) {
  set_has_if_name();
  if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OpticsInfos.if_name)
}
inline void OpticsInfos::set_if_name(const char* value) {
  set_has_if_name();
  if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OpticsInfos.if_name)
}
inline void OpticsInfos::set_if_name(const char* value, size_t size) {
  set_has_if_name();
  if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OpticsInfos.if_name)
}
inline ::std::string* OpticsInfos::mutable_if_name() {
  set_has_if_name();
  // @@protoc_insertion_point(field_mutable:OpticsInfos.if_name)
  return if_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpticsInfos::release_if_name() {
  clear_has_if_name();
  return if_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpticsInfos::set_allocated_if_name(::std::string* if_name) {
  if (if_name != NULL) {
    set_has_if_name();
  } else {
    clear_has_if_name();
  }
  if_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), if_name);
  // @@protoc_insertion_point(field_set_allocated:OpticsInfos.if_name)
}

// optional uint32 snmp_if_index = 2;
inline bool OpticsInfos::has_snmp_if_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpticsInfos::set_has_snmp_if_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpticsInfos::clear_has_snmp_if_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpticsInfos::clear_snmp_if_index() {
  snmp_if_index_ = 0u;
  clear_has_snmp_if_index();
}
inline ::google::protobuf::uint32 OpticsInfos::snmp_if_index() const {
  // @@protoc_insertion_point(field_get:OpticsInfos.snmp_if_index)
  return snmp_if_index_;
}
inline void OpticsInfos::set_snmp_if_index(::google::protobuf::uint32 value) {
  set_has_snmp_if_index();
  snmp_if_index_ = value;
  // @@protoc_insertion_point(field_set:OpticsInfos.snmp_if_index)
}

// optional .OpticsDiagStats optics_diag_stats = 3;
inline bool OpticsInfos::has_optics_diag_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpticsInfos::set_has_optics_diag_stats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpticsInfos::clear_has_optics_diag_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpticsInfos::clear_optics_diag_stats() {
  if (optics_diag_stats_ != NULL) optics_diag_stats_->::OpticsDiagStats::Clear();
  clear_has_optics_diag_stats();
}
inline const ::OpticsDiagStats& OpticsInfos::optics_diag_stats() const {
  // @@protoc_insertion_point(field_get:OpticsInfos.optics_diag_stats)
  return optics_diag_stats_ != NULL ? *optics_diag_stats_ : *default_instance_->optics_diag_stats_;
}
inline ::OpticsDiagStats* OpticsInfos::mutable_optics_diag_stats() {
  set_has_optics_diag_stats();
  if (optics_diag_stats_ == NULL) {
    optics_diag_stats_ = new ::OpticsDiagStats;
  }
  // @@protoc_insertion_point(field_mutable:OpticsInfos.optics_diag_stats)
  return optics_diag_stats_;
}
inline ::OpticsDiagStats* OpticsInfos::release_optics_diag_stats() {
  clear_has_optics_diag_stats();
  ::OpticsDiagStats* temp = optics_diag_stats_;
  optics_diag_stats_ = NULL;
  return temp;
}
inline void OpticsInfos::set_allocated_optics_diag_stats(::OpticsDiagStats* optics_diag_stats) {
  delete optics_diag_stats_;
  optics_diag_stats_ = optics_diag_stats;
  if (optics_diag_stats) {
    set_has_optics_diag_stats();
  } else {
    clear_has_optics_diag_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:OpticsInfos.optics_diag_stats)
}

// -------------------------------------------------------------------

// OpticsDiagStats

// optional uint32 optics_type = 1;
inline bool OpticsDiagStats::has_optics_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpticsDiagStats::set_has_optics_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpticsDiagStats::clear_has_optics_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpticsDiagStats::clear_optics_type() {
  optics_type_ = 0u;
  clear_has_optics_type();
}
inline ::google::protobuf::uint32 OpticsDiagStats::optics_type() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.optics_type)
  return optics_type_;
}
inline void OpticsDiagStats::set_optics_type(::google::protobuf::uint32 value) {
  set_has_optics_type();
  optics_type_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.optics_type)
}

// optional double module_temp = 2;
inline bool OpticsDiagStats::has_module_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpticsDiagStats::set_has_module_temp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpticsDiagStats::clear_has_module_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpticsDiagStats::clear_module_temp() {
  module_temp_ = 0;
  clear_has_module_temp();
}
inline double OpticsDiagStats::module_temp() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp)
  return module_temp_;
}
inline void OpticsDiagStats::set_module_temp(double value) {
  set_has_module_temp();
  module_temp_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp)
}

// optional double module_temp_high_alarm_threshold = 3;
inline bool OpticsDiagStats::has_module_temp_high_alarm_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpticsDiagStats::set_has_module_temp_high_alarm_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpticsDiagStats::clear_has_module_temp_high_alarm_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpticsDiagStats::clear_module_temp_high_alarm_threshold() {
  module_temp_high_alarm_threshold_ = 0;
  clear_has_module_temp_high_alarm_threshold();
}
inline double OpticsDiagStats::module_temp_high_alarm_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_high_alarm_threshold)
  return module_temp_high_alarm_threshold_;
}
inline void OpticsDiagStats::set_module_temp_high_alarm_threshold(double value) {
  set_has_module_temp_high_alarm_threshold();
  module_temp_high_alarm_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_high_alarm_threshold)
}

// optional double module_temp_low_alarm_threshold = 4;
inline bool OpticsDiagStats::has_module_temp_low_alarm_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpticsDiagStats::set_has_module_temp_low_alarm_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpticsDiagStats::clear_has_module_temp_low_alarm_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpticsDiagStats::clear_module_temp_low_alarm_threshold() {
  module_temp_low_alarm_threshold_ = 0;
  clear_has_module_temp_low_alarm_threshold();
}
inline double OpticsDiagStats::module_temp_low_alarm_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_low_alarm_threshold)
  return module_temp_low_alarm_threshold_;
}
inline void OpticsDiagStats::set_module_temp_low_alarm_threshold(double value) {
  set_has_module_temp_low_alarm_threshold();
  module_temp_low_alarm_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_low_alarm_threshold)
}

// optional double module_temp_high_warning_threshold = 5;
inline bool OpticsDiagStats::has_module_temp_high_warning_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpticsDiagStats::set_has_module_temp_high_warning_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpticsDiagStats::clear_has_module_temp_high_warning_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpticsDiagStats::clear_module_temp_high_warning_threshold() {
  module_temp_high_warning_threshold_ = 0;
  clear_has_module_temp_high_warning_threshold();
}
inline double OpticsDiagStats::module_temp_high_warning_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_high_warning_threshold)
  return module_temp_high_warning_threshold_;
}
inline void OpticsDiagStats::set_module_temp_high_warning_threshold(double value) {
  set_has_module_temp_high_warning_threshold();
  module_temp_high_warning_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_high_warning_threshold)
}

// optional double module_temp_low_warning_threshold = 6;
inline bool OpticsDiagStats::has_module_temp_low_warning_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpticsDiagStats::set_has_module_temp_low_warning_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpticsDiagStats::clear_has_module_temp_low_warning_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpticsDiagStats::clear_module_temp_low_warning_threshold() {
  module_temp_low_warning_threshold_ = 0;
  clear_has_module_temp_low_warning_threshold();
}
inline double OpticsDiagStats::module_temp_low_warning_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_low_warning_threshold)
  return module_temp_low_warning_threshold_;
}
inline void OpticsDiagStats::set_module_temp_low_warning_threshold(double value) {
  set_has_module_temp_low_warning_threshold();
  module_temp_low_warning_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_low_warning_threshold)
}

// optional double laser_output_power_high_alarm_threshold_dbm = 7;
inline bool OpticsDiagStats::has_laser_output_power_high_alarm_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpticsDiagStats::set_has_laser_output_power_high_alarm_threshold_dbm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpticsDiagStats::clear_has_laser_output_power_high_alarm_threshold_dbm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpticsDiagStats::clear_laser_output_power_high_alarm_threshold_dbm() {
  laser_output_power_high_alarm_threshold_dbm_ = 0;
  clear_has_laser_output_power_high_alarm_threshold_dbm();
}
inline double OpticsDiagStats::laser_output_power_high_alarm_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_output_power_high_alarm_threshold_dbm)
  return laser_output_power_high_alarm_threshold_dbm_;
}
inline void OpticsDiagStats::set_laser_output_power_high_alarm_threshold_dbm(double value) {
  set_has_laser_output_power_high_alarm_threshold_dbm();
  laser_output_power_high_alarm_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_output_power_high_alarm_threshold_dbm)
}

// optional double laser_output_power_low_alarm_threshold_dbm = 8;
inline bool OpticsDiagStats::has_laser_output_power_low_alarm_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OpticsDiagStats::set_has_laser_output_power_low_alarm_threshold_dbm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OpticsDiagStats::clear_has_laser_output_power_low_alarm_threshold_dbm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OpticsDiagStats::clear_laser_output_power_low_alarm_threshold_dbm() {
  laser_output_power_low_alarm_threshold_dbm_ = 0;
  clear_has_laser_output_power_low_alarm_threshold_dbm();
}
inline double OpticsDiagStats::laser_output_power_low_alarm_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_output_power_low_alarm_threshold_dbm)
  return laser_output_power_low_alarm_threshold_dbm_;
}
inline void OpticsDiagStats::set_laser_output_power_low_alarm_threshold_dbm(double value) {
  set_has_laser_output_power_low_alarm_threshold_dbm();
  laser_output_power_low_alarm_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_output_power_low_alarm_threshold_dbm)
}

// optional double laser_output_power_high_warning_threshold_dbm = 9;
inline bool OpticsDiagStats::has_laser_output_power_high_warning_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OpticsDiagStats::set_has_laser_output_power_high_warning_threshold_dbm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OpticsDiagStats::clear_has_laser_output_power_high_warning_threshold_dbm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OpticsDiagStats::clear_laser_output_power_high_warning_threshold_dbm() {
  laser_output_power_high_warning_threshold_dbm_ = 0;
  clear_has_laser_output_power_high_warning_threshold_dbm();
}
inline double OpticsDiagStats::laser_output_power_high_warning_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_output_power_high_warning_threshold_dbm)
  return laser_output_power_high_warning_threshold_dbm_;
}
inline void OpticsDiagStats::set_laser_output_power_high_warning_threshold_dbm(double value) {
  set_has_laser_output_power_high_warning_threshold_dbm();
  laser_output_power_high_warning_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_output_power_high_warning_threshold_dbm)
}

// optional double laser_output_power_low_warning_threshold_dbm = 10;
inline bool OpticsDiagStats::has_laser_output_power_low_warning_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OpticsDiagStats::set_has_laser_output_power_low_warning_threshold_dbm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OpticsDiagStats::clear_has_laser_output_power_low_warning_threshold_dbm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OpticsDiagStats::clear_laser_output_power_low_warning_threshold_dbm() {
  laser_output_power_low_warning_threshold_dbm_ = 0;
  clear_has_laser_output_power_low_warning_threshold_dbm();
}
inline double OpticsDiagStats::laser_output_power_low_warning_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_output_power_low_warning_threshold_dbm)
  return laser_output_power_low_warning_threshold_dbm_;
}
inline void OpticsDiagStats::set_laser_output_power_low_warning_threshold_dbm(double value) {
  set_has_laser_output_power_low_warning_threshold_dbm();
  laser_output_power_low_warning_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_output_power_low_warning_threshold_dbm)
}

// optional double laser_rx_power_high_alarm_threshold_dbm = 11;
inline bool OpticsDiagStats::has_laser_rx_power_high_alarm_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OpticsDiagStats::set_has_laser_rx_power_high_alarm_threshold_dbm() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OpticsDiagStats::clear_has_laser_rx_power_high_alarm_threshold_dbm() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OpticsDiagStats::clear_laser_rx_power_high_alarm_threshold_dbm() {
  laser_rx_power_high_alarm_threshold_dbm_ = 0;
  clear_has_laser_rx_power_high_alarm_threshold_dbm();
}
inline double OpticsDiagStats::laser_rx_power_high_alarm_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_rx_power_high_alarm_threshold_dbm)
  return laser_rx_power_high_alarm_threshold_dbm_;
}
inline void OpticsDiagStats::set_laser_rx_power_high_alarm_threshold_dbm(double value) {
  set_has_laser_rx_power_high_alarm_threshold_dbm();
  laser_rx_power_high_alarm_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_rx_power_high_alarm_threshold_dbm)
}

// optional double laser_rx_power_low_alarm_threshold_dbm = 12;
inline bool OpticsDiagStats::has_laser_rx_power_low_alarm_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OpticsDiagStats::set_has_laser_rx_power_low_alarm_threshold_dbm() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OpticsDiagStats::clear_has_laser_rx_power_low_alarm_threshold_dbm() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OpticsDiagStats::clear_laser_rx_power_low_alarm_threshold_dbm() {
  laser_rx_power_low_alarm_threshold_dbm_ = 0;
  clear_has_laser_rx_power_low_alarm_threshold_dbm();
}
inline double OpticsDiagStats::laser_rx_power_low_alarm_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_rx_power_low_alarm_threshold_dbm)
  return laser_rx_power_low_alarm_threshold_dbm_;
}
inline void OpticsDiagStats::set_laser_rx_power_low_alarm_threshold_dbm(double value) {
  set_has_laser_rx_power_low_alarm_threshold_dbm();
  laser_rx_power_low_alarm_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_rx_power_low_alarm_threshold_dbm)
}

// optional double laser_rx_power_high_warning_threshold_dbm = 13;
inline bool OpticsDiagStats::has_laser_rx_power_high_warning_threshold_dbm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OpticsDiagStats::set_has_laser_rx_power_high_warning_threshold_dbm() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OpticsDiagStats::clear_has_laser_rx_power_high_warning_threshold_dbm() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OpticsDiagStats::clear_laser_rx_power_high_warning_threshold_dbm() {
  laser_rx_power_high_warning_threshold_dbm_ = 0;
  clear_has_laser_rx_power_high_warning_threshold_dbm();
}
inline double OpticsDiagStats::laser_rx_power_high_warning_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_rx_power_high_warning_threshold_dbm)
  return laser_rx_power_high_warning_threshold_dbm_;
}
inline void OpticsDiagStats::set_laser_rx_power_high_warning_threshold_dbm(double value) {
  set_has_laser_rx_power_high_warning_threshold_dbm();
  laser_rx_power_high_warning_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_rx_power_high_warning_threshold_dbm)
}

// optional double laser_rx_power_low_warning_threshold_dbm = 14;
inline bool OpticsDiagStats::has_laser_rx_power_low_warning_threshold_dbm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OpticsDiagStats::set_has_laser_rx_power_low_warning_threshold_dbm() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OpticsDiagStats::clear_has_laser_rx_power_low_warning_threshold_dbm() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OpticsDiagStats::clear_laser_rx_power_low_warning_threshold_dbm() {
  laser_rx_power_low_warning_threshold_dbm_ = 0;
  clear_has_laser_rx_power_low_warning_threshold_dbm();
}
inline double OpticsDiagStats::laser_rx_power_low_warning_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_rx_power_low_warning_threshold_dbm)
  return laser_rx_power_low_warning_threshold_dbm_;
}
inline void OpticsDiagStats::set_laser_rx_power_low_warning_threshold_dbm(double value) {
  set_has_laser_rx_power_low_warning_threshold_dbm();
  laser_rx_power_low_warning_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_rx_power_low_warning_threshold_dbm)
}

// optional double laser_bias_current_high_alarm_threshold = 15;
inline bool OpticsDiagStats::has_laser_bias_current_high_alarm_threshold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OpticsDiagStats::set_has_laser_bias_current_high_alarm_threshold() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OpticsDiagStats::clear_has_laser_bias_current_high_alarm_threshold() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OpticsDiagStats::clear_laser_bias_current_high_alarm_threshold() {
  laser_bias_current_high_alarm_threshold_ = 0;
  clear_has_laser_bias_current_high_alarm_threshold();
}
inline double OpticsDiagStats::laser_bias_current_high_alarm_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_bias_current_high_alarm_threshold)
  return laser_bias_current_high_alarm_threshold_;
}
inline void OpticsDiagStats::set_laser_bias_current_high_alarm_threshold(double value) {
  set_has_laser_bias_current_high_alarm_threshold();
  laser_bias_current_high_alarm_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_bias_current_high_alarm_threshold)
}

// optional double laser_bias_current_low_alarm_threshold = 16;
inline bool OpticsDiagStats::has_laser_bias_current_low_alarm_threshold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OpticsDiagStats::set_has_laser_bias_current_low_alarm_threshold() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OpticsDiagStats::clear_has_laser_bias_current_low_alarm_threshold() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OpticsDiagStats::clear_laser_bias_current_low_alarm_threshold() {
  laser_bias_current_low_alarm_threshold_ = 0;
  clear_has_laser_bias_current_low_alarm_threshold();
}
inline double OpticsDiagStats::laser_bias_current_low_alarm_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_bias_current_low_alarm_threshold)
  return laser_bias_current_low_alarm_threshold_;
}
inline void OpticsDiagStats::set_laser_bias_current_low_alarm_threshold(double value) {
  set_has_laser_bias_current_low_alarm_threshold();
  laser_bias_current_low_alarm_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_bias_current_low_alarm_threshold)
}

// optional double laser_bias_current_high_warning_threshold = 17;
inline bool OpticsDiagStats::has_laser_bias_current_high_warning_threshold() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OpticsDiagStats::set_has_laser_bias_current_high_warning_threshold() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OpticsDiagStats::clear_has_laser_bias_current_high_warning_threshold() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OpticsDiagStats::clear_laser_bias_current_high_warning_threshold() {
  laser_bias_current_high_warning_threshold_ = 0;
  clear_has_laser_bias_current_high_warning_threshold();
}
inline double OpticsDiagStats::laser_bias_current_high_warning_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_bias_current_high_warning_threshold)
  return laser_bias_current_high_warning_threshold_;
}
inline void OpticsDiagStats::set_laser_bias_current_high_warning_threshold(double value) {
  set_has_laser_bias_current_high_warning_threshold();
  laser_bias_current_high_warning_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_bias_current_high_warning_threshold)
}

// optional double laser_bias_current_low_warning_threshold = 18;
inline bool OpticsDiagStats::has_laser_bias_current_low_warning_threshold() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OpticsDiagStats::set_has_laser_bias_current_low_warning_threshold() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OpticsDiagStats::clear_has_laser_bias_current_low_warning_threshold() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OpticsDiagStats::clear_laser_bias_current_low_warning_threshold() {
  laser_bias_current_low_warning_threshold_ = 0;
  clear_has_laser_bias_current_low_warning_threshold();
}
inline double OpticsDiagStats::laser_bias_current_low_warning_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_bias_current_low_warning_threshold)
  return laser_bias_current_low_warning_threshold_;
}
inline void OpticsDiagStats::set_laser_bias_current_low_warning_threshold(double value) {
  set_has_laser_bias_current_low_warning_threshold();
  laser_bias_current_low_warning_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_bias_current_low_warning_threshold)
}

// optional bool module_temp_high_alarm = 19;
inline bool OpticsDiagStats::has_module_temp_high_alarm() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OpticsDiagStats::set_has_module_temp_high_alarm() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OpticsDiagStats::clear_has_module_temp_high_alarm() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OpticsDiagStats::clear_module_temp_high_alarm() {
  module_temp_high_alarm_ = false;
  clear_has_module_temp_high_alarm();
}
inline bool OpticsDiagStats::module_temp_high_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_high_alarm)
  return module_temp_high_alarm_;
}
inline void OpticsDiagStats::set_module_temp_high_alarm(bool value) {
  set_has_module_temp_high_alarm();
  module_temp_high_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_high_alarm)
}

// optional bool module_temp_low_alarm = 20;
inline bool OpticsDiagStats::has_module_temp_low_alarm() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OpticsDiagStats::set_has_module_temp_low_alarm() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OpticsDiagStats::clear_has_module_temp_low_alarm() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OpticsDiagStats::clear_module_temp_low_alarm() {
  module_temp_low_alarm_ = false;
  clear_has_module_temp_low_alarm();
}
inline bool OpticsDiagStats::module_temp_low_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_low_alarm)
  return module_temp_low_alarm_;
}
inline void OpticsDiagStats::set_module_temp_low_alarm(bool value) {
  set_has_module_temp_low_alarm();
  module_temp_low_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_low_alarm)
}

// optional bool module_temp_high_warning = 21;
inline bool OpticsDiagStats::has_module_temp_high_warning() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OpticsDiagStats::set_has_module_temp_high_warning() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OpticsDiagStats::clear_has_module_temp_high_warning() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OpticsDiagStats::clear_module_temp_high_warning() {
  module_temp_high_warning_ = false;
  clear_has_module_temp_high_warning();
}
inline bool OpticsDiagStats::module_temp_high_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_high_warning)
  return module_temp_high_warning_;
}
inline void OpticsDiagStats::set_module_temp_high_warning(bool value) {
  set_has_module_temp_high_warning();
  module_temp_high_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_high_warning)
}

// optional bool module_temp_low_warning = 22;
inline bool OpticsDiagStats::has_module_temp_low_warning() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OpticsDiagStats::set_has_module_temp_low_warning() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OpticsDiagStats::clear_has_module_temp_low_warning() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OpticsDiagStats::clear_module_temp_low_warning() {
  module_temp_low_warning_ = false;
  clear_has_module_temp_low_warning();
}
inline bool OpticsDiagStats::module_temp_low_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_low_warning)
  return module_temp_low_warning_;
}
inline void OpticsDiagStats::set_module_temp_low_warning(bool value) {
  set_has_module_temp_low_warning();
  module_temp_low_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_low_warning)
}

// repeated .OpticsDiagLaneStats optics_lane_diag_stats = 23;
inline int OpticsDiagStats::optics_lane_diag_stats_size() const {
  return optics_lane_diag_stats_.size();
}
inline void OpticsDiagStats::clear_optics_lane_diag_stats() {
  optics_lane_diag_stats_.Clear();
}
inline const ::OpticsDiagLaneStats& OpticsDiagStats::optics_lane_diag_stats(int index) const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.optics_lane_diag_stats)
  return optics_lane_diag_stats_.Get(index);
}
inline ::OpticsDiagLaneStats* OpticsDiagStats::mutable_optics_lane_diag_stats(int index) {
  // @@protoc_insertion_point(field_mutable:OpticsDiagStats.optics_lane_diag_stats)
  return optics_lane_diag_stats_.Mutable(index);
}
inline ::OpticsDiagLaneStats* OpticsDiagStats::add_optics_lane_diag_stats() {
  // @@protoc_insertion_point(field_add:OpticsDiagStats.optics_lane_diag_stats)
  return optics_lane_diag_stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::OpticsDiagLaneStats >*
OpticsDiagStats::mutable_optics_lane_diag_stats() {
  // @@protoc_insertion_point(field_mutable_list:OpticsDiagStats.optics_lane_diag_stats)
  return &optics_lane_diag_stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::OpticsDiagLaneStats >&
OpticsDiagStats::optics_lane_diag_stats() const {
  // @@protoc_insertion_point(field_list:OpticsDiagStats.optics_lane_diag_stats)
  return optics_lane_diag_stats_;
}

// -------------------------------------------------------------------

// OpticsDiagLaneStats

// optional uint32 lane_number = 1;
inline bool OpticsDiagLaneStats::has_lane_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpticsDiagLaneStats::clear_has_lane_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpticsDiagLaneStats::clear_lane_number() {
  lane_number_ = 0u;
  clear_has_lane_number();
}
inline ::google::protobuf::uint32 OpticsDiagLaneStats::lane_number() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_number)
  return lane_number_;
}
inline void OpticsDiagLaneStats::set_lane_number(::google::protobuf::uint32 value) {
  set_has_lane_number();
  lane_number_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_number)
}

// optional double lane_laser_temperature = 2;
inline bool OpticsDiagLaneStats::has_lane_laser_temperature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_temperature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_temperature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_temperature() {
  lane_laser_temperature_ = 0;
  clear_has_lane_laser_temperature();
}
inline double OpticsDiagLaneStats::lane_laser_temperature() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_temperature)
  return lane_laser_temperature_;
}
inline void OpticsDiagLaneStats::set_lane_laser_temperature(double value) {
  set_has_lane_laser_temperature();
  lane_laser_temperature_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_temperature)
}

// optional double lane_laser_output_power_dbm = 3;
inline bool OpticsDiagLaneStats::has_lane_laser_output_power_dbm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_output_power_dbm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_output_power_dbm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_output_power_dbm() {
  lane_laser_output_power_dbm_ = 0;
  clear_has_lane_laser_output_power_dbm();
}
inline double OpticsDiagLaneStats::lane_laser_output_power_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_output_power_dbm)
  return lane_laser_output_power_dbm_;
}
inline void OpticsDiagLaneStats::set_lane_laser_output_power_dbm(double value) {
  set_has_lane_laser_output_power_dbm();
  lane_laser_output_power_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_output_power_dbm)
}

// optional double lane_laser_receiver_power_dbm = 4;
inline bool OpticsDiagLaneStats::has_lane_laser_receiver_power_dbm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_receiver_power_dbm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_receiver_power_dbm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_receiver_power_dbm() {
  lane_laser_receiver_power_dbm_ = 0;
  clear_has_lane_laser_receiver_power_dbm();
}
inline double OpticsDiagLaneStats::lane_laser_receiver_power_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_receiver_power_dbm)
  return lane_laser_receiver_power_dbm_;
}
inline void OpticsDiagLaneStats::set_lane_laser_receiver_power_dbm(double value) {
  set_has_lane_laser_receiver_power_dbm();
  lane_laser_receiver_power_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_receiver_power_dbm)
}

// optional double lane_laser_bias_current = 5;
inline bool OpticsDiagLaneStats::has_lane_laser_bias_current() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_bias_current() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_bias_current() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_bias_current() {
  lane_laser_bias_current_ = 0;
  clear_has_lane_laser_bias_current();
}
inline double OpticsDiagLaneStats::lane_laser_bias_current() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_bias_current)
  return lane_laser_bias_current_;
}
inline void OpticsDiagLaneStats::set_lane_laser_bias_current(double value) {
  set_has_lane_laser_bias_current();
  lane_laser_bias_current_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_bias_current)
}

// optional bool lane_laser_output_power_high_alarm = 6;
inline bool OpticsDiagLaneStats::has_lane_laser_output_power_high_alarm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_output_power_high_alarm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_output_power_high_alarm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_output_power_high_alarm() {
  lane_laser_output_power_high_alarm_ = false;
  clear_has_lane_laser_output_power_high_alarm();
}
inline bool OpticsDiagLaneStats::lane_laser_output_power_high_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_output_power_high_alarm)
  return lane_laser_output_power_high_alarm_;
}
inline void OpticsDiagLaneStats::set_lane_laser_output_power_high_alarm(bool value) {
  set_has_lane_laser_output_power_high_alarm();
  lane_laser_output_power_high_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_output_power_high_alarm)
}

// optional bool lane_laser_output_power_low_alarm = 7;
inline bool OpticsDiagLaneStats::has_lane_laser_output_power_low_alarm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_output_power_low_alarm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_output_power_low_alarm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_output_power_low_alarm() {
  lane_laser_output_power_low_alarm_ = false;
  clear_has_lane_laser_output_power_low_alarm();
}
inline bool OpticsDiagLaneStats::lane_laser_output_power_low_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_output_power_low_alarm)
  return lane_laser_output_power_low_alarm_;
}
inline void OpticsDiagLaneStats::set_lane_laser_output_power_low_alarm(bool value) {
  set_has_lane_laser_output_power_low_alarm();
  lane_laser_output_power_low_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_output_power_low_alarm)
}

// optional bool lane_laser_output_power_high_warning = 8;
inline bool OpticsDiagLaneStats::has_lane_laser_output_power_high_warning() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_output_power_high_warning() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_output_power_high_warning() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_output_power_high_warning() {
  lane_laser_output_power_high_warning_ = false;
  clear_has_lane_laser_output_power_high_warning();
}
inline bool OpticsDiagLaneStats::lane_laser_output_power_high_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_output_power_high_warning)
  return lane_laser_output_power_high_warning_;
}
inline void OpticsDiagLaneStats::set_lane_laser_output_power_high_warning(bool value) {
  set_has_lane_laser_output_power_high_warning();
  lane_laser_output_power_high_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_output_power_high_warning)
}

// optional bool lane_laser_output_power_low_warning = 9;
inline bool OpticsDiagLaneStats::has_lane_laser_output_power_low_warning() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_output_power_low_warning() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_output_power_low_warning() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_output_power_low_warning() {
  lane_laser_output_power_low_warning_ = false;
  clear_has_lane_laser_output_power_low_warning();
}
inline bool OpticsDiagLaneStats::lane_laser_output_power_low_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_output_power_low_warning)
  return lane_laser_output_power_low_warning_;
}
inline void OpticsDiagLaneStats::set_lane_laser_output_power_low_warning(bool value) {
  set_has_lane_laser_output_power_low_warning();
  lane_laser_output_power_low_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_output_power_low_warning)
}

// optional bool lane_laser_receiver_power_high_alarm = 10;
inline bool OpticsDiagLaneStats::has_lane_laser_receiver_power_high_alarm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_receiver_power_high_alarm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_receiver_power_high_alarm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_receiver_power_high_alarm() {
  lane_laser_receiver_power_high_alarm_ = false;
  clear_has_lane_laser_receiver_power_high_alarm();
}
inline bool OpticsDiagLaneStats::lane_laser_receiver_power_high_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_receiver_power_high_alarm)
  return lane_laser_receiver_power_high_alarm_;
}
inline void OpticsDiagLaneStats::set_lane_laser_receiver_power_high_alarm(bool value) {
  set_has_lane_laser_receiver_power_high_alarm();
  lane_laser_receiver_power_high_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_receiver_power_high_alarm)
}

// optional bool lane_laser_receiver_power_low_alarm = 11;
inline bool OpticsDiagLaneStats::has_lane_laser_receiver_power_low_alarm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_receiver_power_low_alarm() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_receiver_power_low_alarm() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_receiver_power_low_alarm() {
  lane_laser_receiver_power_low_alarm_ = false;
  clear_has_lane_laser_receiver_power_low_alarm();
}
inline bool OpticsDiagLaneStats::lane_laser_receiver_power_low_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_receiver_power_low_alarm)
  return lane_laser_receiver_power_low_alarm_;
}
inline void OpticsDiagLaneStats::set_lane_laser_receiver_power_low_alarm(bool value) {
  set_has_lane_laser_receiver_power_low_alarm();
  lane_laser_receiver_power_low_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_receiver_power_low_alarm)
}

// optional bool lane_laser_receiver_power_high_warning = 12;
inline bool OpticsDiagLaneStats::has_lane_laser_receiver_power_high_warning() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_receiver_power_high_warning() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_receiver_power_high_warning() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_receiver_power_high_warning() {
  lane_laser_receiver_power_high_warning_ = false;
  clear_has_lane_laser_receiver_power_high_warning();
}
inline bool OpticsDiagLaneStats::lane_laser_receiver_power_high_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_receiver_power_high_warning)
  return lane_laser_receiver_power_high_warning_;
}
inline void OpticsDiagLaneStats::set_lane_laser_receiver_power_high_warning(bool value) {
  set_has_lane_laser_receiver_power_high_warning();
  lane_laser_receiver_power_high_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_receiver_power_high_warning)
}

// optional bool lane_laser_receiver_power_low_warning = 13;
inline bool OpticsDiagLaneStats::has_lane_laser_receiver_power_low_warning() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_receiver_power_low_warning() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_receiver_power_low_warning() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_receiver_power_low_warning() {
  lane_laser_receiver_power_low_warning_ = false;
  clear_has_lane_laser_receiver_power_low_warning();
}
inline bool OpticsDiagLaneStats::lane_laser_receiver_power_low_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_receiver_power_low_warning)
  return lane_laser_receiver_power_low_warning_;
}
inline void OpticsDiagLaneStats::set_lane_laser_receiver_power_low_warning(bool value) {
  set_has_lane_laser_receiver_power_low_warning();
  lane_laser_receiver_power_low_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_receiver_power_low_warning)
}

// optional bool lane_laser_bias_current_high_alarm = 14;
inline bool OpticsDiagLaneStats::has_lane_laser_bias_current_high_alarm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_bias_current_high_alarm() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_bias_current_high_alarm() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_bias_current_high_alarm() {
  lane_laser_bias_current_high_alarm_ = false;
  clear_has_lane_laser_bias_current_high_alarm();
}
inline bool OpticsDiagLaneStats::lane_laser_bias_current_high_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_bias_current_high_alarm)
  return lane_laser_bias_current_high_alarm_;
}
inline void OpticsDiagLaneStats::set_lane_laser_bias_current_high_alarm(bool value) {
  set_has_lane_laser_bias_current_high_alarm();
  lane_laser_bias_current_high_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_bias_current_high_alarm)
}

// optional bool lane_laser_bias_current_low_alarm = 15;
inline bool OpticsDiagLaneStats::has_lane_laser_bias_current_low_alarm() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_bias_current_low_alarm() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_bias_current_low_alarm() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_bias_current_low_alarm() {
  lane_laser_bias_current_low_alarm_ = false;
  clear_has_lane_laser_bias_current_low_alarm();
}
inline bool OpticsDiagLaneStats::lane_laser_bias_current_low_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_bias_current_low_alarm)
  return lane_laser_bias_current_low_alarm_;
}
inline void OpticsDiagLaneStats::set_lane_laser_bias_current_low_alarm(bool value) {
  set_has_lane_laser_bias_current_low_alarm();
  lane_laser_bias_current_low_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_bias_current_low_alarm)
}

// optional bool lane_laser_bias_current_high_warning = 16;
inline bool OpticsDiagLaneStats::has_lane_laser_bias_current_high_warning() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_bias_current_high_warning() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_bias_current_high_warning() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_bias_current_high_warning() {
  lane_laser_bias_current_high_warning_ = false;
  clear_has_lane_laser_bias_current_high_warning();
}
inline bool OpticsDiagLaneStats::lane_laser_bias_current_high_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_bias_current_high_warning)
  return lane_laser_bias_current_high_warning_;
}
inline void OpticsDiagLaneStats::set_lane_laser_bias_current_high_warning(bool value) {
  set_has_lane_laser_bias_current_high_warning();
  lane_laser_bias_current_high_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_bias_current_high_warning)
}

// optional bool lane_laser_bias_current_low_warning = 17;
inline bool OpticsDiagLaneStats::has_lane_laser_bias_current_low_warning() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_laser_bias_current_low_warning() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OpticsDiagLaneStats::clear_has_lane_laser_bias_current_low_warning() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OpticsDiagLaneStats::clear_lane_laser_bias_current_low_warning() {
  lane_laser_bias_current_low_warning_ = false;
  clear_has_lane_laser_bias_current_low_warning();
}
inline bool OpticsDiagLaneStats::lane_laser_bias_current_low_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_bias_current_low_warning)
  return lane_laser_bias_current_low_warning_;
}
inline void OpticsDiagLaneStats::set_lane_laser_bias_current_low_warning(bool value) {
  set_has_lane_laser_bias_current_low_warning();
  lane_laser_bias_current_low_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_bias_current_low_warning)
}

// optional bool lane_tx_loss_of_signal_alarm = 18;
inline bool OpticsDiagLaneStats::has_lane_tx_loss_of_signal_alarm() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_tx_loss_of_signal_alarm() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OpticsDiagLaneStats::clear_has_lane_tx_loss_of_signal_alarm() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OpticsDiagLaneStats::clear_lane_tx_loss_of_signal_alarm() {
  lane_tx_loss_of_signal_alarm_ = false;
  clear_has_lane_tx_loss_of_signal_alarm();
}
inline bool OpticsDiagLaneStats::lane_tx_loss_of_signal_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_tx_loss_of_signal_alarm)
  return lane_tx_loss_of_signal_alarm_;
}
inline void OpticsDiagLaneStats::set_lane_tx_loss_of_signal_alarm(bool value) {
  set_has_lane_tx_loss_of_signal_alarm();
  lane_tx_loss_of_signal_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_tx_loss_of_signal_alarm)
}

// optional bool lane_rx_loss_of_signal_alarm = 19;
inline bool OpticsDiagLaneStats::has_lane_rx_loss_of_signal_alarm() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_rx_loss_of_signal_alarm() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OpticsDiagLaneStats::clear_has_lane_rx_loss_of_signal_alarm() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OpticsDiagLaneStats::clear_lane_rx_loss_of_signal_alarm() {
  lane_rx_loss_of_signal_alarm_ = false;
  clear_has_lane_rx_loss_of_signal_alarm();
}
inline bool OpticsDiagLaneStats::lane_rx_loss_of_signal_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_rx_loss_of_signal_alarm)
  return lane_rx_loss_of_signal_alarm_;
}
inline void OpticsDiagLaneStats::set_lane_rx_loss_of_signal_alarm(bool value) {
  set_has_lane_rx_loss_of_signal_alarm();
  lane_rx_loss_of_signal_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_rx_loss_of_signal_alarm)
}

// optional bool lane_tx_laser_disabled_alarm = 20;
inline bool OpticsDiagLaneStats::has_lane_tx_laser_disabled_alarm() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OpticsDiagLaneStats::set_has_lane_tx_laser_disabled_alarm() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OpticsDiagLaneStats::clear_has_lane_tx_laser_disabled_alarm() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OpticsDiagLaneStats::clear_lane_tx_laser_disabled_alarm() {
  lane_tx_laser_disabled_alarm_ = false;
  clear_has_lane_tx_laser_disabled_alarm();
}
inline bool OpticsDiagLaneStats::lane_tx_laser_disabled_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_tx_laser_disabled_alarm)
  return lane_tx_laser_disabled_alarm_;
}
inline void OpticsDiagLaneStats::set_lane_tx_laser_disabled_alarm(bool value) {
  set_has_lane_tx_laser_disabled_alarm();
  lane_tx_laser_disabled_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_tx_laser_disabled_alarm)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_optics_2eproto__INCLUDED
