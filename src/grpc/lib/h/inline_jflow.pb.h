// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inline_jflow.proto

#ifndef PROTOBUF_inline_5fjflow_2eproto__INCLUDED
#define PROTOBUF_inline_5fjflow_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "telemetry_top.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_inline_5fjflow_2eproto();
void protobuf_AssignDesc_inline_5fjflow_2eproto();
void protobuf_ShutdownFile_inline_5fjflow_2eproto();

class InlineJflow;
class InlineJflowNpuStats;

// ===================================================================

class InlineJflow : public ::google::protobuf::Message {
 public:
  InlineJflow();
  virtual ~InlineJflow();

  InlineJflow(const InlineJflow& from);

  inline InlineJflow& operator=(const InlineJflow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InlineJflow& default_instance();

  void Swap(InlineJflow* other);

  // implements Message ----------------------------------------------

  inline InlineJflow* New() const { return New(NULL); }

  InlineJflow* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InlineJflow& from);
  void MergeFrom(const InlineJflow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InlineJflow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ipv4_flows_export_format = 2;
  bool has_ipv4_flows_export_format() const;
  void clear_ipv4_flows_export_format();
  static const int kIpv4FlowsExportFormatFieldNumber = 2;
  const ::std::string& ipv4_flows_export_format() const;
  void set_ipv4_flows_export_format(const ::std::string& value);
  void set_ipv4_flows_export_format(const char* value);
  void set_ipv4_flows_export_format(const char* value, size_t size);
  ::std::string* mutable_ipv4_flows_export_format();
  ::std::string* release_ipv4_flows_export_format();
  void set_allocated_ipv4_flows_export_format(::std::string* ipv4_flows_export_format);

  // optional string ipv6_flows_export_format = 3;
  bool has_ipv6_flows_export_format() const;
  void clear_ipv6_flows_export_format();
  static const int kIpv6FlowsExportFormatFieldNumber = 3;
  const ::std::string& ipv6_flows_export_format() const;
  void set_ipv6_flows_export_format(const ::std::string& value);
  void set_ipv6_flows_export_format(const char* value);
  void set_ipv6_flows_export_format(const char* value, size_t size);
  ::std::string* mutable_ipv6_flows_export_format();
  ::std::string* release_ipv6_flows_export_format();
  void set_allocated_ipv6_flows_export_format(::std::string* ipv6_flows_export_format);

  // optional string vpls_flows_export_format = 4;
  bool has_vpls_flows_export_format() const;
  void clear_vpls_flows_export_format();
  static const int kVplsFlowsExportFormatFieldNumber = 4;
  const ::std::string& vpls_flows_export_format() const;
  void set_vpls_flows_export_format(const ::std::string& value);
  void set_vpls_flows_export_format(const char* value);
  void set_vpls_flows_export_format(const char* value, size_t size);
  ::std::string* mutable_vpls_flows_export_format();
  ::std::string* release_vpls_flows_export_format();
  void set_allocated_vpls_flows_export_format(::std::string* vpls_flows_export_format);

  // optional string mpls_flows_export_format = 5;
  bool has_mpls_flows_export_format() const;
  void clear_mpls_flows_export_format();
  static const int kMplsFlowsExportFormatFieldNumber = 5;
  const ::std::string& mpls_flows_export_format() const;
  void set_mpls_flows_export_format(const ::std::string& value);
  void set_mpls_flows_export_format(const char* value);
  void set_mpls_flows_export_format(const char* value, size_t size);
  ::std::string* mutable_mpls_flows_export_format();
  ::std::string* release_mpls_flows_export_format();
  void set_allocated_mpls_flows_export_format(::std::string* mpls_flows_export_format);

  // optional uint32 ipv4_route_record_cnt = 6;
  bool has_ipv4_route_record_cnt() const;
  void clear_ipv4_route_record_cnt();
  static const int kIpv4RouteRecordCntFieldNumber = 6;
  ::google::protobuf::uint32 ipv4_route_record_cnt() const;
  void set_ipv4_route_record_cnt(::google::protobuf::uint32 value);

  // optional uint32 ipv6_route_record_cnt = 7;
  bool has_ipv6_route_record_cnt() const;
  void clear_ipv6_route_record_cnt();
  static const int kIpv6RouteRecordCntFieldNumber = 7;
  ::google::protobuf::uint32 ipv6_route_record_cnt() const;
  void set_ipv6_route_record_cnt(::google::protobuf::uint32 value);

  // optional uint32 mpls_route_record_cnt = 8;
  bool has_mpls_route_record_cnt() const;
  void clear_mpls_route_record_cnt();
  static const int kMplsRouteRecordCntFieldNumber = 8;
  ::google::protobuf::uint32 mpls_route_record_cnt() const;
  void set_mpls_route_record_cnt(::google::protobuf::uint32 value);

  // optional uint32 autonomous_system_record_cnt = 9;
  bool has_autonomous_system_record_cnt() const;
  void clear_autonomous_system_record_cnt();
  static const int kAutonomousSystemRecordCntFieldNumber = 9;
  ::google::protobuf::uint32 autonomous_system_record_cnt() const;
  void set_autonomous_system_record_cnt(::google::protobuf::uint32 value);

  // optional uint64 ipv4_max_flows_count = 10;
  bool has_ipv4_max_flows_count() const;
  void clear_ipv4_max_flows_count();
  static const int kIpv4MaxFlowsCountFieldNumber = 10;
  ::google::protobuf::uint64 ipv4_max_flows_count() const;
  void set_ipv4_max_flows_count(::google::protobuf::uint64 value);

  // optional uint64 ipv6_max_flows_count = 11;
  bool has_ipv6_max_flows_count() const;
  void clear_ipv6_max_flows_count();
  static const int kIpv6MaxFlowsCountFieldNumber = 11;
  ::google::protobuf::uint64 ipv6_max_flows_count() const;
  void set_ipv6_max_flows_count(::google::protobuf::uint64 value);

  // optional uint64 vpls_max_flows_count = 12;
  bool has_vpls_max_flows_count() const;
  void clear_vpls_max_flows_count();
  static const int kVplsMaxFlowsCountFieldNumber = 12;
  ::google::protobuf::uint64 vpls_max_flows_count() const;
  void set_vpls_max_flows_count(::google::protobuf::uint64 value);

  // optional uint64 mpls_max_flows_count = 13;
  bool has_mpls_max_flows_count() const;
  void clear_mpls_max_flows_count();
  static const int kMplsMaxFlowsCountFieldNumber = 13;
  ::google::protobuf::uint64 mpls_max_flows_count() const;
  void set_mpls_max_flows_count(::google::protobuf::uint64 value);

  // optional uint32 memory_alloc_fail_cnt = 14;
  bool has_memory_alloc_fail_cnt() const;
  void clear_memory_alloc_fail_cnt();
  static const int kMemoryAllocFailCntFieldNumber = 14;
  ::google::protobuf::uint32 memory_alloc_fail_cnt() const;
  void set_memory_alloc_fail_cnt(::google::protobuf::uint32 value);

  // optional uint32 ipv4_configured_observation_domain_id = 15;
  bool has_ipv4_configured_observation_domain_id() const;
  void clear_ipv4_configured_observation_domain_id();
  static const int kIpv4ConfiguredObservationDomainIdFieldNumber = 15;
  ::google::protobuf::uint32 ipv4_configured_observation_domain_id() const;
  void set_ipv4_configured_observation_domain_id(::google::protobuf::uint32 value);

  // optional uint32 ipv6_configured_observation_domain_id = 16;
  bool has_ipv6_configured_observation_domain_id() const;
  void clear_ipv6_configured_observation_domain_id();
  static const int kIpv6ConfiguredObservationDomainIdFieldNumber = 16;
  ::google::protobuf::uint32 ipv6_configured_observation_domain_id() const;
  void set_ipv6_configured_observation_domain_id(::google::protobuf::uint32 value);

  // optional uint32 vpls_configured_observation_domain_id = 17;
  bool has_vpls_configured_observation_domain_id() const;
  void clear_vpls_configured_observation_domain_id();
  static const int kVplsConfiguredObservationDomainIdFieldNumber = 17;
  ::google::protobuf::uint32 vpls_configured_observation_domain_id() const;
  void set_vpls_configured_observation_domain_id(::google::protobuf::uint32 value);

  // optional uint32 mpls_configured_observation_domain_id = 18;
  bool has_mpls_configured_observation_domain_id() const;
  void clear_mpls_configured_observation_domain_id();
  static const int kMplsConfiguredObservationDomainIdFieldNumber = 18;
  ::google::protobuf::uint32 mpls_configured_observation_domain_id() const;
  void set_mpls_configured_observation_domain_id(::google::protobuf::uint32 value);

  // optional uint32 last_clear_timestamp = 19;
  bool has_last_clear_timestamp() const;
  void clear_last_clear_timestamp();
  static const int kLastClearTimestampFieldNumber = 19;
  ::google::protobuf::uint32 last_clear_timestamp() const;
  void set_last_clear_timestamp(::google::protobuf::uint32 value);

  // optional bool ipv6_extended_attribute = 20;
  bool has_ipv6_extended_attribute() const;
  void clear_ipv6_extended_attribute();
  static const int kIpv6ExtendedAttributeFieldNumber = 20;
  bool ipv6_extended_attribute() const;
  void set_ipv6_extended_attribute(bool value);

  // optional bool flexible_flow_sizing = 21;
  bool has_flexible_flow_sizing() const;
  void clear_flexible_flow_sizing();
  static const int kFlexibleFlowSizingFieldNumber = 21;
  bool flexible_flow_sizing() const;
  void set_flexible_flow_sizing(bool value);

  // optional bool use_extended_flow_memory = 22;
  bool has_use_extended_flow_memory() const;
  void clear_use_extended_flow_memory();
  static const int kUseExtendedFlowMemoryFieldNumber = 22;
  bool use_extended_flow_memory() const;
  void set_use_extended_flow_memory(bool value);

  // repeated .InlineJflowNpuStats npu_stats = 50;
  int npu_stats_size() const;
  void clear_npu_stats();
  static const int kNpuStatsFieldNumber = 50;
  const ::InlineJflowNpuStats& npu_stats(int index) const;
  ::InlineJflowNpuStats* mutable_npu_stats(int index);
  ::InlineJflowNpuStats* add_npu_stats();
  ::google::protobuf::RepeatedPtrField< ::InlineJflowNpuStats >*
      mutable_npu_stats();
  const ::google::protobuf::RepeatedPtrField< ::InlineJflowNpuStats >&
      npu_stats() const;

  // @@protoc_insertion_point(class_scope:InlineJflow)
 private:
  inline void set_has_ipv4_flows_export_format();
  inline void clear_has_ipv4_flows_export_format();
  inline void set_has_ipv6_flows_export_format();
  inline void clear_has_ipv6_flows_export_format();
  inline void set_has_vpls_flows_export_format();
  inline void clear_has_vpls_flows_export_format();
  inline void set_has_mpls_flows_export_format();
  inline void clear_has_mpls_flows_export_format();
  inline void set_has_ipv4_route_record_cnt();
  inline void clear_has_ipv4_route_record_cnt();
  inline void set_has_ipv6_route_record_cnt();
  inline void clear_has_ipv6_route_record_cnt();
  inline void set_has_mpls_route_record_cnt();
  inline void clear_has_mpls_route_record_cnt();
  inline void set_has_autonomous_system_record_cnt();
  inline void clear_has_autonomous_system_record_cnt();
  inline void set_has_ipv4_max_flows_count();
  inline void clear_has_ipv4_max_flows_count();
  inline void set_has_ipv6_max_flows_count();
  inline void clear_has_ipv6_max_flows_count();
  inline void set_has_vpls_max_flows_count();
  inline void clear_has_vpls_max_flows_count();
  inline void set_has_mpls_max_flows_count();
  inline void clear_has_mpls_max_flows_count();
  inline void set_has_memory_alloc_fail_cnt();
  inline void clear_has_memory_alloc_fail_cnt();
  inline void set_has_ipv4_configured_observation_domain_id();
  inline void clear_has_ipv4_configured_observation_domain_id();
  inline void set_has_ipv6_configured_observation_domain_id();
  inline void clear_has_ipv6_configured_observation_domain_id();
  inline void set_has_vpls_configured_observation_domain_id();
  inline void clear_has_vpls_configured_observation_domain_id();
  inline void set_has_mpls_configured_observation_domain_id();
  inline void clear_has_mpls_configured_observation_domain_id();
  inline void set_has_last_clear_timestamp();
  inline void clear_has_last_clear_timestamp();
  inline void set_has_ipv6_extended_attribute();
  inline void clear_has_ipv6_extended_attribute();
  inline void set_has_flexible_flow_sizing();
  inline void clear_has_flexible_flow_sizing();
  inline void set_has_use_extended_flow_memory();
  inline void clear_has_use_extended_flow_memory();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ipv4_flows_export_format_;
  ::google::protobuf::internal::ArenaStringPtr ipv6_flows_export_format_;
  ::google::protobuf::internal::ArenaStringPtr vpls_flows_export_format_;
  ::google::protobuf::internal::ArenaStringPtr mpls_flows_export_format_;
  ::google::protobuf::uint32 ipv4_route_record_cnt_;
  ::google::protobuf::uint32 ipv6_route_record_cnt_;
  ::google::protobuf::uint32 mpls_route_record_cnt_;
  ::google::protobuf::uint32 autonomous_system_record_cnt_;
  ::google::protobuf::uint64 ipv4_max_flows_count_;
  ::google::protobuf::uint64 ipv6_max_flows_count_;
  ::google::protobuf::uint64 vpls_max_flows_count_;
  ::google::protobuf::uint64 mpls_max_flows_count_;
  ::google::protobuf::uint32 memory_alloc_fail_cnt_;
  ::google::protobuf::uint32 ipv4_configured_observation_domain_id_;
  ::google::protobuf::uint32 ipv6_configured_observation_domain_id_;
  ::google::protobuf::uint32 vpls_configured_observation_domain_id_;
  ::google::protobuf::uint32 mpls_configured_observation_domain_id_;
  ::google::protobuf::uint32 last_clear_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::InlineJflowNpuStats > npu_stats_;
  bool ipv6_extended_attribute_;
  bool flexible_flow_sizing_;
  bool use_extended_flow_memory_;
  friend void  protobuf_AddDesc_inline_5fjflow_2eproto();
  friend void protobuf_AssignDesc_inline_5fjflow_2eproto();
  friend void protobuf_ShutdownFile_inline_5fjflow_2eproto();

  void InitAsDefaultInstance();
  static InlineJflow* default_instance_;
};
// -------------------------------------------------------------------

class InlineJflowNpuStats : public ::google::protobuf::Message {
 public:
  InlineJflowNpuStats();
  virtual ~InlineJflowNpuStats();

  InlineJflowNpuStats(const InlineJflowNpuStats& from);

  inline InlineJflowNpuStats& operator=(const InlineJflowNpuStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InlineJflowNpuStats& default_instance();

  void Swap(InlineJflowNpuStats* other);

  // implements Message ----------------------------------------------

  inline InlineJflowNpuStats* New() const { return New(NULL); }

  InlineJflowNpuStats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InlineJflowNpuStats& from);
  void MergeFrom(const InlineJflowNpuStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InlineJflowNpuStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 npu_identifier = 1;
  bool has_npu_identifier() const;
  void clear_npu_identifier();
  static const int kNpuIdentifierFieldNumber = 1;
  ::google::protobuf::uint32 npu_identifier() const;
  void set_npu_identifier(::google::protobuf::uint32 value);

  // optional uint64 ipv4_flow_packets = 51;
  bool has_ipv4_flow_packets() const;
  void clear_ipv4_flow_packets();
  static const int kIpv4FlowPacketsFieldNumber = 51;
  ::google::protobuf::uint64 ipv4_flow_packets() const;
  void set_ipv4_flow_packets(::google::protobuf::uint64 value);

  // optional uint64 ipv4_flow_bytes = 52;
  bool has_ipv4_flow_bytes() const;
  void clear_ipv4_flow_bytes();
  static const int kIpv4FlowBytesFieldNumber = 52;
  ::google::protobuf::uint64 ipv4_flow_bytes() const;
  void set_ipv4_flow_bytes(::google::protobuf::uint64 value);

  // optional uint64 ipv4_total_flows = 53;
  bool has_ipv4_total_flows() const;
  void clear_ipv4_total_flows();
  static const int kIpv4TotalFlowsFieldNumber = 53;
  ::google::protobuf::uint64 ipv4_total_flows() const;
  void set_ipv4_total_flows(::google::protobuf::uint64 value);

  // optional uint64 ipv4_active_flows = 54;
  bool has_ipv4_active_flows() const;
  void clear_ipv4_active_flows();
  static const int kIpv4ActiveFlowsFieldNumber = 54;
  ::google::protobuf::uint64 ipv4_active_flows() const;
  void set_ipv4_active_flows(::google::protobuf::uint64 value);

  // optional uint64 ipv4_flows_exported = 55;
  bool has_ipv4_flows_exported() const;
  void clear_ipv4_flows_exported();
  static const int kIpv4FlowsExportedFieldNumber = 55;
  ::google::protobuf::uint64 ipv4_flows_exported() const;
  void set_ipv4_flows_exported(::google::protobuf::uint64 value);

  // optional uint64 ipv4_packets_exported = 56;
  bool has_ipv4_packets_exported() const;
  void clear_ipv4_packets_exported();
  static const int kIpv4PacketsExportedFieldNumber = 56;
  ::google::protobuf::uint64 ipv4_packets_exported() const;
  void set_ipv4_packets_exported(::google::protobuf::uint64 value);

  // optional uint64 ipv4_flows_inactive_timed_out = 57;
  bool has_ipv4_flows_inactive_timed_out() const;
  void clear_ipv4_flows_inactive_timed_out();
  static const int kIpv4FlowsInactiveTimedOutFieldNumber = 57;
  ::google::protobuf::uint64 ipv4_flows_inactive_timed_out() const;
  void set_ipv4_flows_inactive_timed_out(::google::protobuf::uint64 value);

  // optional uint64 ipv4_flows_active_timed_out = 58;
  bool has_ipv4_flows_active_timed_out() const;
  void clear_ipv4_flows_active_timed_out();
  static const int kIpv4FlowsActiveTimedOutFieldNumber = 58;
  ::google::protobuf::uint64 ipv4_flows_active_timed_out() const;
  void set_ipv4_flows_active_timed_out(::google::protobuf::uint64 value);

  // optional uint64 ipv4_flow_create_failure = 59;
  bool has_ipv4_flow_create_failure() const;
  void clear_ipv4_flow_create_failure();
  static const int kIpv4FlowCreateFailureFieldNumber = 59;
  ::google::protobuf::uint64 ipv4_flow_create_failure() const;
  void set_ipv4_flow_create_failure(::google::protobuf::uint64 value);

  // optional uint64 ipv4_route_lookup_failure = 60;
  bool has_ipv4_route_lookup_failure() const;
  void clear_ipv4_route_lookup_failure();
  static const int kIpv4RouteLookupFailureFieldNumber = 60;
  ::google::protobuf::uint64 ipv4_route_lookup_failure() const;
  void set_ipv4_route_lookup_failure(::google::protobuf::uint64 value);

  // optional uint64 ipv4_autonomous_system_lookup_failure = 61;
  bool has_ipv4_autonomous_system_lookup_failure() const;
  void clear_ipv4_autonomous_system_lookup_failure();
  static const int kIpv4AutonomousSystemLookupFailureFieldNumber = 61;
  ::google::protobuf::uint64 ipv4_autonomous_system_lookup_failure() const;
  void set_ipv4_autonomous_system_lookup_failure(::google::protobuf::uint64 value);

  // optional uint64 ipv4_flow_packet_export_failure = 62;
  bool has_ipv4_flow_packet_export_failure() const;
  void clear_ipv4_flow_packet_export_failure();
  static const int kIpv4FlowPacketExportFailureFieldNumber = 62;
  ::google::protobuf::uint64 ipv4_flow_packet_export_failure() const;
  void set_ipv4_flow_packet_export_failure(::google::protobuf::uint64 value);

  // optional float ipv4_flow_table_utilization = 63;
  bool has_ipv4_flow_table_utilization() const;
  void clear_ipv4_flow_table_utilization();
  static const int kIpv4FlowTableUtilizationFieldNumber = 63;
  float ipv4_flow_table_utilization() const;
  void set_ipv4_flow_table_utilization(float value);

  // optional uint64 ipv4_flow_insert_count = 64;
  bool has_ipv4_flow_insert_count() const;
  void clear_ipv4_flow_insert_count();
  static const int kIpv4FlowInsertCountFieldNumber = 64;
  ::google::protobuf::uint64 ipv4_flow_insert_count() const;
  void set_ipv4_flow_insert_count(::google::protobuf::uint64 value);

  // optional uint64 ipv6_flow_packets = 101;
  bool has_ipv6_flow_packets() const;
  void clear_ipv6_flow_packets();
  static const int kIpv6FlowPacketsFieldNumber = 101;
  ::google::protobuf::uint64 ipv6_flow_packets() const;
  void set_ipv6_flow_packets(::google::protobuf::uint64 value);

  // optional uint64 ipv6_flow_bytes = 102;
  bool has_ipv6_flow_bytes() const;
  void clear_ipv6_flow_bytes();
  static const int kIpv6FlowBytesFieldNumber = 102;
  ::google::protobuf::uint64 ipv6_flow_bytes() const;
  void set_ipv6_flow_bytes(::google::protobuf::uint64 value);

  // optional uint64 ipv6_total_flows = 103;
  bool has_ipv6_total_flows() const;
  void clear_ipv6_total_flows();
  static const int kIpv6TotalFlowsFieldNumber = 103;
  ::google::protobuf::uint64 ipv6_total_flows() const;
  void set_ipv6_total_flows(::google::protobuf::uint64 value);

  // optional uint64 ipv6_active_flows = 104;
  bool has_ipv6_active_flows() const;
  void clear_ipv6_active_flows();
  static const int kIpv6ActiveFlowsFieldNumber = 104;
  ::google::protobuf::uint64 ipv6_active_flows() const;
  void set_ipv6_active_flows(::google::protobuf::uint64 value);

  // optional uint64 ipv6_flows_exported = 105;
  bool has_ipv6_flows_exported() const;
  void clear_ipv6_flows_exported();
  static const int kIpv6FlowsExportedFieldNumber = 105;
  ::google::protobuf::uint64 ipv6_flows_exported() const;
  void set_ipv6_flows_exported(::google::protobuf::uint64 value);

  // optional uint64 ipv6_packets_exported = 106;
  bool has_ipv6_packets_exported() const;
  void clear_ipv6_packets_exported();
  static const int kIpv6PacketsExportedFieldNumber = 106;
  ::google::protobuf::uint64 ipv6_packets_exported() const;
  void set_ipv6_packets_exported(::google::protobuf::uint64 value);

  // optional uint64 ipv6_flows_inactive_timed_out = 107;
  bool has_ipv6_flows_inactive_timed_out() const;
  void clear_ipv6_flows_inactive_timed_out();
  static const int kIpv6FlowsInactiveTimedOutFieldNumber = 107;
  ::google::protobuf::uint64 ipv6_flows_inactive_timed_out() const;
  void set_ipv6_flows_inactive_timed_out(::google::protobuf::uint64 value);

  // optional uint64 ipv6_flows_active_timed_out = 108;
  bool has_ipv6_flows_active_timed_out() const;
  void clear_ipv6_flows_active_timed_out();
  static const int kIpv6FlowsActiveTimedOutFieldNumber = 108;
  ::google::protobuf::uint64 ipv6_flows_active_timed_out() const;
  void set_ipv6_flows_active_timed_out(::google::protobuf::uint64 value);

  // optional uint64 ipv6_flow_create_failure = 109;
  bool has_ipv6_flow_create_failure() const;
  void clear_ipv6_flow_create_failure();
  static const int kIpv6FlowCreateFailureFieldNumber = 109;
  ::google::protobuf::uint64 ipv6_flow_create_failure() const;
  void set_ipv6_flow_create_failure(::google::protobuf::uint64 value);

  // optional uint64 ipv6_route_lookup_failure = 110;
  bool has_ipv6_route_lookup_failure() const;
  void clear_ipv6_route_lookup_failure();
  static const int kIpv6RouteLookupFailureFieldNumber = 110;
  ::google::protobuf::uint64 ipv6_route_lookup_failure() const;
  void set_ipv6_route_lookup_failure(::google::protobuf::uint64 value);

  // optional uint64 ipv6_autonomous_system_lookup_failure = 111;
  bool has_ipv6_autonomous_system_lookup_failure() const;
  void clear_ipv6_autonomous_system_lookup_failure();
  static const int kIpv6AutonomousSystemLookupFailureFieldNumber = 111;
  ::google::protobuf::uint64 ipv6_autonomous_system_lookup_failure() const;
  void set_ipv6_autonomous_system_lookup_failure(::google::protobuf::uint64 value);

  // optional uint64 ipv6_flow_packet_export_failure = 112;
  bool has_ipv6_flow_packet_export_failure() const;
  void clear_ipv6_flow_packet_export_failure();
  static const int kIpv6FlowPacketExportFailureFieldNumber = 112;
  ::google::protobuf::uint64 ipv6_flow_packet_export_failure() const;
  void set_ipv6_flow_packet_export_failure(::google::protobuf::uint64 value);

  // optional float ipv6_flow_table_utilization = 113;
  bool has_ipv6_flow_table_utilization() const;
  void clear_ipv6_flow_table_utilization();
  static const int kIpv6FlowTableUtilizationFieldNumber = 113;
  float ipv6_flow_table_utilization() const;
  void set_ipv6_flow_table_utilization(float value);

  // optional uint64 ipv6_flow_insert_count = 114;
  bool has_ipv6_flow_insert_count() const;
  void clear_ipv6_flow_insert_count();
  static const int kIpv6FlowInsertCountFieldNumber = 114;
  ::google::protobuf::uint64 ipv6_flow_insert_count() const;
  void set_ipv6_flow_insert_count(::google::protobuf::uint64 value);

  // optional uint64 vpls_flow_packets = 151;
  bool has_vpls_flow_packets() const;
  void clear_vpls_flow_packets();
  static const int kVplsFlowPacketsFieldNumber = 151;
  ::google::protobuf::uint64 vpls_flow_packets() const;
  void set_vpls_flow_packets(::google::protobuf::uint64 value);

  // optional uint64 vpls_flow_bytes = 152;
  bool has_vpls_flow_bytes() const;
  void clear_vpls_flow_bytes();
  static const int kVplsFlowBytesFieldNumber = 152;
  ::google::protobuf::uint64 vpls_flow_bytes() const;
  void set_vpls_flow_bytes(::google::protobuf::uint64 value);

  // optional uint64 vpls_total_flows = 153;
  bool has_vpls_total_flows() const;
  void clear_vpls_total_flows();
  static const int kVplsTotalFlowsFieldNumber = 153;
  ::google::protobuf::uint64 vpls_total_flows() const;
  void set_vpls_total_flows(::google::protobuf::uint64 value);

  // optional uint64 vpls_active_flows = 154;
  bool has_vpls_active_flows() const;
  void clear_vpls_active_flows();
  static const int kVplsActiveFlowsFieldNumber = 154;
  ::google::protobuf::uint64 vpls_active_flows() const;
  void set_vpls_active_flows(::google::protobuf::uint64 value);

  // optional uint64 vpls_flows_exported = 155;
  bool has_vpls_flows_exported() const;
  void clear_vpls_flows_exported();
  static const int kVplsFlowsExportedFieldNumber = 155;
  ::google::protobuf::uint64 vpls_flows_exported() const;
  void set_vpls_flows_exported(::google::protobuf::uint64 value);

  // optional uint64 vpls_packets_exported = 156;
  bool has_vpls_packets_exported() const;
  void clear_vpls_packets_exported();
  static const int kVplsPacketsExportedFieldNumber = 156;
  ::google::protobuf::uint64 vpls_packets_exported() const;
  void set_vpls_packets_exported(::google::protobuf::uint64 value);

  // optional uint64 vpls_flows_inactive_timed_out = 157;
  bool has_vpls_flows_inactive_timed_out() const;
  void clear_vpls_flows_inactive_timed_out();
  static const int kVplsFlowsInactiveTimedOutFieldNumber = 157;
  ::google::protobuf::uint64 vpls_flows_inactive_timed_out() const;
  void set_vpls_flows_inactive_timed_out(::google::protobuf::uint64 value);

  // optional uint64 vpls_flows_active_timed_out = 158;
  bool has_vpls_flows_active_timed_out() const;
  void clear_vpls_flows_active_timed_out();
  static const int kVplsFlowsActiveTimedOutFieldNumber = 158;
  ::google::protobuf::uint64 vpls_flows_active_timed_out() const;
  void set_vpls_flows_active_timed_out(::google::protobuf::uint64 value);

  // optional uint64 vpls_flow_create_failure = 159;
  bool has_vpls_flow_create_failure() const;
  void clear_vpls_flow_create_failure();
  static const int kVplsFlowCreateFailureFieldNumber = 159;
  ::google::protobuf::uint64 vpls_flow_create_failure() const;
  void set_vpls_flow_create_failure(::google::protobuf::uint64 value);

  // optional uint64 vpls_route_lookup_failure = 160;
  bool has_vpls_route_lookup_failure() const;
  void clear_vpls_route_lookup_failure();
  static const int kVplsRouteLookupFailureFieldNumber = 160;
  ::google::protobuf::uint64 vpls_route_lookup_failure() const;
  void set_vpls_route_lookup_failure(::google::protobuf::uint64 value);

  // optional uint64 vpls_autonomous_system_lookup_failure = 161;
  bool has_vpls_autonomous_system_lookup_failure() const;
  void clear_vpls_autonomous_system_lookup_failure();
  static const int kVplsAutonomousSystemLookupFailureFieldNumber = 161;
  ::google::protobuf::uint64 vpls_autonomous_system_lookup_failure() const;
  void set_vpls_autonomous_system_lookup_failure(::google::protobuf::uint64 value);

  // optional uint64 vpls_flow_packet_export_failure = 162;
  bool has_vpls_flow_packet_export_failure() const;
  void clear_vpls_flow_packet_export_failure();
  static const int kVplsFlowPacketExportFailureFieldNumber = 162;
  ::google::protobuf::uint64 vpls_flow_packet_export_failure() const;
  void set_vpls_flow_packet_export_failure(::google::protobuf::uint64 value);

  // optional float vpls_flow_table_utilization = 163;
  bool has_vpls_flow_table_utilization() const;
  void clear_vpls_flow_table_utilization();
  static const int kVplsFlowTableUtilizationFieldNumber = 163;
  float vpls_flow_table_utilization() const;
  void set_vpls_flow_table_utilization(float value);

  // optional uint64 vpls_flow_insert_count = 164;
  bool has_vpls_flow_insert_count() const;
  void clear_vpls_flow_insert_count();
  static const int kVplsFlowInsertCountFieldNumber = 164;
  ::google::protobuf::uint64 vpls_flow_insert_count() const;
  void set_vpls_flow_insert_count(::google::protobuf::uint64 value);

  // optional uint64 mpls_flow_packets = 201;
  bool has_mpls_flow_packets() const;
  void clear_mpls_flow_packets();
  static const int kMplsFlowPacketsFieldNumber = 201;
  ::google::protobuf::uint64 mpls_flow_packets() const;
  void set_mpls_flow_packets(::google::protobuf::uint64 value);

  // optional uint64 mpls_flow_bytes = 202;
  bool has_mpls_flow_bytes() const;
  void clear_mpls_flow_bytes();
  static const int kMplsFlowBytesFieldNumber = 202;
  ::google::protobuf::uint64 mpls_flow_bytes() const;
  void set_mpls_flow_bytes(::google::protobuf::uint64 value);

  // optional uint64 mpls_total_flows = 203;
  bool has_mpls_total_flows() const;
  void clear_mpls_total_flows();
  static const int kMplsTotalFlowsFieldNumber = 203;
  ::google::protobuf::uint64 mpls_total_flows() const;
  void set_mpls_total_flows(::google::protobuf::uint64 value);

  // optional uint64 mpls_active_flows = 204;
  bool has_mpls_active_flows() const;
  void clear_mpls_active_flows();
  static const int kMplsActiveFlowsFieldNumber = 204;
  ::google::protobuf::uint64 mpls_active_flows() const;
  void set_mpls_active_flows(::google::protobuf::uint64 value);

  // optional uint64 mpls_flows_exported = 205;
  bool has_mpls_flows_exported() const;
  void clear_mpls_flows_exported();
  static const int kMplsFlowsExportedFieldNumber = 205;
  ::google::protobuf::uint64 mpls_flows_exported() const;
  void set_mpls_flows_exported(::google::protobuf::uint64 value);

  // optional uint64 mpls_packets_exported = 206;
  bool has_mpls_packets_exported() const;
  void clear_mpls_packets_exported();
  static const int kMplsPacketsExportedFieldNumber = 206;
  ::google::protobuf::uint64 mpls_packets_exported() const;
  void set_mpls_packets_exported(::google::protobuf::uint64 value);

  // optional uint64 mpls_flows_inactive_timed_out = 207;
  bool has_mpls_flows_inactive_timed_out() const;
  void clear_mpls_flows_inactive_timed_out();
  static const int kMplsFlowsInactiveTimedOutFieldNumber = 207;
  ::google::protobuf::uint64 mpls_flows_inactive_timed_out() const;
  void set_mpls_flows_inactive_timed_out(::google::protobuf::uint64 value);

  // optional uint64 mpls_flows_active_timed_out = 208;
  bool has_mpls_flows_active_timed_out() const;
  void clear_mpls_flows_active_timed_out();
  static const int kMplsFlowsActiveTimedOutFieldNumber = 208;
  ::google::protobuf::uint64 mpls_flows_active_timed_out() const;
  void set_mpls_flows_active_timed_out(::google::protobuf::uint64 value);

  // optional uint64 mpls_flow_create_failure = 209;
  bool has_mpls_flow_create_failure() const;
  void clear_mpls_flow_create_failure();
  static const int kMplsFlowCreateFailureFieldNumber = 209;
  ::google::protobuf::uint64 mpls_flow_create_failure() const;
  void set_mpls_flow_create_failure(::google::protobuf::uint64 value);

  // optional uint64 mpls_route_lookup_failure = 210;
  bool has_mpls_route_lookup_failure() const;
  void clear_mpls_route_lookup_failure();
  static const int kMplsRouteLookupFailureFieldNumber = 210;
  ::google::protobuf::uint64 mpls_route_lookup_failure() const;
  void set_mpls_route_lookup_failure(::google::protobuf::uint64 value);

  // optional uint64 mpls_autonomous_system_lookup_failure = 211;
  bool has_mpls_autonomous_system_lookup_failure() const;
  void clear_mpls_autonomous_system_lookup_failure();
  static const int kMplsAutonomousSystemLookupFailureFieldNumber = 211;
  ::google::protobuf::uint64 mpls_autonomous_system_lookup_failure() const;
  void set_mpls_autonomous_system_lookup_failure(::google::protobuf::uint64 value);

  // optional uint64 mpls_flow_packet_export_failure = 212;
  bool has_mpls_flow_packet_export_failure() const;
  void clear_mpls_flow_packet_export_failure();
  static const int kMplsFlowPacketExportFailureFieldNumber = 212;
  ::google::protobuf::uint64 mpls_flow_packet_export_failure() const;
  void set_mpls_flow_packet_export_failure(::google::protobuf::uint64 value);

  // optional float mpls_flow_table_utilization = 213;
  bool has_mpls_flow_table_utilization() const;
  void clear_mpls_flow_table_utilization();
  static const int kMplsFlowTableUtilizationFieldNumber = 213;
  float mpls_flow_table_utilization() const;
  void set_mpls_flow_table_utilization(float value);

  // optional uint64 mpls_flow_insert_count = 214;
  bool has_mpls_flow_insert_count() const;
  void clear_mpls_flow_insert_count();
  static const int kMplsFlowInsertCountFieldNumber = 214;
  ::google::protobuf::uint64 mpls_flow_insert_count() const;
  void set_mpls_flow_insert_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:InlineJflowNpuStats)
 private:
  inline void set_has_npu_identifier();
  inline void clear_has_npu_identifier();
  inline void set_has_ipv4_flow_packets();
  inline void clear_has_ipv4_flow_packets();
  inline void set_has_ipv4_flow_bytes();
  inline void clear_has_ipv4_flow_bytes();
  inline void set_has_ipv4_total_flows();
  inline void clear_has_ipv4_total_flows();
  inline void set_has_ipv4_active_flows();
  inline void clear_has_ipv4_active_flows();
  inline void set_has_ipv4_flows_exported();
  inline void clear_has_ipv4_flows_exported();
  inline void set_has_ipv4_packets_exported();
  inline void clear_has_ipv4_packets_exported();
  inline void set_has_ipv4_flows_inactive_timed_out();
  inline void clear_has_ipv4_flows_inactive_timed_out();
  inline void set_has_ipv4_flows_active_timed_out();
  inline void clear_has_ipv4_flows_active_timed_out();
  inline void set_has_ipv4_flow_create_failure();
  inline void clear_has_ipv4_flow_create_failure();
  inline void set_has_ipv4_route_lookup_failure();
  inline void clear_has_ipv4_route_lookup_failure();
  inline void set_has_ipv4_autonomous_system_lookup_failure();
  inline void clear_has_ipv4_autonomous_system_lookup_failure();
  inline void set_has_ipv4_flow_packet_export_failure();
  inline void clear_has_ipv4_flow_packet_export_failure();
  inline void set_has_ipv4_flow_table_utilization();
  inline void clear_has_ipv4_flow_table_utilization();
  inline void set_has_ipv4_flow_insert_count();
  inline void clear_has_ipv4_flow_insert_count();
  inline void set_has_ipv6_flow_packets();
  inline void clear_has_ipv6_flow_packets();
  inline void set_has_ipv6_flow_bytes();
  inline void clear_has_ipv6_flow_bytes();
  inline void set_has_ipv6_total_flows();
  inline void clear_has_ipv6_total_flows();
  inline void set_has_ipv6_active_flows();
  inline void clear_has_ipv6_active_flows();
  inline void set_has_ipv6_flows_exported();
  inline void clear_has_ipv6_flows_exported();
  inline void set_has_ipv6_packets_exported();
  inline void clear_has_ipv6_packets_exported();
  inline void set_has_ipv6_flows_inactive_timed_out();
  inline void clear_has_ipv6_flows_inactive_timed_out();
  inline void set_has_ipv6_flows_active_timed_out();
  inline void clear_has_ipv6_flows_active_timed_out();
  inline void set_has_ipv6_flow_create_failure();
  inline void clear_has_ipv6_flow_create_failure();
  inline void set_has_ipv6_route_lookup_failure();
  inline void clear_has_ipv6_route_lookup_failure();
  inline void set_has_ipv6_autonomous_system_lookup_failure();
  inline void clear_has_ipv6_autonomous_system_lookup_failure();
  inline void set_has_ipv6_flow_packet_export_failure();
  inline void clear_has_ipv6_flow_packet_export_failure();
  inline void set_has_ipv6_flow_table_utilization();
  inline void clear_has_ipv6_flow_table_utilization();
  inline void set_has_ipv6_flow_insert_count();
  inline void clear_has_ipv6_flow_insert_count();
  inline void set_has_vpls_flow_packets();
  inline void clear_has_vpls_flow_packets();
  inline void set_has_vpls_flow_bytes();
  inline void clear_has_vpls_flow_bytes();
  inline void set_has_vpls_total_flows();
  inline void clear_has_vpls_total_flows();
  inline void set_has_vpls_active_flows();
  inline void clear_has_vpls_active_flows();
  inline void set_has_vpls_flows_exported();
  inline void clear_has_vpls_flows_exported();
  inline void set_has_vpls_packets_exported();
  inline void clear_has_vpls_packets_exported();
  inline void set_has_vpls_flows_inactive_timed_out();
  inline void clear_has_vpls_flows_inactive_timed_out();
  inline void set_has_vpls_flows_active_timed_out();
  inline void clear_has_vpls_flows_active_timed_out();
  inline void set_has_vpls_flow_create_failure();
  inline void clear_has_vpls_flow_create_failure();
  inline void set_has_vpls_route_lookup_failure();
  inline void clear_has_vpls_route_lookup_failure();
  inline void set_has_vpls_autonomous_system_lookup_failure();
  inline void clear_has_vpls_autonomous_system_lookup_failure();
  inline void set_has_vpls_flow_packet_export_failure();
  inline void clear_has_vpls_flow_packet_export_failure();
  inline void set_has_vpls_flow_table_utilization();
  inline void clear_has_vpls_flow_table_utilization();
  inline void set_has_vpls_flow_insert_count();
  inline void clear_has_vpls_flow_insert_count();
  inline void set_has_mpls_flow_packets();
  inline void clear_has_mpls_flow_packets();
  inline void set_has_mpls_flow_bytes();
  inline void clear_has_mpls_flow_bytes();
  inline void set_has_mpls_total_flows();
  inline void clear_has_mpls_total_flows();
  inline void set_has_mpls_active_flows();
  inline void clear_has_mpls_active_flows();
  inline void set_has_mpls_flows_exported();
  inline void clear_has_mpls_flows_exported();
  inline void set_has_mpls_packets_exported();
  inline void clear_has_mpls_packets_exported();
  inline void set_has_mpls_flows_inactive_timed_out();
  inline void clear_has_mpls_flows_inactive_timed_out();
  inline void set_has_mpls_flows_active_timed_out();
  inline void clear_has_mpls_flows_active_timed_out();
  inline void set_has_mpls_flow_create_failure();
  inline void clear_has_mpls_flow_create_failure();
  inline void set_has_mpls_route_lookup_failure();
  inline void clear_has_mpls_route_lookup_failure();
  inline void set_has_mpls_autonomous_system_lookup_failure();
  inline void clear_has_mpls_autonomous_system_lookup_failure();
  inline void set_has_mpls_flow_packet_export_failure();
  inline void clear_has_mpls_flow_packet_export_failure();
  inline void set_has_mpls_flow_table_utilization();
  inline void clear_has_mpls_flow_table_utilization();
  inline void set_has_mpls_flow_insert_count();
  inline void clear_has_mpls_flow_insert_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint64 ipv4_flow_packets_;
  ::google::protobuf::uint64 ipv4_flow_bytes_;
  ::google::protobuf::uint64 ipv4_total_flows_;
  ::google::protobuf::uint64 ipv4_active_flows_;
  ::google::protobuf::uint64 ipv4_flows_exported_;
  ::google::protobuf::uint64 ipv4_packets_exported_;
  ::google::protobuf::uint32 npu_identifier_;
  float ipv4_flow_table_utilization_;
  ::google::protobuf::uint64 ipv4_flows_inactive_timed_out_;
  ::google::protobuf::uint64 ipv4_flows_active_timed_out_;
  ::google::protobuf::uint64 ipv4_flow_create_failure_;
  ::google::protobuf::uint64 ipv4_route_lookup_failure_;
  ::google::protobuf::uint64 ipv4_autonomous_system_lookup_failure_;
  ::google::protobuf::uint64 ipv4_flow_packet_export_failure_;
  ::google::protobuf::uint64 ipv4_flow_insert_count_;
  ::google::protobuf::uint64 ipv6_flow_packets_;
  ::google::protobuf::uint64 ipv6_flow_bytes_;
  ::google::protobuf::uint64 ipv6_total_flows_;
  ::google::protobuf::uint64 ipv6_active_flows_;
  ::google::protobuf::uint64 ipv6_flows_exported_;
  ::google::protobuf::uint64 ipv6_packets_exported_;
  ::google::protobuf::uint64 ipv6_flows_inactive_timed_out_;
  ::google::protobuf::uint64 ipv6_flows_active_timed_out_;
  ::google::protobuf::uint64 ipv6_flow_create_failure_;
  ::google::protobuf::uint64 ipv6_route_lookup_failure_;
  ::google::protobuf::uint64 ipv6_autonomous_system_lookup_failure_;
  ::google::protobuf::uint64 ipv6_flow_packet_export_failure_;
  ::google::protobuf::uint64 ipv6_flow_insert_count_;
  ::google::protobuf::uint64 vpls_flow_packets_;
  ::google::protobuf::uint64 vpls_flow_bytes_;
  ::google::protobuf::uint64 vpls_total_flows_;
  ::google::protobuf::uint64 vpls_active_flows_;
  ::google::protobuf::uint64 vpls_flows_exported_;
  ::google::protobuf::uint64 vpls_packets_exported_;
  float ipv6_flow_table_utilization_;
  float vpls_flow_table_utilization_;
  ::google::protobuf::uint64 vpls_flows_inactive_timed_out_;
  ::google::protobuf::uint64 vpls_flows_active_timed_out_;
  ::google::protobuf::uint64 vpls_flow_create_failure_;
  ::google::protobuf::uint64 vpls_route_lookup_failure_;
  ::google::protobuf::uint64 vpls_autonomous_system_lookup_failure_;
  ::google::protobuf::uint64 vpls_flow_packet_export_failure_;
  ::google::protobuf::uint64 vpls_flow_insert_count_;
  ::google::protobuf::uint64 mpls_flow_packets_;
  ::google::protobuf::uint64 mpls_flow_bytes_;
  ::google::protobuf::uint64 mpls_total_flows_;
  ::google::protobuf::uint64 mpls_active_flows_;
  ::google::protobuf::uint64 mpls_flows_exported_;
  ::google::protobuf::uint64 mpls_packets_exported_;
  ::google::protobuf::uint64 mpls_flows_inactive_timed_out_;
  ::google::protobuf::uint64 mpls_flows_active_timed_out_;
  ::google::protobuf::uint64 mpls_flow_create_failure_;
  ::google::protobuf::uint64 mpls_route_lookup_failure_;
  ::google::protobuf::uint64 mpls_autonomous_system_lookup_failure_;
  ::google::protobuf::uint64 mpls_flow_packet_export_failure_;
  ::google::protobuf::uint64 mpls_flow_insert_count_;
  float mpls_flow_table_utilization_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_inline_5fjflow_2eproto();
  friend void protobuf_AssignDesc_inline_5fjflow_2eproto();
  friend void protobuf_ShutdownFile_inline_5fjflow_2eproto();

  void InitAsDefaultInstance();
  static InlineJflowNpuStats* default_instance_;
};
// ===================================================================

static const int kInlineJflowStatsExtFieldNumber = 9;
extern ::google::protobuf::internal::ExtensionIdentifier< ::JuniperNetworksSensors,
    ::google::protobuf::internal::MessageTypeTraits< ::InlineJflow >, 11, false >
  inline_jflow_stats_ext;

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InlineJflow

// optional string ipv4_flows_export_format = 2;
inline bool InlineJflow::has_ipv4_flows_export_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InlineJflow::set_has_ipv4_flows_export_format() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InlineJflow::clear_has_ipv4_flows_export_format() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InlineJflow::clear_ipv4_flows_export_format() {
  ipv4_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipv4_flows_export_format();
}
inline const ::std::string& InlineJflow::ipv4_flows_export_format() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv4_flows_export_format)
  return ipv4_flows_export_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InlineJflow::set_ipv4_flows_export_format(const ::std::string& value) {
  set_has_ipv4_flows_export_format();
  ipv4_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InlineJflow.ipv4_flows_export_format)
}
inline void InlineJflow::set_ipv4_flows_export_format(const char* value) {
  set_has_ipv4_flows_export_format();
  ipv4_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InlineJflow.ipv4_flows_export_format)
}
inline void InlineJflow::set_ipv4_flows_export_format(const char* value, size_t size) {
  set_has_ipv4_flows_export_format();
  ipv4_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InlineJflow.ipv4_flows_export_format)
}
inline ::std::string* InlineJflow::mutable_ipv4_flows_export_format() {
  set_has_ipv4_flows_export_format();
  // @@protoc_insertion_point(field_mutable:InlineJflow.ipv4_flows_export_format)
  return ipv4_flows_export_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InlineJflow::release_ipv4_flows_export_format() {
  clear_has_ipv4_flows_export_format();
  return ipv4_flows_export_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InlineJflow::set_allocated_ipv4_flows_export_format(::std::string* ipv4_flows_export_format) {
  if (ipv4_flows_export_format != NULL) {
    set_has_ipv4_flows_export_format();
  } else {
    clear_has_ipv4_flows_export_format();
  }
  ipv4_flows_export_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv4_flows_export_format);
  // @@protoc_insertion_point(field_set_allocated:InlineJflow.ipv4_flows_export_format)
}

// optional string ipv6_flows_export_format = 3;
inline bool InlineJflow::has_ipv6_flows_export_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InlineJflow::set_has_ipv6_flows_export_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InlineJflow::clear_has_ipv6_flows_export_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InlineJflow::clear_ipv6_flows_export_format() {
  ipv6_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipv6_flows_export_format();
}
inline const ::std::string& InlineJflow::ipv6_flows_export_format() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv6_flows_export_format)
  return ipv6_flows_export_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InlineJflow::set_ipv6_flows_export_format(const ::std::string& value) {
  set_has_ipv6_flows_export_format();
  ipv6_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InlineJflow.ipv6_flows_export_format)
}
inline void InlineJflow::set_ipv6_flows_export_format(const char* value) {
  set_has_ipv6_flows_export_format();
  ipv6_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InlineJflow.ipv6_flows_export_format)
}
inline void InlineJflow::set_ipv6_flows_export_format(const char* value, size_t size) {
  set_has_ipv6_flows_export_format();
  ipv6_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InlineJflow.ipv6_flows_export_format)
}
inline ::std::string* InlineJflow::mutable_ipv6_flows_export_format() {
  set_has_ipv6_flows_export_format();
  // @@protoc_insertion_point(field_mutable:InlineJflow.ipv6_flows_export_format)
  return ipv6_flows_export_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InlineJflow::release_ipv6_flows_export_format() {
  clear_has_ipv6_flows_export_format();
  return ipv6_flows_export_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InlineJflow::set_allocated_ipv6_flows_export_format(::std::string* ipv6_flows_export_format) {
  if (ipv6_flows_export_format != NULL) {
    set_has_ipv6_flows_export_format();
  } else {
    clear_has_ipv6_flows_export_format();
  }
  ipv6_flows_export_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6_flows_export_format);
  // @@protoc_insertion_point(field_set_allocated:InlineJflow.ipv6_flows_export_format)
}

// optional string vpls_flows_export_format = 4;
inline bool InlineJflow::has_vpls_flows_export_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InlineJflow::set_has_vpls_flows_export_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InlineJflow::clear_has_vpls_flows_export_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InlineJflow::clear_vpls_flows_export_format() {
  vpls_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vpls_flows_export_format();
}
inline const ::std::string& InlineJflow::vpls_flows_export_format() const {
  // @@protoc_insertion_point(field_get:InlineJflow.vpls_flows_export_format)
  return vpls_flows_export_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InlineJflow::set_vpls_flows_export_format(const ::std::string& value) {
  set_has_vpls_flows_export_format();
  vpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InlineJflow.vpls_flows_export_format)
}
inline void InlineJflow::set_vpls_flows_export_format(const char* value) {
  set_has_vpls_flows_export_format();
  vpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InlineJflow.vpls_flows_export_format)
}
inline void InlineJflow::set_vpls_flows_export_format(const char* value, size_t size) {
  set_has_vpls_flows_export_format();
  vpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InlineJflow.vpls_flows_export_format)
}
inline ::std::string* InlineJflow::mutable_vpls_flows_export_format() {
  set_has_vpls_flows_export_format();
  // @@protoc_insertion_point(field_mutable:InlineJflow.vpls_flows_export_format)
  return vpls_flows_export_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InlineJflow::release_vpls_flows_export_format() {
  clear_has_vpls_flows_export_format();
  return vpls_flows_export_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InlineJflow::set_allocated_vpls_flows_export_format(::std::string* vpls_flows_export_format) {
  if (vpls_flows_export_format != NULL) {
    set_has_vpls_flows_export_format();
  } else {
    clear_has_vpls_flows_export_format();
  }
  vpls_flows_export_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vpls_flows_export_format);
  // @@protoc_insertion_point(field_set_allocated:InlineJflow.vpls_flows_export_format)
}

// optional string mpls_flows_export_format = 5;
inline bool InlineJflow::has_mpls_flows_export_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InlineJflow::set_has_mpls_flows_export_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InlineJflow::clear_has_mpls_flows_export_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InlineJflow::clear_mpls_flows_export_format() {
  mpls_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mpls_flows_export_format();
}
inline const ::std::string& InlineJflow::mpls_flows_export_format() const {
  // @@protoc_insertion_point(field_get:InlineJflow.mpls_flows_export_format)
  return mpls_flows_export_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InlineJflow::set_mpls_flows_export_format(const ::std::string& value) {
  set_has_mpls_flows_export_format();
  mpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InlineJflow.mpls_flows_export_format)
}
inline void InlineJflow::set_mpls_flows_export_format(const char* value) {
  set_has_mpls_flows_export_format();
  mpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InlineJflow.mpls_flows_export_format)
}
inline void InlineJflow::set_mpls_flows_export_format(const char* value, size_t size) {
  set_has_mpls_flows_export_format();
  mpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InlineJflow.mpls_flows_export_format)
}
inline ::std::string* InlineJflow::mutable_mpls_flows_export_format() {
  set_has_mpls_flows_export_format();
  // @@protoc_insertion_point(field_mutable:InlineJflow.mpls_flows_export_format)
  return mpls_flows_export_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InlineJflow::release_mpls_flows_export_format() {
  clear_has_mpls_flows_export_format();
  return mpls_flows_export_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InlineJflow::set_allocated_mpls_flows_export_format(::std::string* mpls_flows_export_format) {
  if (mpls_flows_export_format != NULL) {
    set_has_mpls_flows_export_format();
  } else {
    clear_has_mpls_flows_export_format();
  }
  mpls_flows_export_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mpls_flows_export_format);
  // @@protoc_insertion_point(field_set_allocated:InlineJflow.mpls_flows_export_format)
}

// optional uint32 ipv4_route_record_cnt = 6;
inline bool InlineJflow::has_ipv4_route_record_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InlineJflow::set_has_ipv4_route_record_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InlineJflow::clear_has_ipv4_route_record_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InlineJflow::clear_ipv4_route_record_cnt() {
  ipv4_route_record_cnt_ = 0u;
  clear_has_ipv4_route_record_cnt();
}
inline ::google::protobuf::uint32 InlineJflow::ipv4_route_record_cnt() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv4_route_record_cnt)
  return ipv4_route_record_cnt_;
}
inline void InlineJflow::set_ipv4_route_record_cnt(::google::protobuf::uint32 value) {
  set_has_ipv4_route_record_cnt();
  ipv4_route_record_cnt_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv4_route_record_cnt)
}

// optional uint32 ipv6_route_record_cnt = 7;
inline bool InlineJflow::has_ipv6_route_record_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InlineJflow::set_has_ipv6_route_record_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InlineJflow::clear_has_ipv6_route_record_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InlineJflow::clear_ipv6_route_record_cnt() {
  ipv6_route_record_cnt_ = 0u;
  clear_has_ipv6_route_record_cnt();
}
inline ::google::protobuf::uint32 InlineJflow::ipv6_route_record_cnt() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv6_route_record_cnt)
  return ipv6_route_record_cnt_;
}
inline void InlineJflow::set_ipv6_route_record_cnt(::google::protobuf::uint32 value) {
  set_has_ipv6_route_record_cnt();
  ipv6_route_record_cnt_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv6_route_record_cnt)
}

// optional uint32 mpls_route_record_cnt = 8;
inline bool InlineJflow::has_mpls_route_record_cnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InlineJflow::set_has_mpls_route_record_cnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InlineJflow::clear_has_mpls_route_record_cnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InlineJflow::clear_mpls_route_record_cnt() {
  mpls_route_record_cnt_ = 0u;
  clear_has_mpls_route_record_cnt();
}
inline ::google::protobuf::uint32 InlineJflow::mpls_route_record_cnt() const {
  // @@protoc_insertion_point(field_get:InlineJflow.mpls_route_record_cnt)
  return mpls_route_record_cnt_;
}
inline void InlineJflow::set_mpls_route_record_cnt(::google::protobuf::uint32 value) {
  set_has_mpls_route_record_cnt();
  mpls_route_record_cnt_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.mpls_route_record_cnt)
}

// optional uint32 autonomous_system_record_cnt = 9;
inline bool InlineJflow::has_autonomous_system_record_cnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InlineJflow::set_has_autonomous_system_record_cnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InlineJflow::clear_has_autonomous_system_record_cnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InlineJflow::clear_autonomous_system_record_cnt() {
  autonomous_system_record_cnt_ = 0u;
  clear_has_autonomous_system_record_cnt();
}
inline ::google::protobuf::uint32 InlineJflow::autonomous_system_record_cnt() const {
  // @@protoc_insertion_point(field_get:InlineJflow.autonomous_system_record_cnt)
  return autonomous_system_record_cnt_;
}
inline void InlineJflow::set_autonomous_system_record_cnt(::google::protobuf::uint32 value) {
  set_has_autonomous_system_record_cnt();
  autonomous_system_record_cnt_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.autonomous_system_record_cnt)
}

// optional uint64 ipv4_max_flows_count = 10;
inline bool InlineJflow::has_ipv4_max_flows_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InlineJflow::set_has_ipv4_max_flows_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InlineJflow::clear_has_ipv4_max_flows_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InlineJflow::clear_ipv4_max_flows_count() {
  ipv4_max_flows_count_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_max_flows_count();
}
inline ::google::protobuf::uint64 InlineJflow::ipv4_max_flows_count() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv4_max_flows_count)
  return ipv4_max_flows_count_;
}
inline void InlineJflow::set_ipv4_max_flows_count(::google::protobuf::uint64 value) {
  set_has_ipv4_max_flows_count();
  ipv4_max_flows_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv4_max_flows_count)
}

// optional uint64 ipv6_max_flows_count = 11;
inline bool InlineJflow::has_ipv6_max_flows_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InlineJflow::set_has_ipv6_max_flows_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void InlineJflow::clear_has_ipv6_max_flows_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void InlineJflow::clear_ipv6_max_flows_count() {
  ipv6_max_flows_count_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_max_flows_count();
}
inline ::google::protobuf::uint64 InlineJflow::ipv6_max_flows_count() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv6_max_flows_count)
  return ipv6_max_flows_count_;
}
inline void InlineJflow::set_ipv6_max_flows_count(::google::protobuf::uint64 value) {
  set_has_ipv6_max_flows_count();
  ipv6_max_flows_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv6_max_flows_count)
}

// optional uint64 vpls_max_flows_count = 12;
inline bool InlineJflow::has_vpls_max_flows_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InlineJflow::set_has_vpls_max_flows_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InlineJflow::clear_has_vpls_max_flows_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InlineJflow::clear_vpls_max_flows_count() {
  vpls_max_flows_count_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_max_flows_count();
}
inline ::google::protobuf::uint64 InlineJflow::vpls_max_flows_count() const {
  // @@protoc_insertion_point(field_get:InlineJflow.vpls_max_flows_count)
  return vpls_max_flows_count_;
}
inline void InlineJflow::set_vpls_max_flows_count(::google::protobuf::uint64 value) {
  set_has_vpls_max_flows_count();
  vpls_max_flows_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.vpls_max_flows_count)
}

// optional uint64 mpls_max_flows_count = 13;
inline bool InlineJflow::has_mpls_max_flows_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InlineJflow::set_has_mpls_max_flows_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InlineJflow::clear_has_mpls_max_flows_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InlineJflow::clear_mpls_max_flows_count() {
  mpls_max_flows_count_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_max_flows_count();
}
inline ::google::protobuf::uint64 InlineJflow::mpls_max_flows_count() const {
  // @@protoc_insertion_point(field_get:InlineJflow.mpls_max_flows_count)
  return mpls_max_flows_count_;
}
inline void InlineJflow::set_mpls_max_flows_count(::google::protobuf::uint64 value) {
  set_has_mpls_max_flows_count();
  mpls_max_flows_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.mpls_max_flows_count)
}

// optional uint32 memory_alloc_fail_cnt = 14;
inline bool InlineJflow::has_memory_alloc_fail_cnt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InlineJflow::set_has_memory_alloc_fail_cnt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void InlineJflow::clear_has_memory_alloc_fail_cnt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void InlineJflow::clear_memory_alloc_fail_cnt() {
  memory_alloc_fail_cnt_ = 0u;
  clear_has_memory_alloc_fail_cnt();
}
inline ::google::protobuf::uint32 InlineJflow::memory_alloc_fail_cnt() const {
  // @@protoc_insertion_point(field_get:InlineJflow.memory_alloc_fail_cnt)
  return memory_alloc_fail_cnt_;
}
inline void InlineJflow::set_memory_alloc_fail_cnt(::google::protobuf::uint32 value) {
  set_has_memory_alloc_fail_cnt();
  memory_alloc_fail_cnt_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.memory_alloc_fail_cnt)
}

// optional uint32 ipv4_configured_observation_domain_id = 15;
inline bool InlineJflow::has_ipv4_configured_observation_domain_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InlineJflow::set_has_ipv4_configured_observation_domain_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void InlineJflow::clear_has_ipv4_configured_observation_domain_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void InlineJflow::clear_ipv4_configured_observation_domain_id() {
  ipv4_configured_observation_domain_id_ = 0u;
  clear_has_ipv4_configured_observation_domain_id();
}
inline ::google::protobuf::uint32 InlineJflow::ipv4_configured_observation_domain_id() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv4_configured_observation_domain_id)
  return ipv4_configured_observation_domain_id_;
}
inline void InlineJflow::set_ipv4_configured_observation_domain_id(::google::protobuf::uint32 value) {
  set_has_ipv4_configured_observation_domain_id();
  ipv4_configured_observation_domain_id_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv4_configured_observation_domain_id)
}

// optional uint32 ipv6_configured_observation_domain_id = 16;
inline bool InlineJflow::has_ipv6_configured_observation_domain_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InlineJflow::set_has_ipv6_configured_observation_domain_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void InlineJflow::clear_has_ipv6_configured_observation_domain_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void InlineJflow::clear_ipv6_configured_observation_domain_id() {
  ipv6_configured_observation_domain_id_ = 0u;
  clear_has_ipv6_configured_observation_domain_id();
}
inline ::google::protobuf::uint32 InlineJflow::ipv6_configured_observation_domain_id() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv6_configured_observation_domain_id)
  return ipv6_configured_observation_domain_id_;
}
inline void InlineJflow::set_ipv6_configured_observation_domain_id(::google::protobuf::uint32 value) {
  set_has_ipv6_configured_observation_domain_id();
  ipv6_configured_observation_domain_id_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv6_configured_observation_domain_id)
}

// optional uint32 vpls_configured_observation_domain_id = 17;
inline bool InlineJflow::has_vpls_configured_observation_domain_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void InlineJflow::set_has_vpls_configured_observation_domain_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void InlineJflow::clear_has_vpls_configured_observation_domain_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void InlineJflow::clear_vpls_configured_observation_domain_id() {
  vpls_configured_observation_domain_id_ = 0u;
  clear_has_vpls_configured_observation_domain_id();
}
inline ::google::protobuf::uint32 InlineJflow::vpls_configured_observation_domain_id() const {
  // @@protoc_insertion_point(field_get:InlineJflow.vpls_configured_observation_domain_id)
  return vpls_configured_observation_domain_id_;
}
inline void InlineJflow::set_vpls_configured_observation_domain_id(::google::protobuf::uint32 value) {
  set_has_vpls_configured_observation_domain_id();
  vpls_configured_observation_domain_id_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.vpls_configured_observation_domain_id)
}

// optional uint32 mpls_configured_observation_domain_id = 18;
inline bool InlineJflow::has_mpls_configured_observation_domain_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void InlineJflow::set_has_mpls_configured_observation_domain_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void InlineJflow::clear_has_mpls_configured_observation_domain_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void InlineJflow::clear_mpls_configured_observation_domain_id() {
  mpls_configured_observation_domain_id_ = 0u;
  clear_has_mpls_configured_observation_domain_id();
}
inline ::google::protobuf::uint32 InlineJflow::mpls_configured_observation_domain_id() const {
  // @@protoc_insertion_point(field_get:InlineJflow.mpls_configured_observation_domain_id)
  return mpls_configured_observation_domain_id_;
}
inline void InlineJflow::set_mpls_configured_observation_domain_id(::google::protobuf::uint32 value) {
  set_has_mpls_configured_observation_domain_id();
  mpls_configured_observation_domain_id_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.mpls_configured_observation_domain_id)
}

// optional uint32 last_clear_timestamp = 19;
inline bool InlineJflow::has_last_clear_timestamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void InlineJflow::set_has_last_clear_timestamp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void InlineJflow::clear_has_last_clear_timestamp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void InlineJflow::clear_last_clear_timestamp() {
  last_clear_timestamp_ = 0u;
  clear_has_last_clear_timestamp();
}
inline ::google::protobuf::uint32 InlineJflow::last_clear_timestamp() const {
  // @@protoc_insertion_point(field_get:InlineJflow.last_clear_timestamp)
  return last_clear_timestamp_;
}
inline void InlineJflow::set_last_clear_timestamp(::google::protobuf::uint32 value) {
  set_has_last_clear_timestamp();
  last_clear_timestamp_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.last_clear_timestamp)
}

// optional bool ipv6_extended_attribute = 20;
inline bool InlineJflow::has_ipv6_extended_attribute() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void InlineJflow::set_has_ipv6_extended_attribute() {
  _has_bits_[0] |= 0x00040000u;
}
inline void InlineJflow::clear_has_ipv6_extended_attribute() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void InlineJflow::clear_ipv6_extended_attribute() {
  ipv6_extended_attribute_ = false;
  clear_has_ipv6_extended_attribute();
}
inline bool InlineJflow::ipv6_extended_attribute() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv6_extended_attribute)
  return ipv6_extended_attribute_;
}
inline void InlineJflow::set_ipv6_extended_attribute(bool value) {
  set_has_ipv6_extended_attribute();
  ipv6_extended_attribute_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv6_extended_attribute)
}

// optional bool flexible_flow_sizing = 21;
inline bool InlineJflow::has_flexible_flow_sizing() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void InlineJflow::set_has_flexible_flow_sizing() {
  _has_bits_[0] |= 0x00080000u;
}
inline void InlineJflow::clear_has_flexible_flow_sizing() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void InlineJflow::clear_flexible_flow_sizing() {
  flexible_flow_sizing_ = false;
  clear_has_flexible_flow_sizing();
}
inline bool InlineJflow::flexible_flow_sizing() const {
  // @@protoc_insertion_point(field_get:InlineJflow.flexible_flow_sizing)
  return flexible_flow_sizing_;
}
inline void InlineJflow::set_flexible_flow_sizing(bool value) {
  set_has_flexible_flow_sizing();
  flexible_flow_sizing_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.flexible_flow_sizing)
}

// optional bool use_extended_flow_memory = 22;
inline bool InlineJflow::has_use_extended_flow_memory() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void InlineJflow::set_has_use_extended_flow_memory() {
  _has_bits_[0] |= 0x00100000u;
}
inline void InlineJflow::clear_has_use_extended_flow_memory() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void InlineJflow::clear_use_extended_flow_memory() {
  use_extended_flow_memory_ = false;
  clear_has_use_extended_flow_memory();
}
inline bool InlineJflow::use_extended_flow_memory() const {
  // @@protoc_insertion_point(field_get:InlineJflow.use_extended_flow_memory)
  return use_extended_flow_memory_;
}
inline void InlineJflow::set_use_extended_flow_memory(bool value) {
  set_has_use_extended_flow_memory();
  use_extended_flow_memory_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.use_extended_flow_memory)
}

// repeated .InlineJflowNpuStats npu_stats = 50;
inline int InlineJflow::npu_stats_size() const {
  return npu_stats_.size();
}
inline void InlineJflow::clear_npu_stats() {
  npu_stats_.Clear();
}
inline const ::InlineJflowNpuStats& InlineJflow::npu_stats(int index) const {
  // @@protoc_insertion_point(field_get:InlineJflow.npu_stats)
  return npu_stats_.Get(index);
}
inline ::InlineJflowNpuStats* InlineJflow::mutable_npu_stats(int index) {
  // @@protoc_insertion_point(field_mutable:InlineJflow.npu_stats)
  return npu_stats_.Mutable(index);
}
inline ::InlineJflowNpuStats* InlineJflow::add_npu_stats() {
  // @@protoc_insertion_point(field_add:InlineJflow.npu_stats)
  return npu_stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::InlineJflowNpuStats >*
InlineJflow::mutable_npu_stats() {
  // @@protoc_insertion_point(field_mutable_list:InlineJflow.npu_stats)
  return &npu_stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::InlineJflowNpuStats >&
InlineJflow::npu_stats() const {
  // @@protoc_insertion_point(field_list:InlineJflow.npu_stats)
  return npu_stats_;
}

// -------------------------------------------------------------------

// InlineJflowNpuStats

// required uint32 npu_identifier = 1;
inline bool InlineJflowNpuStats::has_npu_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InlineJflowNpuStats::set_has_npu_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InlineJflowNpuStats::clear_has_npu_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InlineJflowNpuStats::clear_npu_identifier() {
  npu_identifier_ = 0u;
  clear_has_npu_identifier();
}
inline ::google::protobuf::uint32 InlineJflowNpuStats::npu_identifier() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.npu_identifier)
  return npu_identifier_;
}
inline void InlineJflowNpuStats::set_npu_identifier(::google::protobuf::uint32 value) {
  set_has_npu_identifier();
  npu_identifier_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.npu_identifier)
}

// optional uint64 ipv4_flow_packets = 51;
inline bool InlineJflowNpuStats::has_ipv4_flow_packets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_flow_packets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_flow_packets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InlineJflowNpuStats::clear_ipv4_flow_packets() {
  ipv4_flow_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flow_packets();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flow_packets() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_packets)
  return ipv4_flow_packets_;
}
inline void InlineJflowNpuStats::set_ipv4_flow_packets(::google::protobuf::uint64 value) {
  set_has_ipv4_flow_packets();
  ipv4_flow_packets_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_packets)
}

// optional uint64 ipv4_flow_bytes = 52;
inline bool InlineJflowNpuStats::has_ipv4_flow_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_flow_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_flow_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InlineJflowNpuStats::clear_ipv4_flow_bytes() {
  ipv4_flow_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flow_bytes();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flow_bytes() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_bytes)
  return ipv4_flow_bytes_;
}
inline void InlineJflowNpuStats::set_ipv4_flow_bytes(::google::protobuf::uint64 value) {
  set_has_ipv4_flow_bytes();
  ipv4_flow_bytes_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_bytes)
}

// optional uint64 ipv4_total_flows = 53;
inline bool InlineJflowNpuStats::has_ipv4_total_flows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_total_flows() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_total_flows() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InlineJflowNpuStats::clear_ipv4_total_flows() {
  ipv4_total_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_total_flows();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_total_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_total_flows)
  return ipv4_total_flows_;
}
inline void InlineJflowNpuStats::set_ipv4_total_flows(::google::protobuf::uint64 value) {
  set_has_ipv4_total_flows();
  ipv4_total_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_total_flows)
}

// optional uint64 ipv4_active_flows = 54;
inline bool InlineJflowNpuStats::has_ipv4_active_flows() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_active_flows() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_active_flows() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InlineJflowNpuStats::clear_ipv4_active_flows() {
  ipv4_active_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_active_flows();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_active_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_active_flows)
  return ipv4_active_flows_;
}
inline void InlineJflowNpuStats::set_ipv4_active_flows(::google::protobuf::uint64 value) {
  set_has_ipv4_active_flows();
  ipv4_active_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_active_flows)
}

// optional uint64 ipv4_flows_exported = 55;
inline bool InlineJflowNpuStats::has_ipv4_flows_exported() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_flows_exported() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_flows_exported() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InlineJflowNpuStats::clear_ipv4_flows_exported() {
  ipv4_flows_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flows_exported();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flows_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flows_exported)
  return ipv4_flows_exported_;
}
inline void InlineJflowNpuStats::set_ipv4_flows_exported(::google::protobuf::uint64 value) {
  set_has_ipv4_flows_exported();
  ipv4_flows_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flows_exported)
}

// optional uint64 ipv4_packets_exported = 56;
inline bool InlineJflowNpuStats::has_ipv4_packets_exported() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_packets_exported() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_packets_exported() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InlineJflowNpuStats::clear_ipv4_packets_exported() {
  ipv4_packets_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_packets_exported();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_packets_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_packets_exported)
  return ipv4_packets_exported_;
}
inline void InlineJflowNpuStats::set_ipv4_packets_exported(::google::protobuf::uint64 value) {
  set_has_ipv4_packets_exported();
  ipv4_packets_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_packets_exported)
}

// optional uint64 ipv4_flows_inactive_timed_out = 57;
inline bool InlineJflowNpuStats::has_ipv4_flows_inactive_timed_out() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_flows_inactive_timed_out() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_flows_inactive_timed_out() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InlineJflowNpuStats::clear_ipv4_flows_inactive_timed_out() {
  ipv4_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flows_inactive_timed_out();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flows_inactive_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flows_inactive_timed_out)
  return ipv4_flows_inactive_timed_out_;
}
inline void InlineJflowNpuStats::set_ipv4_flows_inactive_timed_out(::google::protobuf::uint64 value) {
  set_has_ipv4_flows_inactive_timed_out();
  ipv4_flows_inactive_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flows_inactive_timed_out)
}

// optional uint64 ipv4_flows_active_timed_out = 58;
inline bool InlineJflowNpuStats::has_ipv4_flows_active_timed_out() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_flows_active_timed_out() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_flows_active_timed_out() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InlineJflowNpuStats::clear_ipv4_flows_active_timed_out() {
  ipv4_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flows_active_timed_out();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flows_active_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flows_active_timed_out)
  return ipv4_flows_active_timed_out_;
}
inline void InlineJflowNpuStats::set_ipv4_flows_active_timed_out(::google::protobuf::uint64 value) {
  set_has_ipv4_flows_active_timed_out();
  ipv4_flows_active_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flows_active_timed_out)
}

// optional uint64 ipv4_flow_create_failure = 59;
inline bool InlineJflowNpuStats::has_ipv4_flow_create_failure() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_flow_create_failure() {
  _has_bits_[0] |= 0x00000200u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_flow_create_failure() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void InlineJflowNpuStats::clear_ipv4_flow_create_failure() {
  ipv4_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flow_create_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flow_create_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_create_failure)
  return ipv4_flow_create_failure_;
}
inline void InlineJflowNpuStats::set_ipv4_flow_create_failure(::google::protobuf::uint64 value) {
  set_has_ipv4_flow_create_failure();
  ipv4_flow_create_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_create_failure)
}

// optional uint64 ipv4_route_lookup_failure = 60;
inline bool InlineJflowNpuStats::has_ipv4_route_lookup_failure() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_route_lookup_failure() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_route_lookup_failure() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InlineJflowNpuStats::clear_ipv4_route_lookup_failure() {
  ipv4_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_route_lookup_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_route_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_route_lookup_failure)
  return ipv4_route_lookup_failure_;
}
inline void InlineJflowNpuStats::set_ipv4_route_lookup_failure(::google::protobuf::uint64 value) {
  set_has_ipv4_route_lookup_failure();
  ipv4_route_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_route_lookup_failure)
}

// optional uint64 ipv4_autonomous_system_lookup_failure = 61;
inline bool InlineJflowNpuStats::has_ipv4_autonomous_system_lookup_failure() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_autonomous_system_lookup_failure() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_autonomous_system_lookup_failure() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InlineJflowNpuStats::clear_ipv4_autonomous_system_lookup_failure() {
  ipv4_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_autonomous_system_lookup_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_autonomous_system_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_autonomous_system_lookup_failure)
  return ipv4_autonomous_system_lookup_failure_;
}
inline void InlineJflowNpuStats::set_ipv4_autonomous_system_lookup_failure(::google::protobuf::uint64 value) {
  set_has_ipv4_autonomous_system_lookup_failure();
  ipv4_autonomous_system_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_autonomous_system_lookup_failure)
}

// optional uint64 ipv4_flow_packet_export_failure = 62;
inline bool InlineJflowNpuStats::has_ipv4_flow_packet_export_failure() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_flow_packet_export_failure() {
  _has_bits_[0] |= 0x00001000u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_flow_packet_export_failure() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void InlineJflowNpuStats::clear_ipv4_flow_packet_export_failure() {
  ipv4_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flow_packet_export_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flow_packet_export_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_packet_export_failure)
  return ipv4_flow_packet_export_failure_;
}
inline void InlineJflowNpuStats::set_ipv4_flow_packet_export_failure(::google::protobuf::uint64 value) {
  set_has_ipv4_flow_packet_export_failure();
  ipv4_flow_packet_export_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_packet_export_failure)
}

// optional float ipv4_flow_table_utilization = 63;
inline bool InlineJflowNpuStats::has_ipv4_flow_table_utilization() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_flow_table_utilization() {
  _has_bits_[0] |= 0x00002000u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_flow_table_utilization() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void InlineJflowNpuStats::clear_ipv4_flow_table_utilization() {
  ipv4_flow_table_utilization_ = 0;
  clear_has_ipv4_flow_table_utilization();
}
inline float InlineJflowNpuStats::ipv4_flow_table_utilization() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_table_utilization)
  return ipv4_flow_table_utilization_;
}
inline void InlineJflowNpuStats::set_ipv4_flow_table_utilization(float value) {
  set_has_ipv4_flow_table_utilization();
  ipv4_flow_table_utilization_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_table_utilization)
}

// optional uint64 ipv4_flow_insert_count = 64;
inline bool InlineJflowNpuStats::has_ipv4_flow_insert_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv4_flow_insert_count() {
  _has_bits_[0] |= 0x00004000u;
}
inline void InlineJflowNpuStats::clear_has_ipv4_flow_insert_count() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void InlineJflowNpuStats::clear_ipv4_flow_insert_count() {
  ipv4_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flow_insert_count();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flow_insert_count() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_insert_count)
  return ipv4_flow_insert_count_;
}
inline void InlineJflowNpuStats::set_ipv4_flow_insert_count(::google::protobuf::uint64 value) {
  set_has_ipv4_flow_insert_count();
  ipv4_flow_insert_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_insert_count)
}

// optional uint64 ipv6_flow_packets = 101;
inline bool InlineJflowNpuStats::has_ipv6_flow_packets() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_flow_packets() {
  _has_bits_[0] |= 0x00008000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_flow_packets() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void InlineJflowNpuStats::clear_ipv6_flow_packets() {
  ipv6_flow_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flow_packets();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flow_packets() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_packets)
  return ipv6_flow_packets_;
}
inline void InlineJflowNpuStats::set_ipv6_flow_packets(::google::protobuf::uint64 value) {
  set_has_ipv6_flow_packets();
  ipv6_flow_packets_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_packets)
}

// optional uint64 ipv6_flow_bytes = 102;
inline bool InlineJflowNpuStats::has_ipv6_flow_bytes() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_flow_bytes() {
  _has_bits_[0] |= 0x00010000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_flow_bytes() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void InlineJflowNpuStats::clear_ipv6_flow_bytes() {
  ipv6_flow_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flow_bytes();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flow_bytes() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_bytes)
  return ipv6_flow_bytes_;
}
inline void InlineJflowNpuStats::set_ipv6_flow_bytes(::google::protobuf::uint64 value) {
  set_has_ipv6_flow_bytes();
  ipv6_flow_bytes_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_bytes)
}

// optional uint64 ipv6_total_flows = 103;
inline bool InlineJflowNpuStats::has_ipv6_total_flows() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_total_flows() {
  _has_bits_[0] |= 0x00020000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_total_flows() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void InlineJflowNpuStats::clear_ipv6_total_flows() {
  ipv6_total_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_total_flows();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_total_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_total_flows)
  return ipv6_total_flows_;
}
inline void InlineJflowNpuStats::set_ipv6_total_flows(::google::protobuf::uint64 value) {
  set_has_ipv6_total_flows();
  ipv6_total_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_total_flows)
}

// optional uint64 ipv6_active_flows = 104;
inline bool InlineJflowNpuStats::has_ipv6_active_flows() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_active_flows() {
  _has_bits_[0] |= 0x00040000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_active_flows() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void InlineJflowNpuStats::clear_ipv6_active_flows() {
  ipv6_active_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_active_flows();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_active_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_active_flows)
  return ipv6_active_flows_;
}
inline void InlineJflowNpuStats::set_ipv6_active_flows(::google::protobuf::uint64 value) {
  set_has_ipv6_active_flows();
  ipv6_active_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_active_flows)
}

// optional uint64 ipv6_flows_exported = 105;
inline bool InlineJflowNpuStats::has_ipv6_flows_exported() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_flows_exported() {
  _has_bits_[0] |= 0x00080000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_flows_exported() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void InlineJflowNpuStats::clear_ipv6_flows_exported() {
  ipv6_flows_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flows_exported();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flows_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flows_exported)
  return ipv6_flows_exported_;
}
inline void InlineJflowNpuStats::set_ipv6_flows_exported(::google::protobuf::uint64 value) {
  set_has_ipv6_flows_exported();
  ipv6_flows_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flows_exported)
}

// optional uint64 ipv6_packets_exported = 106;
inline bool InlineJflowNpuStats::has_ipv6_packets_exported() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_packets_exported() {
  _has_bits_[0] |= 0x00100000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_packets_exported() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void InlineJflowNpuStats::clear_ipv6_packets_exported() {
  ipv6_packets_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_packets_exported();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_packets_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_packets_exported)
  return ipv6_packets_exported_;
}
inline void InlineJflowNpuStats::set_ipv6_packets_exported(::google::protobuf::uint64 value) {
  set_has_ipv6_packets_exported();
  ipv6_packets_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_packets_exported)
}

// optional uint64 ipv6_flows_inactive_timed_out = 107;
inline bool InlineJflowNpuStats::has_ipv6_flows_inactive_timed_out() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_flows_inactive_timed_out() {
  _has_bits_[0] |= 0x00200000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_flows_inactive_timed_out() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void InlineJflowNpuStats::clear_ipv6_flows_inactive_timed_out() {
  ipv6_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flows_inactive_timed_out();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flows_inactive_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flows_inactive_timed_out)
  return ipv6_flows_inactive_timed_out_;
}
inline void InlineJflowNpuStats::set_ipv6_flows_inactive_timed_out(::google::protobuf::uint64 value) {
  set_has_ipv6_flows_inactive_timed_out();
  ipv6_flows_inactive_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flows_inactive_timed_out)
}

// optional uint64 ipv6_flows_active_timed_out = 108;
inline bool InlineJflowNpuStats::has_ipv6_flows_active_timed_out() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_flows_active_timed_out() {
  _has_bits_[0] |= 0x00400000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_flows_active_timed_out() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void InlineJflowNpuStats::clear_ipv6_flows_active_timed_out() {
  ipv6_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flows_active_timed_out();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flows_active_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flows_active_timed_out)
  return ipv6_flows_active_timed_out_;
}
inline void InlineJflowNpuStats::set_ipv6_flows_active_timed_out(::google::protobuf::uint64 value) {
  set_has_ipv6_flows_active_timed_out();
  ipv6_flows_active_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flows_active_timed_out)
}

// optional uint64 ipv6_flow_create_failure = 109;
inline bool InlineJflowNpuStats::has_ipv6_flow_create_failure() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_flow_create_failure() {
  _has_bits_[0] |= 0x00800000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_flow_create_failure() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void InlineJflowNpuStats::clear_ipv6_flow_create_failure() {
  ipv6_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flow_create_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flow_create_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_create_failure)
  return ipv6_flow_create_failure_;
}
inline void InlineJflowNpuStats::set_ipv6_flow_create_failure(::google::protobuf::uint64 value) {
  set_has_ipv6_flow_create_failure();
  ipv6_flow_create_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_create_failure)
}

// optional uint64 ipv6_route_lookup_failure = 110;
inline bool InlineJflowNpuStats::has_ipv6_route_lookup_failure() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_route_lookup_failure() {
  _has_bits_[0] |= 0x01000000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_route_lookup_failure() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void InlineJflowNpuStats::clear_ipv6_route_lookup_failure() {
  ipv6_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_route_lookup_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_route_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_route_lookup_failure)
  return ipv6_route_lookup_failure_;
}
inline void InlineJflowNpuStats::set_ipv6_route_lookup_failure(::google::protobuf::uint64 value) {
  set_has_ipv6_route_lookup_failure();
  ipv6_route_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_route_lookup_failure)
}

// optional uint64 ipv6_autonomous_system_lookup_failure = 111;
inline bool InlineJflowNpuStats::has_ipv6_autonomous_system_lookup_failure() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_autonomous_system_lookup_failure() {
  _has_bits_[0] |= 0x02000000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_autonomous_system_lookup_failure() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void InlineJflowNpuStats::clear_ipv6_autonomous_system_lookup_failure() {
  ipv6_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_autonomous_system_lookup_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_autonomous_system_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_autonomous_system_lookup_failure)
  return ipv6_autonomous_system_lookup_failure_;
}
inline void InlineJflowNpuStats::set_ipv6_autonomous_system_lookup_failure(::google::protobuf::uint64 value) {
  set_has_ipv6_autonomous_system_lookup_failure();
  ipv6_autonomous_system_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_autonomous_system_lookup_failure)
}

// optional uint64 ipv6_flow_packet_export_failure = 112;
inline bool InlineJflowNpuStats::has_ipv6_flow_packet_export_failure() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_flow_packet_export_failure() {
  _has_bits_[0] |= 0x04000000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_flow_packet_export_failure() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void InlineJflowNpuStats::clear_ipv6_flow_packet_export_failure() {
  ipv6_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flow_packet_export_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flow_packet_export_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_packet_export_failure)
  return ipv6_flow_packet_export_failure_;
}
inline void InlineJflowNpuStats::set_ipv6_flow_packet_export_failure(::google::protobuf::uint64 value) {
  set_has_ipv6_flow_packet_export_failure();
  ipv6_flow_packet_export_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_packet_export_failure)
}

// optional float ipv6_flow_table_utilization = 113;
inline bool InlineJflowNpuStats::has_ipv6_flow_table_utilization() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_flow_table_utilization() {
  _has_bits_[0] |= 0x08000000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_flow_table_utilization() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void InlineJflowNpuStats::clear_ipv6_flow_table_utilization() {
  ipv6_flow_table_utilization_ = 0;
  clear_has_ipv6_flow_table_utilization();
}
inline float InlineJflowNpuStats::ipv6_flow_table_utilization() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_table_utilization)
  return ipv6_flow_table_utilization_;
}
inline void InlineJflowNpuStats::set_ipv6_flow_table_utilization(float value) {
  set_has_ipv6_flow_table_utilization();
  ipv6_flow_table_utilization_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_table_utilization)
}

// optional uint64 ipv6_flow_insert_count = 114;
inline bool InlineJflowNpuStats::has_ipv6_flow_insert_count() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void InlineJflowNpuStats::set_has_ipv6_flow_insert_count() {
  _has_bits_[0] |= 0x10000000u;
}
inline void InlineJflowNpuStats::clear_has_ipv6_flow_insert_count() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void InlineJflowNpuStats::clear_ipv6_flow_insert_count() {
  ipv6_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flow_insert_count();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flow_insert_count() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_insert_count)
  return ipv6_flow_insert_count_;
}
inline void InlineJflowNpuStats::set_ipv6_flow_insert_count(::google::protobuf::uint64 value) {
  set_has_ipv6_flow_insert_count();
  ipv6_flow_insert_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_insert_count)
}

// optional uint64 vpls_flow_packets = 151;
inline bool InlineJflowNpuStats::has_vpls_flow_packets() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_flow_packets() {
  _has_bits_[0] |= 0x20000000u;
}
inline void InlineJflowNpuStats::clear_has_vpls_flow_packets() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void InlineJflowNpuStats::clear_vpls_flow_packets() {
  vpls_flow_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flow_packets();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flow_packets() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_packets)
  return vpls_flow_packets_;
}
inline void InlineJflowNpuStats::set_vpls_flow_packets(::google::protobuf::uint64 value) {
  set_has_vpls_flow_packets();
  vpls_flow_packets_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_packets)
}

// optional uint64 vpls_flow_bytes = 152;
inline bool InlineJflowNpuStats::has_vpls_flow_bytes() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_flow_bytes() {
  _has_bits_[0] |= 0x40000000u;
}
inline void InlineJflowNpuStats::clear_has_vpls_flow_bytes() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void InlineJflowNpuStats::clear_vpls_flow_bytes() {
  vpls_flow_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flow_bytes();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flow_bytes() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_bytes)
  return vpls_flow_bytes_;
}
inline void InlineJflowNpuStats::set_vpls_flow_bytes(::google::protobuf::uint64 value) {
  set_has_vpls_flow_bytes();
  vpls_flow_bytes_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_bytes)
}

// optional uint64 vpls_total_flows = 153;
inline bool InlineJflowNpuStats::has_vpls_total_flows() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_total_flows() {
  _has_bits_[0] |= 0x80000000u;
}
inline void InlineJflowNpuStats::clear_has_vpls_total_flows() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void InlineJflowNpuStats::clear_vpls_total_flows() {
  vpls_total_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_total_flows();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_total_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_total_flows)
  return vpls_total_flows_;
}
inline void InlineJflowNpuStats::set_vpls_total_flows(::google::protobuf::uint64 value) {
  set_has_vpls_total_flows();
  vpls_total_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_total_flows)
}

// optional uint64 vpls_active_flows = 154;
inline bool InlineJflowNpuStats::has_vpls_active_flows() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_active_flows() {
  _has_bits_[1] |= 0x00000001u;
}
inline void InlineJflowNpuStats::clear_has_vpls_active_flows() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void InlineJflowNpuStats::clear_vpls_active_flows() {
  vpls_active_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_active_flows();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_active_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_active_flows)
  return vpls_active_flows_;
}
inline void InlineJflowNpuStats::set_vpls_active_flows(::google::protobuf::uint64 value) {
  set_has_vpls_active_flows();
  vpls_active_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_active_flows)
}

// optional uint64 vpls_flows_exported = 155;
inline bool InlineJflowNpuStats::has_vpls_flows_exported() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_flows_exported() {
  _has_bits_[1] |= 0x00000002u;
}
inline void InlineJflowNpuStats::clear_has_vpls_flows_exported() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void InlineJflowNpuStats::clear_vpls_flows_exported() {
  vpls_flows_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flows_exported();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flows_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flows_exported)
  return vpls_flows_exported_;
}
inline void InlineJflowNpuStats::set_vpls_flows_exported(::google::protobuf::uint64 value) {
  set_has_vpls_flows_exported();
  vpls_flows_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flows_exported)
}

// optional uint64 vpls_packets_exported = 156;
inline bool InlineJflowNpuStats::has_vpls_packets_exported() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_packets_exported() {
  _has_bits_[1] |= 0x00000004u;
}
inline void InlineJflowNpuStats::clear_has_vpls_packets_exported() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void InlineJflowNpuStats::clear_vpls_packets_exported() {
  vpls_packets_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_packets_exported();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_packets_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_packets_exported)
  return vpls_packets_exported_;
}
inline void InlineJflowNpuStats::set_vpls_packets_exported(::google::protobuf::uint64 value) {
  set_has_vpls_packets_exported();
  vpls_packets_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_packets_exported)
}

// optional uint64 vpls_flows_inactive_timed_out = 157;
inline bool InlineJflowNpuStats::has_vpls_flows_inactive_timed_out() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_flows_inactive_timed_out() {
  _has_bits_[1] |= 0x00000008u;
}
inline void InlineJflowNpuStats::clear_has_vpls_flows_inactive_timed_out() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void InlineJflowNpuStats::clear_vpls_flows_inactive_timed_out() {
  vpls_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flows_inactive_timed_out();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flows_inactive_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flows_inactive_timed_out)
  return vpls_flows_inactive_timed_out_;
}
inline void InlineJflowNpuStats::set_vpls_flows_inactive_timed_out(::google::protobuf::uint64 value) {
  set_has_vpls_flows_inactive_timed_out();
  vpls_flows_inactive_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flows_inactive_timed_out)
}

// optional uint64 vpls_flows_active_timed_out = 158;
inline bool InlineJflowNpuStats::has_vpls_flows_active_timed_out() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_flows_active_timed_out() {
  _has_bits_[1] |= 0x00000010u;
}
inline void InlineJflowNpuStats::clear_has_vpls_flows_active_timed_out() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void InlineJflowNpuStats::clear_vpls_flows_active_timed_out() {
  vpls_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flows_active_timed_out();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flows_active_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flows_active_timed_out)
  return vpls_flows_active_timed_out_;
}
inline void InlineJflowNpuStats::set_vpls_flows_active_timed_out(::google::protobuf::uint64 value) {
  set_has_vpls_flows_active_timed_out();
  vpls_flows_active_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flows_active_timed_out)
}

// optional uint64 vpls_flow_create_failure = 159;
inline bool InlineJflowNpuStats::has_vpls_flow_create_failure() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_flow_create_failure() {
  _has_bits_[1] |= 0x00000020u;
}
inline void InlineJflowNpuStats::clear_has_vpls_flow_create_failure() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void InlineJflowNpuStats::clear_vpls_flow_create_failure() {
  vpls_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flow_create_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flow_create_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_create_failure)
  return vpls_flow_create_failure_;
}
inline void InlineJflowNpuStats::set_vpls_flow_create_failure(::google::protobuf::uint64 value) {
  set_has_vpls_flow_create_failure();
  vpls_flow_create_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_create_failure)
}

// optional uint64 vpls_route_lookup_failure = 160;
inline bool InlineJflowNpuStats::has_vpls_route_lookup_failure() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_route_lookup_failure() {
  _has_bits_[1] |= 0x00000040u;
}
inline void InlineJflowNpuStats::clear_has_vpls_route_lookup_failure() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void InlineJflowNpuStats::clear_vpls_route_lookup_failure() {
  vpls_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_route_lookup_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_route_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_route_lookup_failure)
  return vpls_route_lookup_failure_;
}
inline void InlineJflowNpuStats::set_vpls_route_lookup_failure(::google::protobuf::uint64 value) {
  set_has_vpls_route_lookup_failure();
  vpls_route_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_route_lookup_failure)
}

// optional uint64 vpls_autonomous_system_lookup_failure = 161;
inline bool InlineJflowNpuStats::has_vpls_autonomous_system_lookup_failure() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_autonomous_system_lookup_failure() {
  _has_bits_[1] |= 0x00000080u;
}
inline void InlineJflowNpuStats::clear_has_vpls_autonomous_system_lookup_failure() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void InlineJflowNpuStats::clear_vpls_autonomous_system_lookup_failure() {
  vpls_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_autonomous_system_lookup_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_autonomous_system_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_autonomous_system_lookup_failure)
  return vpls_autonomous_system_lookup_failure_;
}
inline void InlineJflowNpuStats::set_vpls_autonomous_system_lookup_failure(::google::protobuf::uint64 value) {
  set_has_vpls_autonomous_system_lookup_failure();
  vpls_autonomous_system_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_autonomous_system_lookup_failure)
}

// optional uint64 vpls_flow_packet_export_failure = 162;
inline bool InlineJflowNpuStats::has_vpls_flow_packet_export_failure() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_flow_packet_export_failure() {
  _has_bits_[1] |= 0x00000100u;
}
inline void InlineJflowNpuStats::clear_has_vpls_flow_packet_export_failure() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void InlineJflowNpuStats::clear_vpls_flow_packet_export_failure() {
  vpls_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flow_packet_export_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flow_packet_export_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_packet_export_failure)
  return vpls_flow_packet_export_failure_;
}
inline void InlineJflowNpuStats::set_vpls_flow_packet_export_failure(::google::protobuf::uint64 value) {
  set_has_vpls_flow_packet_export_failure();
  vpls_flow_packet_export_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_packet_export_failure)
}

// optional float vpls_flow_table_utilization = 163;
inline bool InlineJflowNpuStats::has_vpls_flow_table_utilization() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_flow_table_utilization() {
  _has_bits_[1] |= 0x00000200u;
}
inline void InlineJflowNpuStats::clear_has_vpls_flow_table_utilization() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void InlineJflowNpuStats::clear_vpls_flow_table_utilization() {
  vpls_flow_table_utilization_ = 0;
  clear_has_vpls_flow_table_utilization();
}
inline float InlineJflowNpuStats::vpls_flow_table_utilization() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_table_utilization)
  return vpls_flow_table_utilization_;
}
inline void InlineJflowNpuStats::set_vpls_flow_table_utilization(float value) {
  set_has_vpls_flow_table_utilization();
  vpls_flow_table_utilization_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_table_utilization)
}

// optional uint64 vpls_flow_insert_count = 164;
inline bool InlineJflowNpuStats::has_vpls_flow_insert_count() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void InlineJflowNpuStats::set_has_vpls_flow_insert_count() {
  _has_bits_[1] |= 0x00000400u;
}
inline void InlineJflowNpuStats::clear_has_vpls_flow_insert_count() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void InlineJflowNpuStats::clear_vpls_flow_insert_count() {
  vpls_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flow_insert_count();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flow_insert_count() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_insert_count)
  return vpls_flow_insert_count_;
}
inline void InlineJflowNpuStats::set_vpls_flow_insert_count(::google::protobuf::uint64 value) {
  set_has_vpls_flow_insert_count();
  vpls_flow_insert_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_insert_count)
}

// optional uint64 mpls_flow_packets = 201;
inline bool InlineJflowNpuStats::has_mpls_flow_packets() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_flow_packets() {
  _has_bits_[1] |= 0x00000800u;
}
inline void InlineJflowNpuStats::clear_has_mpls_flow_packets() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void InlineJflowNpuStats::clear_mpls_flow_packets() {
  mpls_flow_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flow_packets();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flow_packets() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_packets)
  return mpls_flow_packets_;
}
inline void InlineJflowNpuStats::set_mpls_flow_packets(::google::protobuf::uint64 value) {
  set_has_mpls_flow_packets();
  mpls_flow_packets_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_packets)
}

// optional uint64 mpls_flow_bytes = 202;
inline bool InlineJflowNpuStats::has_mpls_flow_bytes() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_flow_bytes() {
  _has_bits_[1] |= 0x00001000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_flow_bytes() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void InlineJflowNpuStats::clear_mpls_flow_bytes() {
  mpls_flow_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flow_bytes();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flow_bytes() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_bytes)
  return mpls_flow_bytes_;
}
inline void InlineJflowNpuStats::set_mpls_flow_bytes(::google::protobuf::uint64 value) {
  set_has_mpls_flow_bytes();
  mpls_flow_bytes_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_bytes)
}

// optional uint64 mpls_total_flows = 203;
inline bool InlineJflowNpuStats::has_mpls_total_flows() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_total_flows() {
  _has_bits_[1] |= 0x00002000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_total_flows() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void InlineJflowNpuStats::clear_mpls_total_flows() {
  mpls_total_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_total_flows();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_total_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_total_flows)
  return mpls_total_flows_;
}
inline void InlineJflowNpuStats::set_mpls_total_flows(::google::protobuf::uint64 value) {
  set_has_mpls_total_flows();
  mpls_total_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_total_flows)
}

// optional uint64 mpls_active_flows = 204;
inline bool InlineJflowNpuStats::has_mpls_active_flows() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_active_flows() {
  _has_bits_[1] |= 0x00004000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_active_flows() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void InlineJflowNpuStats::clear_mpls_active_flows() {
  mpls_active_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_active_flows();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_active_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_active_flows)
  return mpls_active_flows_;
}
inline void InlineJflowNpuStats::set_mpls_active_flows(::google::protobuf::uint64 value) {
  set_has_mpls_active_flows();
  mpls_active_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_active_flows)
}

// optional uint64 mpls_flows_exported = 205;
inline bool InlineJflowNpuStats::has_mpls_flows_exported() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_flows_exported() {
  _has_bits_[1] |= 0x00008000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_flows_exported() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void InlineJflowNpuStats::clear_mpls_flows_exported() {
  mpls_flows_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flows_exported();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flows_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flows_exported)
  return mpls_flows_exported_;
}
inline void InlineJflowNpuStats::set_mpls_flows_exported(::google::protobuf::uint64 value) {
  set_has_mpls_flows_exported();
  mpls_flows_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flows_exported)
}

// optional uint64 mpls_packets_exported = 206;
inline bool InlineJflowNpuStats::has_mpls_packets_exported() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_packets_exported() {
  _has_bits_[1] |= 0x00010000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_packets_exported() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void InlineJflowNpuStats::clear_mpls_packets_exported() {
  mpls_packets_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_packets_exported();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_packets_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_packets_exported)
  return mpls_packets_exported_;
}
inline void InlineJflowNpuStats::set_mpls_packets_exported(::google::protobuf::uint64 value) {
  set_has_mpls_packets_exported();
  mpls_packets_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_packets_exported)
}

// optional uint64 mpls_flows_inactive_timed_out = 207;
inline bool InlineJflowNpuStats::has_mpls_flows_inactive_timed_out() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_flows_inactive_timed_out() {
  _has_bits_[1] |= 0x00020000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_flows_inactive_timed_out() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void InlineJflowNpuStats::clear_mpls_flows_inactive_timed_out() {
  mpls_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flows_inactive_timed_out();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flows_inactive_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flows_inactive_timed_out)
  return mpls_flows_inactive_timed_out_;
}
inline void InlineJflowNpuStats::set_mpls_flows_inactive_timed_out(::google::protobuf::uint64 value) {
  set_has_mpls_flows_inactive_timed_out();
  mpls_flows_inactive_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flows_inactive_timed_out)
}

// optional uint64 mpls_flows_active_timed_out = 208;
inline bool InlineJflowNpuStats::has_mpls_flows_active_timed_out() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_flows_active_timed_out() {
  _has_bits_[1] |= 0x00040000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_flows_active_timed_out() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void InlineJflowNpuStats::clear_mpls_flows_active_timed_out() {
  mpls_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flows_active_timed_out();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flows_active_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flows_active_timed_out)
  return mpls_flows_active_timed_out_;
}
inline void InlineJflowNpuStats::set_mpls_flows_active_timed_out(::google::protobuf::uint64 value) {
  set_has_mpls_flows_active_timed_out();
  mpls_flows_active_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flows_active_timed_out)
}

// optional uint64 mpls_flow_create_failure = 209;
inline bool InlineJflowNpuStats::has_mpls_flow_create_failure() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_flow_create_failure() {
  _has_bits_[1] |= 0x00080000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_flow_create_failure() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void InlineJflowNpuStats::clear_mpls_flow_create_failure() {
  mpls_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flow_create_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flow_create_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_create_failure)
  return mpls_flow_create_failure_;
}
inline void InlineJflowNpuStats::set_mpls_flow_create_failure(::google::protobuf::uint64 value) {
  set_has_mpls_flow_create_failure();
  mpls_flow_create_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_create_failure)
}

// optional uint64 mpls_route_lookup_failure = 210;
inline bool InlineJflowNpuStats::has_mpls_route_lookup_failure() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_route_lookup_failure() {
  _has_bits_[1] |= 0x00100000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_route_lookup_failure() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void InlineJflowNpuStats::clear_mpls_route_lookup_failure() {
  mpls_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_route_lookup_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_route_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_route_lookup_failure)
  return mpls_route_lookup_failure_;
}
inline void InlineJflowNpuStats::set_mpls_route_lookup_failure(::google::protobuf::uint64 value) {
  set_has_mpls_route_lookup_failure();
  mpls_route_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_route_lookup_failure)
}

// optional uint64 mpls_autonomous_system_lookup_failure = 211;
inline bool InlineJflowNpuStats::has_mpls_autonomous_system_lookup_failure() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_autonomous_system_lookup_failure() {
  _has_bits_[1] |= 0x00200000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_autonomous_system_lookup_failure() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void InlineJflowNpuStats::clear_mpls_autonomous_system_lookup_failure() {
  mpls_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_autonomous_system_lookup_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_autonomous_system_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_autonomous_system_lookup_failure)
  return mpls_autonomous_system_lookup_failure_;
}
inline void InlineJflowNpuStats::set_mpls_autonomous_system_lookup_failure(::google::protobuf::uint64 value) {
  set_has_mpls_autonomous_system_lookup_failure();
  mpls_autonomous_system_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_autonomous_system_lookup_failure)
}

// optional uint64 mpls_flow_packet_export_failure = 212;
inline bool InlineJflowNpuStats::has_mpls_flow_packet_export_failure() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_flow_packet_export_failure() {
  _has_bits_[1] |= 0x00400000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_flow_packet_export_failure() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void InlineJflowNpuStats::clear_mpls_flow_packet_export_failure() {
  mpls_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flow_packet_export_failure();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flow_packet_export_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_packet_export_failure)
  return mpls_flow_packet_export_failure_;
}
inline void InlineJflowNpuStats::set_mpls_flow_packet_export_failure(::google::protobuf::uint64 value) {
  set_has_mpls_flow_packet_export_failure();
  mpls_flow_packet_export_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_packet_export_failure)
}

// optional float mpls_flow_table_utilization = 213;
inline bool InlineJflowNpuStats::has_mpls_flow_table_utilization() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_flow_table_utilization() {
  _has_bits_[1] |= 0x00800000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_flow_table_utilization() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void InlineJflowNpuStats::clear_mpls_flow_table_utilization() {
  mpls_flow_table_utilization_ = 0;
  clear_has_mpls_flow_table_utilization();
}
inline float InlineJflowNpuStats::mpls_flow_table_utilization() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_table_utilization)
  return mpls_flow_table_utilization_;
}
inline void InlineJflowNpuStats::set_mpls_flow_table_utilization(float value) {
  set_has_mpls_flow_table_utilization();
  mpls_flow_table_utilization_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_table_utilization)
}

// optional uint64 mpls_flow_insert_count = 214;
inline bool InlineJflowNpuStats::has_mpls_flow_insert_count() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void InlineJflowNpuStats::set_has_mpls_flow_insert_count() {
  _has_bits_[1] |= 0x01000000u;
}
inline void InlineJflowNpuStats::clear_has_mpls_flow_insert_count() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void InlineJflowNpuStats::clear_mpls_flow_insert_count() {
  mpls_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flow_insert_count();
}
inline ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flow_insert_count() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_insert_count)
  return mpls_flow_insert_count_;
}
inline void InlineJflowNpuStats::set_mpls_flow_insert_count(::google::protobuf::uint64 value) {
  set_has_mpls_flow_insert_count();
  mpls_flow_insert_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_insert_count)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inline_5fjflow_2eproto__INCLUDED
