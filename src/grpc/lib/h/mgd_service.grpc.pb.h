// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: mgd_service.proto
#ifndef GRPC_mgd_5fservice_2eproto__INCLUDED
#define GRPC_mgd_5fservice_2eproto__INCLUDED

#include "mgd_service.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace management {

class ManagementRpcApi GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::management::ExecuteOpCommandResponse>> ExecuteOpCommand(::grpc::ClientContext* context, const ::management::ExecuteOpCommandRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::management::ExecuteOpCommandResponse>>(ExecuteOpCommandRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::management::ExecuteOpCommandResponse>> AsyncExecuteOpCommand(::grpc::ClientContext* context, const ::management::ExecuteOpCommandRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::management::ExecuteOpCommandResponse>>(AsyncExecuteOpCommandRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status GetEphemeralConfig(::grpc::ClientContext* context, const ::management::GetEphemeralConfigRequest& request, ::management::GetEphemeralConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::management::GetEphemeralConfigResponse>> AsyncGetEphemeralConfig(::grpc::ClientContext* context, const ::management::GetEphemeralConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::management::GetEphemeralConfigResponse>>(AsyncGetEphemeralConfigRaw(context, request, cq));
    }
    virtual ::grpc::Status EditEphemeralConfig(::grpc::ClientContext* context, const ::management::EditEphemeralConfigRequest& request, ::management::EditEphemeralConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::management::EditEphemeralConfigResponse>> AsyncEditEphemeralConfig(::grpc::ClientContext* context, const ::management::EditEphemeralConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::management::EditEphemeralConfigResponse>>(AsyncEditEphemeralConfigRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::management::ExecuteOpCommandResponse>* ExecuteOpCommandRaw(::grpc::ClientContext* context, const ::management::ExecuteOpCommandRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::management::ExecuteOpCommandResponse>* AsyncExecuteOpCommandRaw(::grpc::ClientContext* context, const ::management::ExecuteOpCommandRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::management::GetEphemeralConfigResponse>* AsyncGetEphemeralConfigRaw(::grpc::ClientContext* context, const ::management::GetEphemeralConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::management::EditEphemeralConfigResponse>* AsyncEditEphemeralConfigRaw(::grpc::ClientContext* context, const ::management::EditEphemeralConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::management::ExecuteOpCommandResponse>> ExecuteOpCommand(::grpc::ClientContext* context, const ::management::ExecuteOpCommandRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::management::ExecuteOpCommandResponse>>(ExecuteOpCommandRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::management::ExecuteOpCommandResponse>> AsyncExecuteOpCommand(::grpc::ClientContext* context, const ::management::ExecuteOpCommandRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::management::ExecuteOpCommandResponse>>(AsyncExecuteOpCommandRaw(context, request, cq, tag));
    }
    ::grpc::Status GetEphemeralConfig(::grpc::ClientContext* context, const ::management::GetEphemeralConfigRequest& request, ::management::GetEphemeralConfigResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::management::GetEphemeralConfigResponse>> AsyncGetEphemeralConfig(::grpc::ClientContext* context, const ::management::GetEphemeralConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::management::GetEphemeralConfigResponse>>(AsyncGetEphemeralConfigRaw(context, request, cq));
    }
    ::grpc::Status EditEphemeralConfig(::grpc::ClientContext* context, const ::management::EditEphemeralConfigRequest& request, ::management::EditEphemeralConfigResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::management::EditEphemeralConfigResponse>> AsyncEditEphemeralConfig(::grpc::ClientContext* context, const ::management::EditEphemeralConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::management::EditEphemeralConfigResponse>>(AsyncEditEphemeralConfigRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientReader< ::management::ExecuteOpCommandResponse>* ExecuteOpCommandRaw(::grpc::ClientContext* context, const ::management::ExecuteOpCommandRequest& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::management::ExecuteOpCommandResponse>* AsyncExecuteOpCommandRaw(::grpc::ClientContext* context, const ::management::ExecuteOpCommandRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::management::GetEphemeralConfigResponse>* AsyncGetEphemeralConfigRaw(::grpc::ClientContext* context, const ::management::GetEphemeralConfigRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::management::EditEphemeralConfigResponse>* AsyncEditEphemeralConfigRaw(::grpc::ClientContext* context, const ::management::EditEphemeralConfigRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_ExecuteOpCommand_;
    const ::grpc::RpcMethod rpcmethod_GetEphemeralConfig_;
    const ::grpc::RpcMethod rpcmethod_EditEphemeralConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status ExecuteOpCommand(::grpc::ServerContext* context, const ::management::ExecuteOpCommandRequest* request, ::grpc::ServerWriter< ::management::ExecuteOpCommandResponse>* writer);
    virtual ::grpc::Status GetEphemeralConfig(::grpc::ServerContext* context, const ::management::GetEphemeralConfigRequest* request, ::management::GetEphemeralConfigResponse* response);
    virtual ::grpc::Status EditEphemeralConfig(::grpc::ServerContext* context, const ::management::EditEphemeralConfigRequest* request, ::management::EditEphemeralConfigResponse* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestExecuteOpCommand(::grpc::ServerContext* context, ::management::ExecuteOpCommandRequest* request, ::grpc::ServerAsyncWriter< ::management::ExecuteOpCommandResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetEphemeralConfig(::grpc::ServerContext* context, ::management::GetEphemeralConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::management::GetEphemeralConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestEditEphemeralConfig(::grpc::ServerContext* context, ::management::EditEphemeralConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::management::EditEphemeralConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace management


#endif  // GRPC_mgd_5fservice_2eproto__INCLUDED
