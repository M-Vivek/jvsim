// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry_top.proto

#ifndef PROTOBUF_telemetry_5ftop_2eproto__INCLUDED
#define PROTOBUF_telemetry_5ftop_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_telemetry_5ftop_2eproto();
void protobuf_AssignDesc_telemetry_5ftop_2eproto();
void protobuf_ShutdownFile_telemetry_5ftop_2eproto();

class EnterpriseSensors;
class IETFSensors;
class JuniperNetworksSensors;
class TelemetryFieldOptions;
class TelemetryStream;

// ===================================================================

class TelemetryFieldOptions : public ::google::protobuf::Message {
 public:
  TelemetryFieldOptions();
  virtual ~TelemetryFieldOptions();

  TelemetryFieldOptions(const TelemetryFieldOptions& from);

  inline TelemetryFieldOptions& operator=(const TelemetryFieldOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelemetryFieldOptions& default_instance();

  void Swap(TelemetryFieldOptions* other);

  // implements Message ----------------------------------------------

  inline TelemetryFieldOptions* New() const { return New(NULL); }

  TelemetryFieldOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelemetryFieldOptions& from);
  void MergeFrom(const TelemetryFieldOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelemetryFieldOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_key = 1;
  bool has_is_key() const;
  void clear_is_key();
  static const int kIsKeyFieldNumber = 1;
  bool is_key() const;
  void set_is_key(bool value);

  // optional bool is_timestamp = 2;
  bool has_is_timestamp() const;
  void clear_is_timestamp();
  static const int kIsTimestampFieldNumber = 2;
  bool is_timestamp() const;
  void set_is_timestamp(bool value);

  // optional bool is_counter = 3;
  bool has_is_counter() const;
  void clear_is_counter();
  static const int kIsCounterFieldNumber = 3;
  bool is_counter() const;
  void set_is_counter(bool value);

  // optional bool is_gauge = 4;
  bool has_is_gauge() const;
  void clear_is_gauge();
  static const int kIsGaugeFieldNumber = 4;
  bool is_gauge() const;
  void set_is_gauge(bool value);

  // @@protoc_insertion_point(class_scope:TelemetryFieldOptions)
 private:
  inline void set_has_is_key();
  inline void clear_has_is_key();
  inline void set_has_is_timestamp();
  inline void clear_has_is_timestamp();
  inline void set_has_is_counter();
  inline void clear_has_is_counter();
  inline void set_has_is_gauge();
  inline void clear_has_is_gauge();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_key_;
  bool is_timestamp_;
  bool is_counter_;
  bool is_gauge_;
  friend void  protobuf_AddDesc_telemetry_5ftop_2eproto();
  friend void protobuf_AssignDesc_telemetry_5ftop_2eproto();
  friend void protobuf_ShutdownFile_telemetry_5ftop_2eproto();

  void InitAsDefaultInstance();
  static TelemetryFieldOptions* default_instance_;
};
// -------------------------------------------------------------------

class TelemetryStream : public ::google::protobuf::Message {
 public:
  TelemetryStream();
  virtual ~TelemetryStream();

  TelemetryStream(const TelemetryStream& from);

  inline TelemetryStream& operator=(const TelemetryStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TelemetryStream& default_instance();

  void Swap(TelemetryStream* other);

  // implements Message ----------------------------------------------

  inline TelemetryStream* New() const { return New(NULL); }

  TelemetryStream* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TelemetryStream& from);
  void MergeFrom(const TelemetryStream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelemetryStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string system_id = 1;
  bool has_system_id() const;
  void clear_system_id();
  static const int kSystemIdFieldNumber = 1;
  const ::std::string& system_id() const;
  void set_system_id(const ::std::string& value);
  void set_system_id(const char* value);
  void set_system_id(const char* value, size_t size);
  ::std::string* mutable_system_id();
  ::std::string* release_system_id();
  void set_allocated_system_id(::std::string* system_id);

  // optional uint32 component_id = 2;
  bool has_component_id() const;
  void clear_component_id();
  static const int kComponentIdFieldNumber = 2;
  ::google::protobuf::uint32 component_id() const;
  void set_component_id(::google::protobuf::uint32 value);

  // optional uint32 sub_component_id = 3;
  bool has_sub_component_id() const;
  void clear_sub_component_id();
  static const int kSubComponentIdFieldNumber = 3;
  ::google::protobuf::uint32 sub_component_id() const;
  void set_sub_component_id(::google::protobuf::uint32 value);

  // optional string sensor_name = 4;
  bool has_sensor_name() const;
  void clear_sensor_name();
  static const int kSensorNameFieldNumber = 4;
  const ::std::string& sensor_name() const;
  void set_sensor_name(const ::std::string& value);
  void set_sensor_name(const char* value);
  void set_sensor_name(const char* value, size_t size);
  ::std::string* mutable_sensor_name();
  ::std::string* release_sensor_name();
  void set_allocated_sensor_name(::std::string* sensor_name);

  // optional uint32 sequence_number = 5;
  bool has_sequence_number() const;
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 5;
  ::google::protobuf::uint32 sequence_number() const;
  void set_sequence_number(::google::protobuf::uint32 value);

  // optional uint64 timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional uint32 version_major = 7;
  bool has_version_major() const;
  void clear_version_major();
  static const int kVersionMajorFieldNumber = 7;
  ::google::protobuf::uint32 version_major() const;
  void set_version_major(::google::protobuf::uint32 value);

  // optional uint32 version_minor = 8;
  bool has_version_minor() const;
  void clear_version_minor();
  static const int kVersionMinorFieldNumber = 8;
  ::google::protobuf::uint32 version_minor() const;
  void set_version_minor(::google::protobuf::uint32 value);

  // optional .IETFSensors ietf = 100;
  bool has_ietf() const;
  void clear_ietf();
  static const int kIetfFieldNumber = 100;
  const ::IETFSensors& ietf() const;
  ::IETFSensors* mutable_ietf();
  ::IETFSensors* release_ietf();
  void set_allocated_ietf(::IETFSensors* ietf);

  // optional .EnterpriseSensors enterprise = 101;
  bool has_enterprise() const;
  void clear_enterprise();
  static const int kEnterpriseFieldNumber = 101;
  const ::EnterpriseSensors& enterprise() const;
  ::EnterpriseSensors* mutable_enterprise();
  ::EnterpriseSensors* release_enterprise();
  void set_allocated_enterprise(::EnterpriseSensors* enterprise);

  // @@protoc_insertion_point(class_scope:TelemetryStream)
 private:
  inline void set_has_system_id();
  inline void clear_has_system_id();
  inline void set_has_component_id();
  inline void clear_has_component_id();
  inline void set_has_sub_component_id();
  inline void clear_has_sub_component_id();
  inline void set_has_sensor_name();
  inline void clear_has_sensor_name();
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_version_major();
  inline void clear_has_version_major();
  inline void set_has_version_minor();
  inline void clear_has_version_minor();
  inline void set_has_ietf();
  inline void clear_has_ietf();
  inline void set_has_enterprise();
  inline void clear_has_enterprise();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr system_id_;
  ::google::protobuf::uint32 component_id_;
  ::google::protobuf::uint32 sub_component_id_;
  ::google::protobuf::internal::ArenaStringPtr sensor_name_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 sequence_number_;
  ::google::protobuf::uint32 version_major_;
  ::IETFSensors* ietf_;
  ::EnterpriseSensors* enterprise_;
  ::google::protobuf::uint32 version_minor_;
  friend void  protobuf_AddDesc_telemetry_5ftop_2eproto();
  friend void protobuf_AssignDesc_telemetry_5ftop_2eproto();
  friend void protobuf_ShutdownFile_telemetry_5ftop_2eproto();

  void InitAsDefaultInstance();
  static TelemetryStream* default_instance_;
};
// -------------------------------------------------------------------

class IETFSensors : public ::google::protobuf::Message {
 public:
  IETFSensors();
  virtual ~IETFSensors();

  IETFSensors(const IETFSensors& from);

  inline IETFSensors& operator=(const IETFSensors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IETFSensors& default_instance();

  void Swap(IETFSensors* other);

  // implements Message ----------------------------------------------

  inline IETFSensors* New() const { return New(NULL); }

  IETFSensors* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IETFSensors& from);
  void MergeFrom(const IETFSensors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IETFSensors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(IETFSensors)
  // @@protoc_insertion_point(class_scope:IETFSensors)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_telemetry_5ftop_2eproto();
  friend void protobuf_AssignDesc_telemetry_5ftop_2eproto();
  friend void protobuf_ShutdownFile_telemetry_5ftop_2eproto();

  void InitAsDefaultInstance();
  static IETFSensors* default_instance_;
};
// -------------------------------------------------------------------

class EnterpriseSensors : public ::google::protobuf::Message {
 public:
  EnterpriseSensors();
  virtual ~EnterpriseSensors();

  EnterpriseSensors(const EnterpriseSensors& from);

  inline EnterpriseSensors& operator=(const EnterpriseSensors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterpriseSensors& default_instance();

  void Swap(EnterpriseSensors* other);

  // implements Message ----------------------------------------------

  inline EnterpriseSensors* New() const { return New(NULL); }

  EnterpriseSensors* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterpriseSensors& from);
  void MergeFrom(const EnterpriseSensors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnterpriseSensors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(EnterpriseSensors)
  // @@protoc_insertion_point(class_scope:EnterpriseSensors)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_telemetry_5ftop_2eproto();
  friend void protobuf_AssignDesc_telemetry_5ftop_2eproto();
  friend void protobuf_ShutdownFile_telemetry_5ftop_2eproto();

  void InitAsDefaultInstance();
  static EnterpriseSensors* default_instance_;
};
// -------------------------------------------------------------------

class JuniperNetworksSensors : public ::google::protobuf::Message {
 public:
  JuniperNetworksSensors();
  virtual ~JuniperNetworksSensors();

  JuniperNetworksSensors(const JuniperNetworksSensors& from);

  inline JuniperNetworksSensors& operator=(const JuniperNetworksSensors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JuniperNetworksSensors& default_instance();

  void Swap(JuniperNetworksSensors* other);

  // implements Message ----------------------------------------------

  inline JuniperNetworksSensors* New() const { return New(NULL); }

  JuniperNetworksSensors* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JuniperNetworksSensors& from);
  void MergeFrom(const JuniperNetworksSensors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JuniperNetworksSensors* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(JuniperNetworksSensors)
  // @@protoc_insertion_point(class_scope:JuniperNetworksSensors)
 private:

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_telemetry_5ftop_2eproto();
  friend void protobuf_AssignDesc_telemetry_5ftop_2eproto();
  friend void protobuf_ShutdownFile_telemetry_5ftop_2eproto();

  void InitAsDefaultInstance();
  static JuniperNetworksSensors* default_instance_;
};
// ===================================================================

static const int kTelemetryOptionsFieldNumber = 1024;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::TelemetryFieldOptions >, 11, false >
  telemetry_options;
static const int kJuniperNetworksFieldNumber = 2636;
extern ::google::protobuf::internal::ExtensionIdentifier< ::EnterpriseSensors,
    ::google::protobuf::internal::MessageTypeTraits< ::JuniperNetworksSensors >, 11, false >
  juniperNetworks;

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TelemetryFieldOptions

// optional bool is_key = 1;
inline bool TelemetryFieldOptions::has_is_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelemetryFieldOptions::set_has_is_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelemetryFieldOptions::clear_has_is_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelemetryFieldOptions::clear_is_key() {
  is_key_ = false;
  clear_has_is_key();
}
inline bool TelemetryFieldOptions::is_key() const {
  // @@protoc_insertion_point(field_get:TelemetryFieldOptions.is_key)
  return is_key_;
}
inline void TelemetryFieldOptions::set_is_key(bool value) {
  set_has_is_key();
  is_key_ = value;
  // @@protoc_insertion_point(field_set:TelemetryFieldOptions.is_key)
}

// optional bool is_timestamp = 2;
inline bool TelemetryFieldOptions::has_is_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelemetryFieldOptions::set_has_is_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelemetryFieldOptions::clear_has_is_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelemetryFieldOptions::clear_is_timestamp() {
  is_timestamp_ = false;
  clear_has_is_timestamp();
}
inline bool TelemetryFieldOptions::is_timestamp() const {
  // @@protoc_insertion_point(field_get:TelemetryFieldOptions.is_timestamp)
  return is_timestamp_;
}
inline void TelemetryFieldOptions::set_is_timestamp(bool value) {
  set_has_is_timestamp();
  is_timestamp_ = value;
  // @@protoc_insertion_point(field_set:TelemetryFieldOptions.is_timestamp)
}

// optional bool is_counter = 3;
inline bool TelemetryFieldOptions::has_is_counter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelemetryFieldOptions::set_has_is_counter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelemetryFieldOptions::clear_has_is_counter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelemetryFieldOptions::clear_is_counter() {
  is_counter_ = false;
  clear_has_is_counter();
}
inline bool TelemetryFieldOptions::is_counter() const {
  // @@protoc_insertion_point(field_get:TelemetryFieldOptions.is_counter)
  return is_counter_;
}
inline void TelemetryFieldOptions::set_is_counter(bool value) {
  set_has_is_counter();
  is_counter_ = value;
  // @@protoc_insertion_point(field_set:TelemetryFieldOptions.is_counter)
}

// optional bool is_gauge = 4;
inline bool TelemetryFieldOptions::has_is_gauge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelemetryFieldOptions::set_has_is_gauge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelemetryFieldOptions::clear_has_is_gauge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelemetryFieldOptions::clear_is_gauge() {
  is_gauge_ = false;
  clear_has_is_gauge();
}
inline bool TelemetryFieldOptions::is_gauge() const {
  // @@protoc_insertion_point(field_get:TelemetryFieldOptions.is_gauge)
  return is_gauge_;
}
inline void TelemetryFieldOptions::set_is_gauge(bool value) {
  set_has_is_gauge();
  is_gauge_ = value;
  // @@protoc_insertion_point(field_set:TelemetryFieldOptions.is_gauge)
}

// -------------------------------------------------------------------

// TelemetryStream

// required string system_id = 1;
inline bool TelemetryStream::has_system_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TelemetryStream::set_has_system_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TelemetryStream::clear_has_system_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TelemetryStream::clear_system_id() {
  system_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system_id();
}
inline const ::std::string& TelemetryStream::system_id() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.system_id)
  return system_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryStream::set_system_id(const ::std::string& value) {
  set_has_system_id();
  system_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryStream.system_id)
}
inline void TelemetryStream::set_system_id(const char* value) {
  set_has_system_id();
  system_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryStream.system_id)
}
inline void TelemetryStream::set_system_id(const char* value, size_t size) {
  set_has_system_id();
  system_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryStream.system_id)
}
inline ::std::string* TelemetryStream::mutable_system_id() {
  set_has_system_id();
  // @@protoc_insertion_point(field_mutable:TelemetryStream.system_id)
  return system_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryStream::release_system_id() {
  clear_has_system_id();
  return system_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryStream::set_allocated_system_id(::std::string* system_id) {
  if (system_id != NULL) {
    set_has_system_id();
  } else {
    clear_has_system_id();
  }
  system_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_id);
  // @@protoc_insertion_point(field_set_allocated:TelemetryStream.system_id)
}

// optional uint32 component_id = 2;
inline bool TelemetryStream::has_component_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TelemetryStream::set_has_component_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TelemetryStream::clear_has_component_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TelemetryStream::clear_component_id() {
  component_id_ = 0u;
  clear_has_component_id();
}
inline ::google::protobuf::uint32 TelemetryStream::component_id() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.component_id)
  return component_id_;
}
inline void TelemetryStream::set_component_id(::google::protobuf::uint32 value) {
  set_has_component_id();
  component_id_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.component_id)
}

// optional uint32 sub_component_id = 3;
inline bool TelemetryStream::has_sub_component_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TelemetryStream::set_has_sub_component_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TelemetryStream::clear_has_sub_component_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TelemetryStream::clear_sub_component_id() {
  sub_component_id_ = 0u;
  clear_has_sub_component_id();
}
inline ::google::protobuf::uint32 TelemetryStream::sub_component_id() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.sub_component_id)
  return sub_component_id_;
}
inline void TelemetryStream::set_sub_component_id(::google::protobuf::uint32 value) {
  set_has_sub_component_id();
  sub_component_id_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.sub_component_id)
}

// optional string sensor_name = 4;
inline bool TelemetryStream::has_sensor_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TelemetryStream::set_has_sensor_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TelemetryStream::clear_has_sensor_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TelemetryStream::clear_sensor_name() {
  sensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_name();
}
inline const ::std::string& TelemetryStream::sensor_name() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.sensor_name)
  return sensor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryStream::set_sensor_name(const ::std::string& value) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryStream.sensor_name)
}
inline void TelemetryStream::set_sensor_name(const char* value) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryStream.sensor_name)
}
inline void TelemetryStream::set_sensor_name(const char* value, size_t size) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryStream.sensor_name)
}
inline ::std::string* TelemetryStream::mutable_sensor_name() {
  set_has_sensor_name();
  // @@protoc_insertion_point(field_mutable:TelemetryStream.sensor_name)
  return sensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TelemetryStream::release_sensor_name() {
  clear_has_sensor_name();
  return sensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TelemetryStream::set_allocated_sensor_name(::std::string* sensor_name) {
  if (sensor_name != NULL) {
    set_has_sensor_name();
  } else {
    clear_has_sensor_name();
  }
  sensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_name);
  // @@protoc_insertion_point(field_set_allocated:TelemetryStream.sensor_name)
}

// optional uint32 sequence_number = 5;
inline bool TelemetryStream::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TelemetryStream::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TelemetryStream::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TelemetryStream::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
inline ::google::protobuf::uint32 TelemetryStream::sequence_number() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.sequence_number)
  return sequence_number_;
}
inline void TelemetryStream::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.sequence_number)
}

// optional uint64 timestamp = 6;
inline bool TelemetryStream::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TelemetryStream::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TelemetryStream::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TelemetryStream::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 TelemetryStream::timestamp() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.timestamp)
  return timestamp_;
}
inline void TelemetryStream::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.timestamp)
}

// optional uint32 version_major = 7;
inline bool TelemetryStream::has_version_major() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TelemetryStream::set_has_version_major() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TelemetryStream::clear_has_version_major() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TelemetryStream::clear_version_major() {
  version_major_ = 0u;
  clear_has_version_major();
}
inline ::google::protobuf::uint32 TelemetryStream::version_major() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.version_major)
  return version_major_;
}
inline void TelemetryStream::set_version_major(::google::protobuf::uint32 value) {
  set_has_version_major();
  version_major_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.version_major)
}

// optional uint32 version_minor = 8;
inline bool TelemetryStream::has_version_minor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TelemetryStream::set_has_version_minor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TelemetryStream::clear_has_version_minor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TelemetryStream::clear_version_minor() {
  version_minor_ = 0u;
  clear_has_version_minor();
}
inline ::google::protobuf::uint32 TelemetryStream::version_minor() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.version_minor)
  return version_minor_;
}
inline void TelemetryStream::set_version_minor(::google::protobuf::uint32 value) {
  set_has_version_minor();
  version_minor_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.version_minor)
}

// optional .IETFSensors ietf = 100;
inline bool TelemetryStream::has_ietf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TelemetryStream::set_has_ietf() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TelemetryStream::clear_has_ietf() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TelemetryStream::clear_ietf() {
  if (ietf_ != NULL) ietf_->::IETFSensors::Clear();
  clear_has_ietf();
}
inline const ::IETFSensors& TelemetryStream::ietf() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.ietf)
  return ietf_ != NULL ? *ietf_ : *default_instance_->ietf_;
}
inline ::IETFSensors* TelemetryStream::mutable_ietf() {
  set_has_ietf();
  if (ietf_ == NULL) {
    ietf_ = new ::IETFSensors;
  }
  // @@protoc_insertion_point(field_mutable:TelemetryStream.ietf)
  return ietf_;
}
inline ::IETFSensors* TelemetryStream::release_ietf() {
  clear_has_ietf();
  ::IETFSensors* temp = ietf_;
  ietf_ = NULL;
  return temp;
}
inline void TelemetryStream::set_allocated_ietf(::IETFSensors* ietf) {
  delete ietf_;
  ietf_ = ietf;
  if (ietf) {
    set_has_ietf();
  } else {
    clear_has_ietf();
  }
  // @@protoc_insertion_point(field_set_allocated:TelemetryStream.ietf)
}

// optional .EnterpriseSensors enterprise = 101;
inline bool TelemetryStream::has_enterprise() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TelemetryStream::set_has_enterprise() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TelemetryStream::clear_has_enterprise() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TelemetryStream::clear_enterprise() {
  if (enterprise_ != NULL) enterprise_->::EnterpriseSensors::Clear();
  clear_has_enterprise();
}
inline const ::EnterpriseSensors& TelemetryStream::enterprise() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.enterprise)
  return enterprise_ != NULL ? *enterprise_ : *default_instance_->enterprise_;
}
inline ::EnterpriseSensors* TelemetryStream::mutable_enterprise() {
  set_has_enterprise();
  if (enterprise_ == NULL) {
    enterprise_ = new ::EnterpriseSensors;
  }
  // @@protoc_insertion_point(field_mutable:TelemetryStream.enterprise)
  return enterprise_;
}
inline ::EnterpriseSensors* TelemetryStream::release_enterprise() {
  clear_has_enterprise();
  ::EnterpriseSensors* temp = enterprise_;
  enterprise_ = NULL;
  return temp;
}
inline void TelemetryStream::set_allocated_enterprise(::EnterpriseSensors* enterprise) {
  delete enterprise_;
  enterprise_ = enterprise;
  if (enterprise) {
    set_has_enterprise();
  } else {
    clear_has_enterprise();
  }
  // @@protoc_insertion_point(field_set_allocated:TelemetryStream.enterprise)
}

// -------------------------------------------------------------------

// IETFSensors

// -------------------------------------------------------------------

// EnterpriseSensors

// -------------------------------------------------------------------

// JuniperNetworksSensors

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_telemetry_5ftop_2eproto__INCLUDED
