// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registration_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "registration_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace registration {

namespace {

const ::google::protobuf::Descriptor* RegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRequest_reflection_ = NULL;
struct RegisterRequestOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr json_input_;
  ::google::protobuf::internal::ArenaStringPtr file_input_;
}* RegisterRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RegisterReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_registration_5fservice_2eproto() {
  protobuf_AddDesc_registration_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "registration_service.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterRequest_descriptor_ = file->message_type(0);
  static const int RegisterRequest_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RegisterRequest_default_oneof_instance_, json_input_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RegisterRequest_default_oneof_instance_, file_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, register_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, input_type_),
  };
  RegisterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterRequest_descriptor_,
      RegisterRequest::default_instance_,
      RegisterRequest_offsets_,
      -1,
      -1,
      -1,
      RegisterRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _oneof_case_[0]),
      sizeof(RegisterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRequest, _is_default_instance_));
  RegisterReply_descriptor_ = file->message_type(1);
  static const int RegisterReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReply, error_),
  };
  RegisterReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterReply_descriptor_,
      RegisterReply::default_instance_,
      RegisterReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_registration_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterRequest_descriptor_, &RegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterReply_descriptor_, &RegisterReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_registration_5fservice_2eproto() {
  delete RegisterRequest::default_instance_;
  delete RegisterRequest_default_oneof_instance_;
  delete RegisterRequest_reflection_;
  delete RegisterReply::default_instance_;
  delete RegisterReply_reflection_;
}

void protobuf_AddDesc_registration_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032registration_service.proto\022\014registrati"
    "on\"p\n\017RegisterRequest\022\024\n\njson_input\030\001 \001("
    "\tH\000\022\024\n\nfile_input\030\002 \001(\tH\000\022\016\n\006target\030\003 \001("
    "\t\022\023\n\013register_id\030\004 \001(\tB\014\n\ninput_type\".\n\r"
    "RegisterReply\022\016\n\006result\030\001 \001(\010\022\r\n\005error\030\002"
    " \001(\t2[\n\010Register\022O\n\017RegisterService\022\035.re"
    "gistration.RegisterRequest\032\033.registratio"
    "n.RegisterReply\"\000b\006proto3", 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "registration_service.proto", &protobuf_RegisterTypes);
  RegisterRequest::default_instance_ = new RegisterRequest();
  RegisterRequest_default_oneof_instance_ = new RegisterRequestOneofInstance();
  RegisterReply::default_instance_ = new RegisterReply();
  RegisterRequest::default_instance_->InitAsDefaultInstance();
  RegisterReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_registration_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_registration_5fservice_2eproto {
  StaticDescriptorInitializer_registration_5fservice_2eproto() {
    protobuf_AddDesc_registration_5fservice_2eproto();
  }
} static_descriptor_initializer_registration_5fservice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int RegisterRequest::kJsonInputFieldNumber;
const int RegisterRequest::kFileInputFieldNumber;
const int RegisterRequest::kTargetFieldNumber;
const int RegisterRequest::kRegisterIdFieldNumber;
#endif  // !_MSC_VER

RegisterRequest::RegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:registration.RegisterRequest)
}

void RegisterRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  RegisterRequest_default_oneof_instance_->json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RegisterRequest_default_oneof_instance_->file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:registration.RegisterRequest)
}

void RegisterRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_type();
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:registration.RegisterRequest)
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_input_type()) {
    clear_input_type();
  }
  if (this != default_instance_) {
  }
}

void RegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRequest_descriptor_;
}

const RegisterRequest& RegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registration_5fservice_2eproto();
  return *default_instance_;
}

RegisterRequest* RegisterRequest::default_instance_ = NULL;

RegisterRequest* RegisterRequest::New(::google::protobuf::Arena* arena) const {
  RegisterRequest* n = new RegisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterRequest::clear_input_type() {
  switch(input_type_case()) {
    case kJsonInput: {
      input_type_.json_input_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFileInput: {
      input_type_.file_input_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case INPUT_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INPUT_TYPE_NOT_SET;
}


void RegisterRequest::Clear() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_input_type();
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:registration.RegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string json_input = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_input()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json_input().data(), this->json_input().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "registration.RegisterRequest.json_input"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_input;
        break;
      }

      // optional string file_input = 2;
      case 2: {
        if (tag == 18) {
         parse_file_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_input()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_input().data(), this->file_input().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "registration.RegisterRequest.file_input"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // optional string target = 3;
      case 3: {
        if (tag == 26) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "registration.RegisterRequest.target"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_register_id;
        break;
      }

      // optional string register_id = 4;
      case 4: {
        if (tag == 34) {
         parse_register_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_register_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->register_id().data(), this->register_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "registration.RegisterRequest.register_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:registration.RegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:registration.RegisterRequest)
  return false;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:registration.RegisterRequest)
  // optional string json_input = 1;
  if (has_json_input()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json_input().data(), this->json_input().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registration.RegisterRequest.json_input");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json_input(), output);
  }

  // optional string file_input = 2;
  if (has_file_input()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_input().data(), this->file_input().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registration.RegisterRequest.file_input");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_input(), output);
  }

  // optional string target = 3;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registration.RegisterRequest.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->target(), output);
  }

  // optional string register_id = 4;
  if (this->register_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), this->register_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registration.RegisterRequest.register_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->register_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:registration.RegisterRequest)
}

::google::protobuf::uint8* RegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:registration.RegisterRequest)
  // optional string json_input = 1;
  if (has_json_input()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json_input().data(), this->json_input().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registration.RegisterRequest.json_input");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json_input(), target);
  }

  // optional string file_input = 2;
  if (has_file_input()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_input().data(), this->file_input().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registration.RegisterRequest.file_input");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_input(), target);
  }

  // optional string target = 3;
  if (this->target().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registration.RegisterRequest.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }

  // optional string register_id = 4;
  if (this->register_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->register_id().data(), this->register_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registration.RegisterRequest.register_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->register_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:registration.RegisterRequest)
  return target;
}

int RegisterRequest::ByteSize() const {
  int total_size = 0;

  // optional string target = 3;
  if (this->target().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target());
  }

  // optional string register_id = 4;
  if (this->register_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->register_id());
  }

  switch (input_type_case()) {
    // optional string json_input = 1;
    case kJsonInput: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json_input());
      break;
    }
    // optional string file_input = 2;
    case kFileInput: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_input());
      break;
    }
    case INPUT_TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.input_type_case()) {
    case kJsonInput: {
      set_json_input(from.json_input());
      break;
    }
    case kFileInput: {
      set_file_input(from.file_input());
      break;
    }
    case INPUT_TYPE_NOT_SET: {
      break;
    }
  }
  if (from.target().size() > 0) {

    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  if (from.register_id().size() > 0) {

    register_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.register_id_);
  }
}

void RegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {

  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequest::InternalSwap(RegisterRequest* other) {
  target_.Swap(&other->target_);
  register_id_.Swap(&other->register_id_);
  std::swap(input_type_, other->input_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRequest_descriptor_;
  metadata.reflection = RegisterRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRequest

// optional string json_input = 1;
bool RegisterRequest::has_json_input() const {
  return input_type_case() == kJsonInput;
}
void RegisterRequest::set_has_json_input() {
  _oneof_case_[0] = kJsonInput;
}
void RegisterRequest::clear_json_input() {
  if (has_json_input()) {
    input_type_.json_input_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_input_type();
  }
}
 const ::std::string& RegisterRequest::json_input() const {
  // @@protoc_insertion_point(field_get:registration.RegisterRequest.json_input)
  if (has_json_input()) {
    return input_type_.json_input_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void RegisterRequest::set_json_input(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.json_input)
  if (!has_json_input()) {
    clear_input_type();
    set_has_json_input();
    input_type_.json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.json_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.json_input)
}
 void RegisterRequest::set_json_input(const char* value) {
  if (!has_json_input()) {
    clear_input_type();
    set_has_json_input();
    input_type_.json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.json_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:registration.RegisterRequest.json_input)
}
 void RegisterRequest::set_json_input(const char* value, size_t size) {
  if (!has_json_input()) {
    clear_input_type();
    set_has_json_input();
    input_type_.json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.json_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:registration.RegisterRequest.json_input)
}
 ::std::string* RegisterRequest::mutable_json_input() {
  if (!has_json_input()) {
    clear_input_type();
    set_has_json_input();
    input_type_.json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:registration.RegisterRequest.json_input)
  return input_type_.json_input_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_json_input() {
  if (has_json_input()) {
    clear_has_input_type();
    return input_type_.json_input_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void RegisterRequest::set_allocated_json_input(::std::string* json_input) {
  if (!has_json_input()) {
    input_type_.json_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_input_type();
  if (json_input != NULL) {
    set_has_json_input();
    input_type_.json_input_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        json_input);
  }
  // @@protoc_insertion_point(field_set_allocated:registration.RegisterRequest.json_input)
}

// optional string file_input = 2;
bool RegisterRequest::has_file_input() const {
  return input_type_case() == kFileInput;
}
void RegisterRequest::set_has_file_input() {
  _oneof_case_[0] = kFileInput;
}
void RegisterRequest::clear_file_input() {
  if (has_file_input()) {
    input_type_.file_input_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_input_type();
  }
}
 const ::std::string& RegisterRequest::file_input() const {
  // @@protoc_insertion_point(field_get:registration.RegisterRequest.file_input)
  if (has_file_input()) {
    return input_type_.file_input_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void RegisterRequest::set_file_input(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.file_input)
  if (!has_file_input()) {
    clear_input_type();
    set_has_file_input();
    input_type_.file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.file_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.file_input)
}
 void RegisterRequest::set_file_input(const char* value) {
  if (!has_file_input()) {
    clear_input_type();
    set_has_file_input();
    input_type_.file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.file_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:registration.RegisterRequest.file_input)
}
 void RegisterRequest::set_file_input(const char* value, size_t size) {
  if (!has_file_input()) {
    clear_input_type();
    set_has_file_input();
    input_type_.file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  input_type_.file_input_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:registration.RegisterRequest.file_input)
}
 ::std::string* RegisterRequest::mutable_file_input() {
  if (!has_file_input()) {
    clear_input_type();
    set_has_file_input();
    input_type_.file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:registration.RegisterRequest.file_input)
  return input_type_.file_input_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_file_input() {
  if (has_file_input()) {
    clear_has_input_type();
    return input_type_.file_input_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void RegisterRequest::set_allocated_file_input(::std::string* file_input) {
  if (!has_file_input()) {
    input_type_.file_input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_input_type();
  if (file_input != NULL) {
    set_has_file_input();
    input_type_.file_input_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        file_input);
  }
  // @@protoc_insertion_point(field_set_allocated:registration.RegisterRequest.file_input)
}

// optional string target = 3;
void RegisterRequest::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequest::target() const {
  // @@protoc_insertion_point(field_get:registration.RegisterRequest.target)
  return target_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.target)
}
 void RegisterRequest::set_target(const char* value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:registration.RegisterRequest.target)
}
 void RegisterRequest::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:registration.RegisterRequest.target)
}
 ::std::string* RegisterRequest::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:registration.RegisterRequest.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_target() {
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:registration.RegisterRequest.target)
}

// optional string register_id = 4;
void RegisterRequest::clear_register_id() {
  register_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequest::register_id() const {
  // @@protoc_insertion_point(field_get:registration.RegisterRequest.register_id)
  return register_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_register_id(const ::std::string& value) {
  
  register_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:registration.RegisterRequest.register_id)
}
 void RegisterRequest::set_register_id(const char* value) {
  
  register_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:registration.RegisterRequest.register_id)
}
 void RegisterRequest::set_register_id(const char* value, size_t size) {
  
  register_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:registration.RegisterRequest.register_id)
}
 ::std::string* RegisterRequest::mutable_register_id() {
  
  // @@protoc_insertion_point(field_mutable:registration.RegisterRequest.register_id)
  return register_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_register_id() {
  
  return register_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_register_id(::std::string* register_id) {
  if (register_id != NULL) {
    
  } else {
    
  }
  register_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), register_id);
  // @@protoc_insertion_point(field_set_allocated:registration.RegisterRequest.register_id)
}

bool RegisterRequest::has_input_type() const {
  return input_type_case() != INPUT_TYPE_NOT_SET;
}
void RegisterRequest::clear_has_input_type() {
  _oneof_case_[0] = INPUT_TYPE_NOT_SET;
}
RegisterRequest::InputTypeCase RegisterRequest::input_type_case() const {
  return RegisterRequest::InputTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RegisterReply::kResultFieldNumber;
const int RegisterReply::kErrorFieldNumber;
#endif  // !_MSC_VER

RegisterReply::RegisterReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:registration.RegisterReply)
}

void RegisterReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterReply::RegisterReply(const RegisterReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:registration.RegisterReply)
}

void RegisterReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = false;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterReply::~RegisterReply() {
  // @@protoc_insertion_point(destructor:registration.RegisterReply)
  SharedDtor();
}

void RegisterReply::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RegisterReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterReply_descriptor_;
}

const RegisterReply& RegisterReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_registration_5fservice_2eproto();
  return *default_instance_;
}

RegisterReply* RegisterReply::default_instance_ = NULL;

RegisterReply* RegisterReply::New(::google::protobuf::Arena* arena) const {
  RegisterReply* n = new RegisterReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterReply::Clear() {
  result_ = false;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RegisterReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:registration.RegisterReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "registration.RegisterReply.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:registration.RegisterReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:registration.RegisterReply)
  return false;
#undef DO_
}

void RegisterReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:registration.RegisterReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registration.RegisterReply.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:registration.RegisterReply)
}

::google::protobuf::uint8* RegisterReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:registration.RegisterReply)
  // optional bool result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "registration.RegisterReply.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:registration.RegisterReply)
  return target;
}

int RegisterReply::ByteSize() const {
  int total_size = 0;

  // optional bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterReply::MergeFrom(const RegisterReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void RegisterReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterReply::CopyFrom(const RegisterReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterReply::IsInitialized() const {

  return true;
}

void RegisterReply::Swap(RegisterReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterReply::InternalSwap(RegisterReply* other) {
  std::swap(result_, other->result_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterReply_descriptor_;
  metadata.reflection = RegisterReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterReply

// optional bool result = 1;
void RegisterReply::clear_result() {
  result_ = false;
}
 bool RegisterReply::result() const {
  // @@protoc_insertion_point(field_get:registration.RegisterReply.result)
  return result_;
}
 void RegisterReply::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:registration.RegisterReply.result)
}

// optional string error = 2;
void RegisterReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterReply::error() const {
  // @@protoc_insertion_point(field_get:registration.RegisterReply.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:registration.RegisterReply.error)
}
 void RegisterReply::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:registration.RegisterReply.error)
}
 void RegisterReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:registration.RegisterReply.error)
}
 ::std::string* RegisterReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:registration.RegisterReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterReply::release_error() {
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:registration.RegisterReply.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace registration

// @@protoc_insertion_point(global_scope)
