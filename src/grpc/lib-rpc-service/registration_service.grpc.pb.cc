// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: registration_service.proto

#include "registration_service.pb.h"
#include "registration_service.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace registration {

static const char* Register_method_names[] = {
  "/registration.Register/RegisterService",
};

std::unique_ptr< Register::Stub> Register::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Register::Stub> stub(new Register::Stub(channel));
  return stub;
}

Register::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_RegisterService_(Register_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Register::Stub::RegisterService(::grpc::ClientContext* context, const ::registration::RegisterRequest& request, ::registration::RegisterReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::registration::RegisterReply>* Register::Stub::AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::registration::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::registration::RegisterReply>(channel_.get(), cq, rpcmethod_RegisterService_, context, request);
}

Register::AsyncService::AsyncService() : ::grpc::AsynchronousService(Register_method_names, 1) {}

Register::Service::~Service() {
  delete service_;
}

::grpc::Status Register::Service::RegisterService(::grpc::ServerContext* context, const ::registration::RegisterRequest* request, ::registration::RegisterReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void Register::AsyncService::RequestRegisterService(::grpc::ServerContext* context, ::registration::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::registration::RegisterReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* Register::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Register_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Register::Service, ::registration::RegisterRequest, ::registration::RegisterReply>(
          std::mem_fn(&Register::Service::RegisterService), this)));
  return service_;
}


}  // namespace registration

