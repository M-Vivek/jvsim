// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "agent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace agent {

namespace {

const ::google::protobuf::Descriptor* SubscriptionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnSubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnSubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenConfigData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenConfigData_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReturnCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_agent_2eproto() {
  protobuf_AddDesc_agent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "agent.proto");
  GOOGLE_CHECK(file != NULL);
  SubscriptionRequest_descriptor_ = file->message_type(0);
  static const int SubscriptionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequest, path_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequest, limit_records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequest, limit_time_seconds_),
  };
  SubscriptionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscriptionRequest_descriptor_,
      SubscriptionRequest::default_instance_,
      SubscriptionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscriptionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequest, _is_default_instance_));
  UnSubscribeRequest_descriptor_ = file->message_type(1);
  static const int UnSubscribeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribeRequest, id_),
  };
  UnSubscribeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnSubscribeRequest_descriptor_,
      UnSubscribeRequest::default_instance_,
      UnSubscribeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnSubscribeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnSubscribeRequest, _is_default_instance_));
  GetRequest_descriptor_ = file->message_type(2);
  static const int GetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, verbosity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, id_),
  };
  GetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _is_default_instance_));
  Reply_descriptor_ = file->message_type(3);
  static const int Reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, code_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, path_list_),
  };
  Reply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      -1,
      -1,
      -1,
      sizeof(Reply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _is_default_instance_));
  Path_descriptor_ = file->message_type(4);
  static const int Path_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, sample_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, suppress_unchanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, max_silent_interval_),
  };
  Path_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      -1,
      -1,
      -1,
      sizeof(Path),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _is_default_instance_));
  OpenConfigData_descriptor_ = file->message_type(5);
  static const int OpenConfigData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenConfigData, system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenConfigData, component_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenConfigData, sub_component_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenConfigData, sensor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenConfigData, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenConfigData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenConfigData, kv_),
  };
  OpenConfigData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpenConfigData_descriptor_,
      OpenConfigData::default_instance_,
      OpenConfigData_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpenConfigData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenConfigData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenConfigData, _is_default_instance_));
  KeyValue_descriptor_ = file->message_type(6);
  static const int KeyValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, str_value_),
  };
  KeyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _is_default_instance_));
  ReturnCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_agent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscriptionRequest_descriptor_, &SubscriptionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnSubscribeRequest_descriptor_, &UnSubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpenConfigData_descriptor_, &OpenConfigData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyValue_descriptor_, &KeyValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_agent_2eproto() {
  delete SubscriptionRequest::default_instance_;
  delete SubscriptionRequest_reflection_;
  delete UnSubscribeRequest::default_instance_;
  delete UnSubscribeRequest_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete Reply::default_instance_;
  delete Reply_reflection_;
  delete Path::default_instance_;
  delete Path_reflection_;
  delete OpenConfigData::default_instance_;
  delete OpenConfigData_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
}

void protobuf_AddDesc_agent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013agent.proto\022\005agent\"h\n\023SubscriptionRequ"
    "est\022\036\n\tpath_list\030\001 \003(\0132\013.agent.Path\022\025\n\rl"
    "imit_records\030\002 \001(\005\022\032\n\022limit_time_seconds"
    "\030\003 \001(\005\" \n\022UnSubscribeRequest\022\n\n\002id\030\001 \001(\005"
    "\"+\n\nGetRequest\022\021\n\tverbosity\030\001 \001(\005\022\n\n\002id\030"
    "\002 \001(\005\"Z\n\005Reply\022\037\n\004code\030\001 \001(\0162\021.agent.Ret"
    "urnCode\022\020\n\010code_str\030\002 \001(\t\022\036\n\tpath_list\030\003"
    " \003(\0132\013.agent.Path\"w\n\004Path\022\014\n\004path\030\001 \001(\t\022"
    "\016\n\006filter\030\002 \001(\t\022\030\n\020sample_frequency\030\003 \001("
    "\r\022\032\n\022suppress_unchanged\030\004 \001(\010\022\033\n\023max_sil"
    "ent_interval\030\005 \001(\r\"\261\001\n\016OpenConfigData\022\021\n"
    "\tsystem_id\030\001 \001(\t\022\024\n\014component_id\030\002 \001(\r\022\030"
    "\n\020sub_component_id\030\003 \001(\r\022\023\n\013sensor_name\030"
    "\004 \001(\t\022\027\n\017sequence_number\030\005 \001(\r\022\021\n\ttimest"
    "amp\030\006 \001(\004\022\033\n\002kv\030\007 \003(\0132\017.agent.KeyValue\"="
    "\n\010KeyValue\022\013\n\003key\030\001 \001(\t\022\021\n\tint_value\030\002 \001"
    "(\003\022\021\n\tstr_value\030\003 \001(\t*P\n\nReturnCode\022\010\n\004N"
    "ONE\020\000\022\006\n\002OK\020\001\022\031\n\025NO_SUBSCRIPTION_ENTRY\020\002"
    "\022\025\n\021UNSUPPORTED_PATHS\020\0032\254\002\n\005Agent\022K\n\022tel"
    "emetrySubscribe\022\032.agent.SubscriptionRequ"
    "est\032\025.agent.OpenConfigData\"\0000\001\022A\n\024teleme"
    "tryUnSubscribe\022\031.agent.UnSubscribeReques"
    "t\032\014.agent.Reply\"\000\022G\n\031telemetrySubscripti"
    "onsGet\022\021.agent.GetRequest\032\025.agent.OpenCo"
    "nfigData\"\000\022J\n\034telemetryOperationalStateG"
    "et\022\021.agent.GetRequest\032\025.agent.OpenConfig"
    "Data\"\000b\006proto3", 1054);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "agent.proto", &protobuf_RegisterTypes);
  SubscriptionRequest::default_instance_ = new SubscriptionRequest();
  UnSubscribeRequest::default_instance_ = new UnSubscribeRequest();
  GetRequest::default_instance_ = new GetRequest();
  Reply::default_instance_ = new Reply();
  Path::default_instance_ = new Path();
  OpenConfigData::default_instance_ = new OpenConfigData();
  KeyValue::default_instance_ = new KeyValue();
  SubscriptionRequest::default_instance_->InitAsDefaultInstance();
  UnSubscribeRequest::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  Path::default_instance_->InitAsDefaultInstance();
  OpenConfigData::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_agent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_agent_2eproto {
  StaticDescriptorInitializer_agent_2eproto() {
    protobuf_AddDesc_agent_2eproto();
  }
} static_descriptor_initializer_agent_2eproto_;
const ::google::protobuf::EnumDescriptor* ReturnCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnCode_descriptor_;
}
bool ReturnCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionRequest::kPathListFieldNumber;
const int SubscriptionRequest::kLimitRecordsFieldNumber;
const int SubscriptionRequest::kLimitTimeSecondsFieldNumber;
#endif  // !_MSC_VER

SubscriptionRequest::SubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.SubscriptionRequest)
}

void SubscriptionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SubscriptionRequest::SubscriptionRequest(const SubscriptionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.SubscriptionRequest)
}

void SubscriptionRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  limit_records_ = 0;
  limit_time_seconds_ = 0;
}

SubscriptionRequest::~SubscriptionRequest() {
  // @@protoc_insertion_point(destructor:agent.SubscriptionRequest)
  SharedDtor();
}

void SubscriptionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionRequest_descriptor_;
}

const SubscriptionRequest& SubscriptionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

SubscriptionRequest* SubscriptionRequest::default_instance_ = NULL;

SubscriptionRequest* SubscriptionRequest::New(::google::protobuf::Arena* arena) const {
  SubscriptionRequest* n = new SubscriptionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscriptionRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SubscriptionRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(limit_records_, limit_time_seconds_);

#undef ZR_HELPER_
#undef ZR_

  path_list_.Clear();
}

bool SubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.SubscriptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .agent.Path path_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_path_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_path_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_limit_records;
        break;
      }

      // optional int32 limit_records = 2;
      case 2: {
        if (tag == 16) {
         parse_limit_records:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_records_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit_time_seconds;
        break;
      }

      // optional int32 limit_time_seconds = 3;
      case 3: {
        if (tag == 24) {
         parse_limit_time_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_time_seconds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.SubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.SubscriptionRequest)
  return false;
#undef DO_
}

void SubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.SubscriptionRequest)
  // repeated .agent.Path path_list = 1;
  for (unsigned int i = 0, n = this->path_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path_list(i), output);
  }

  // optional int32 limit_records = 2;
  if (this->limit_records() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit_records(), output);
  }

  // optional int32 limit_time_seconds = 3;
  if (this->limit_time_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit_time_seconds(), output);
  }

  // @@protoc_insertion_point(serialize_end:agent.SubscriptionRequest)
}

::google::protobuf::uint8* SubscriptionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.SubscriptionRequest)
  // repeated .agent.Path path_list = 1;
  for (unsigned int i = 0, n = this->path_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path_list(i), target);
  }

  // optional int32 limit_records = 2;
  if (this->limit_records() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit_records(), target);
  }

  // optional int32 limit_time_seconds = 3;
  if (this->limit_time_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit_time_seconds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agent.SubscriptionRequest)
  return target;
}

int SubscriptionRequest::ByteSize() const {
  int total_size = 0;

  // optional int32 limit_records = 2;
  if (this->limit_records() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_records());
  }

  // optional int32 limit_time_seconds = 3;
  if (this->limit_time_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_time_seconds());
  }

  // repeated .agent.Path path_list = 1;
  total_size += 1 * this->path_list_size();
  for (int i = 0; i < this->path_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubscriptionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SubscriptionRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionRequest::MergeFrom(const SubscriptionRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  path_list_.MergeFrom(from.path_list_);
  if (from.limit_records() != 0) {
    set_limit_records(from.limit_records());
  }
  if (from.limit_time_seconds() != 0) {
    set_limit_time_seconds(from.limit_time_seconds());
  }
}

void SubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionRequest::CopyFrom(const SubscriptionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRequest::IsInitialized() const {

  return true;
}

void SubscriptionRequest::Swap(SubscriptionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscriptionRequest::InternalSwap(SubscriptionRequest* other) {
  path_list_.UnsafeArenaSwap(&other->path_list_);
  std::swap(limit_records_, other->limit_records_);
  std::swap(limit_time_seconds_, other->limit_time_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubscriptionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionRequest_descriptor_;
  metadata.reflection = SubscriptionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscriptionRequest

// repeated .agent.Path path_list = 1;
int SubscriptionRequest::path_list_size() const {
  return path_list_.size();
}
void SubscriptionRequest::clear_path_list() {
  path_list_.Clear();
}
const ::agent::Path& SubscriptionRequest::path_list(int index) const {
  // @@protoc_insertion_point(field_get:agent.SubscriptionRequest.path_list)
  return path_list_.Get(index);
}
::agent::Path* SubscriptionRequest::mutable_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:agent.SubscriptionRequest.path_list)
  return path_list_.Mutable(index);
}
::agent::Path* SubscriptionRequest::add_path_list() {
  // @@protoc_insertion_point(field_add:agent.SubscriptionRequest.path_list)
  return path_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::agent::Path >*
SubscriptionRequest::mutable_path_list() {
  // @@protoc_insertion_point(field_mutable_list:agent.SubscriptionRequest.path_list)
  return &path_list_;
}
const ::google::protobuf::RepeatedPtrField< ::agent::Path >&
SubscriptionRequest::path_list() const {
  // @@protoc_insertion_point(field_list:agent.SubscriptionRequest.path_list)
  return path_list_;
}

// optional int32 limit_records = 2;
void SubscriptionRequest::clear_limit_records() {
  limit_records_ = 0;
}
 ::google::protobuf::int32 SubscriptionRequest::limit_records() const {
  // @@protoc_insertion_point(field_get:agent.SubscriptionRequest.limit_records)
  return limit_records_;
}
 void SubscriptionRequest::set_limit_records(::google::protobuf::int32 value) {
  
  limit_records_ = value;
  // @@protoc_insertion_point(field_set:agent.SubscriptionRequest.limit_records)
}

// optional int32 limit_time_seconds = 3;
void SubscriptionRequest::clear_limit_time_seconds() {
  limit_time_seconds_ = 0;
}
 ::google::protobuf::int32 SubscriptionRequest::limit_time_seconds() const {
  // @@protoc_insertion_point(field_get:agent.SubscriptionRequest.limit_time_seconds)
  return limit_time_seconds_;
}
 void SubscriptionRequest::set_limit_time_seconds(::google::protobuf::int32 value) {
  
  limit_time_seconds_ = value;
  // @@protoc_insertion_point(field_set:agent.SubscriptionRequest.limit_time_seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UnSubscribeRequest::kIdFieldNumber;
#endif  // !_MSC_VER

UnSubscribeRequest::UnSubscribeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.UnSubscribeRequest)
}

void UnSubscribeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UnSubscribeRequest::UnSubscribeRequest(const UnSubscribeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.UnSubscribeRequest)
}

void UnSubscribeRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
}

UnSubscribeRequest::~UnSubscribeRequest() {
  // @@protoc_insertion_point(destructor:agent.UnSubscribeRequest)
  SharedDtor();
}

void UnSubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnSubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnSubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnSubscribeRequest_descriptor_;
}

const UnSubscribeRequest& UnSubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

UnSubscribeRequest* UnSubscribeRequest::default_instance_ = NULL;

UnSubscribeRequest* UnSubscribeRequest::New(::google::protobuf::Arena* arena) const {
  UnSubscribeRequest* n = new UnSubscribeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnSubscribeRequest::Clear() {
  id_ = 0;
}

bool UnSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.UnSubscribeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.UnSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.UnSubscribeRequest)
  return false;
#undef DO_
}

void UnSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.UnSubscribeRequest)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:agent.UnSubscribeRequest)
}

::google::protobuf::uint8* UnSubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.UnSubscribeRequest)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agent.UnSubscribeRequest)
  return target;
}

int UnSubscribeRequest::ByteSize() const {
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UnSubscribeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnSubscribeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnSubscribeRequest::MergeFrom(const UnSubscribeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void UnSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnSubscribeRequest::CopyFrom(const UnSubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnSubscribeRequest::IsInitialized() const {

  return true;
}

void UnSubscribeRequest::Swap(UnSubscribeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnSubscribeRequest::InternalSwap(UnSubscribeRequest* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnSubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnSubscribeRequest_descriptor_;
  metadata.reflection = UnSubscribeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnSubscribeRequest

// optional int32 id = 1;
void UnSubscribeRequest::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 UnSubscribeRequest::id() const {
  // @@protoc_insertion_point(field_get:agent.UnSubscribeRequest.id)
  return id_;
}
 void UnSubscribeRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:agent.UnSubscribeRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRequest::kVerbosityFieldNumber;
const int GetRequest::kIdFieldNumber;
#endif  // !_MSC_VER

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.GetRequest)
}

void GetRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  verbosity_ = 0;
  id_ = 0;
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:agent.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New(::google::protobuf::Arena* arena) const {
  GetRequest* n = new GetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(verbosity_, id_);

#undef ZR_HELPER_
#undef ZR_

}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 verbosity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verbosity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.GetRequest)
  // optional int32 verbosity = 1;
  if (this->verbosity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->verbosity(), output);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:agent.GetRequest)
}

::google::protobuf::uint8* GetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.GetRequest)
  // optional int32 verbosity = 1;
  if (this->verbosity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->verbosity(), target);
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agent.GetRequest)
  return target;
}

int GetRequest::ByteSize() const {
  int total_size = 0;

  // optional int32 verbosity = 1;
  if (this->verbosity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->verbosity());
  }

  // optional int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.verbosity() != 0) {
    set_verbosity(from.verbosity());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  std::swap(verbosity_, other->verbosity_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRequest

// optional int32 verbosity = 1;
void GetRequest::clear_verbosity() {
  verbosity_ = 0;
}
 ::google::protobuf::int32 GetRequest::verbosity() const {
  // @@protoc_insertion_point(field_get:agent.GetRequest.verbosity)
  return verbosity_;
}
 void GetRequest::set_verbosity(::google::protobuf::int32 value) {
  
  verbosity_ = value;
  // @@protoc_insertion_point(field_set:agent.GetRequest.verbosity)
}

// optional int32 id = 2;
void GetRequest::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 GetRequest::id() const {
  // @@protoc_insertion_point(field_get:agent.GetRequest.id)
  return id_;
}
 void GetRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:agent.GetRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Reply::kCodeFieldNumber;
const int Reply::kCodeStrFieldNumber;
const int Reply::kPathListFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.Reply)
}

void Reply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.Reply)
}

void Reply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  code_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:agent.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  code_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New(::google::protobuf::Arena* arena) const {
  Reply* n = new Reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reply::Clear() {
  code_ = 0;
  code_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_list_.Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .agent.ReturnCode code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::agent::ReturnCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_code_str;
        break;
      }

      // optional string code_str = 2;
      case 2: {
        if (tag == 18) {
         parse_code_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code_str().data(), this->code_str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agent.Reply.code_str"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path_list;
        break;
      }

      // repeated .agent.Path path_list = 3;
      case 3: {
        if (tag == 26) {
         parse_path_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_path_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_path_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.Reply)
  // optional .agent.ReturnCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string code_str = 2;
  if (this->code_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code_str().data(), this->code_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.Reply.code_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code_str(), output);
  }

  // repeated .agent.Path path_list = 3;
  for (unsigned int i = 0, n = this->path_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:agent.Reply)
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.Reply)
  // optional .agent.ReturnCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string code_str = 2;
  if (this->code_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code_str().data(), this->code_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.Reply.code_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code_str(), target);
  }

  // repeated .agent.Path path_list = 3;
  for (unsigned int i = 0, n = this->path_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->path_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agent.Reply)
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;

  // optional .agent.ReturnCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  // optional string code_str = 2;
  if (this->code_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code_str());
  }

  // repeated .agent.Path path_list = 3;
  total_size += 1 * this->path_list_size();
  for (int i = 0; i < this->path_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Reply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Reply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  path_list_.MergeFrom(from.path_list_);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.code_str().size() > 0) {

    code_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_str_);
  }
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {

  return true;
}

void Reply::Swap(Reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply::InternalSwap(Reply* other) {
  std::swap(code_, other->code_);
  code_str_.Swap(&other->code_str_);
  path_list_.UnsafeArenaSwap(&other->path_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reply

// optional .agent.ReturnCode code = 1;
void Reply::clear_code() {
  code_ = 0;
}
 ::agent::ReturnCode Reply::code() const {
  // @@protoc_insertion_point(field_get:agent.Reply.code)
  return static_cast< ::agent::ReturnCode >(code_);
}
 void Reply::set_code(::agent::ReturnCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:agent.Reply.code)
}

// optional string code_str = 2;
void Reply::clear_code_str() {
  code_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Reply::code_str() const {
  // @@protoc_insertion_point(field_get:agent.Reply.code_str)
  return code_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reply::set_code_str(const ::std::string& value) {
  
  code_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agent.Reply.code_str)
}
 void Reply::set_code_str(const char* value) {
  
  code_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agent.Reply.code_str)
}
 void Reply::set_code_str(const char* value, size_t size) {
  
  code_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agent.Reply.code_str)
}
 ::std::string* Reply::mutable_code_str() {
  
  // @@protoc_insertion_point(field_mutable:agent.Reply.code_str)
  return code_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Reply::release_code_str() {
  
  return code_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reply::set_allocated_code_str(::std::string* code_str) {
  if (code_str != NULL) {
    
  } else {
    
  }
  code_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_str);
  // @@protoc_insertion_point(field_set_allocated:agent.Reply.code_str)
}

// repeated .agent.Path path_list = 3;
int Reply::path_list_size() const {
  return path_list_.size();
}
void Reply::clear_path_list() {
  path_list_.Clear();
}
const ::agent::Path& Reply::path_list(int index) const {
  // @@protoc_insertion_point(field_get:agent.Reply.path_list)
  return path_list_.Get(index);
}
::agent::Path* Reply::mutable_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:agent.Reply.path_list)
  return path_list_.Mutable(index);
}
::agent::Path* Reply::add_path_list() {
  // @@protoc_insertion_point(field_add:agent.Reply.path_list)
  return path_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::agent::Path >*
Reply::mutable_path_list() {
  // @@protoc_insertion_point(field_mutable_list:agent.Reply.path_list)
  return &path_list_;
}
const ::google::protobuf::RepeatedPtrField< ::agent::Path >&
Reply::path_list() const {
  // @@protoc_insertion_point(field_list:agent.Reply.path_list)
  return path_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Path::kPathFieldNumber;
const int Path::kFilterFieldNumber;
const int Path::kSampleFrequencyFieldNumber;
const int Path::kSuppressUnchangedFieldNumber;
const int Path::kMaxSilentIntervalFieldNumber;
#endif  // !_MSC_VER

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.Path)
}

void Path::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Path::Path(const Path& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.Path)
}

void Path::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_frequency_ = 0u;
  suppress_unchanged_ = false;
  max_silent_interval_ = 0u;
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:agent.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Path*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sample_frequency_, max_silent_interval_);
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agent.Path.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }

      // optional string filter = 2;
      case 2: {
        if (tag == 18) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agent.Path.filter"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sample_frequency;
        break;
      }

      // optional uint32 sample_frequency = 3;
      case 3: {
        if (tag == 24) {
         parse_sample_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_frequency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_suppress_unchanged;
        break;
      }

      // optional bool suppress_unchanged = 4;
      case 4: {
        if (tag == 32) {
         parse_suppress_unchanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_unchanged_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_silent_interval;
        break;
      }

      // optional uint32 max_silent_interval = 5;
      case 5: {
        if (tag == 40) {
         parse_max_silent_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_silent_interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.Path)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.Path.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.Path.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  // optional uint32 sample_frequency = 3;
  if (this->sample_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sample_frequency(), output);
  }

  // optional bool suppress_unchanged = 4;
  if (this->suppress_unchanged() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->suppress_unchanged(), output);
  }

  // optional uint32 max_silent_interval = 5;
  if (this->max_silent_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_silent_interval(), output);
  }

  // @@protoc_insertion_point(serialize_end:agent.Path)
}

::google::protobuf::uint8* Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.Path)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.Path.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string filter = 2;
  if (this->filter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.Path.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  // optional uint32 sample_frequency = 3;
  if (this->sample_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sample_frequency(), target);
  }

  // optional bool suppress_unchanged = 4;
  if (this->suppress_unchanged() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->suppress_unchanged(), target);
  }

  // optional uint32 max_silent_interval = 5;
  if (this->max_silent_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_silent_interval(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agent.Path)
  return target;
}

int Path::ByteSize() const {
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional string filter = 2;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  // optional uint32 sample_frequency = 3;
  if (this->sample_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sample_frequency());
  }

  // optional bool suppress_unchanged = 4;
  if (this->suppress_unchanged() != 0) {
    total_size += 1 + 1;
  }

  // optional uint32 max_silent_interval = 5;
  if (this->max_silent_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_silent_interval());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Path* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.filter().size() > 0) {

    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.sample_frequency() != 0) {
    set_sample_frequency(from.sample_frequency());
  }
  if (from.suppress_unchanged() != 0) {
    set_suppress_unchanged(from.suppress_unchanged());
  }
  if (from.max_silent_interval() != 0) {
    set_max_silent_interval(from.max_silent_interval());
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {

  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  path_.Swap(&other->path_);
  filter_.Swap(&other->filter_);
  std::swap(sample_frequency_, other->sample_frequency_);
  std::swap(suppress_unchanged_, other->suppress_unchanged_);
  std::swap(max_silent_interval_, other->max_silent_interval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Path

// optional string path = 1;
void Path::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Path::path() const {
  // @@protoc_insertion_point(field_get:agent.Path.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agent.Path.path)
}
 void Path::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agent.Path.path)
}
 void Path::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agent.Path.path)
}
 ::std::string* Path::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:agent.Path.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Path::release_path() {
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:agent.Path.path)
}

// optional string filter = 2;
void Path::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Path::filter() const {
  // @@protoc_insertion_point(field_get:agent.Path.filter)
  return filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agent.Path.filter)
}
 void Path::set_filter(const char* value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agent.Path.filter)
}
 void Path::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agent.Path.filter)
}
 ::std::string* Path::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:agent.Path.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Path::release_filter() {
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Path::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:agent.Path.filter)
}

// optional uint32 sample_frequency = 3;
void Path::clear_sample_frequency() {
  sample_frequency_ = 0u;
}
 ::google::protobuf::uint32 Path::sample_frequency() const {
  // @@protoc_insertion_point(field_get:agent.Path.sample_frequency)
  return sample_frequency_;
}
 void Path::set_sample_frequency(::google::protobuf::uint32 value) {
  
  sample_frequency_ = value;
  // @@protoc_insertion_point(field_set:agent.Path.sample_frequency)
}

// optional bool suppress_unchanged = 4;
void Path::clear_suppress_unchanged() {
  suppress_unchanged_ = false;
}
 bool Path::suppress_unchanged() const {
  // @@protoc_insertion_point(field_get:agent.Path.suppress_unchanged)
  return suppress_unchanged_;
}
 void Path::set_suppress_unchanged(bool value) {
  
  suppress_unchanged_ = value;
  // @@protoc_insertion_point(field_set:agent.Path.suppress_unchanged)
}

// optional uint32 max_silent_interval = 5;
void Path::clear_max_silent_interval() {
  max_silent_interval_ = 0u;
}
 ::google::protobuf::uint32 Path::max_silent_interval() const {
  // @@protoc_insertion_point(field_get:agent.Path.max_silent_interval)
  return max_silent_interval_;
}
 void Path::set_max_silent_interval(::google::protobuf::uint32 value) {
  
  max_silent_interval_ = value;
  // @@protoc_insertion_point(field_set:agent.Path.max_silent_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int OpenConfigData::kSystemIdFieldNumber;
const int OpenConfigData::kComponentIdFieldNumber;
const int OpenConfigData::kSubComponentIdFieldNumber;
const int OpenConfigData::kSensorNameFieldNumber;
const int OpenConfigData::kSequenceNumberFieldNumber;
const int OpenConfigData::kTimestampFieldNumber;
const int OpenConfigData::kKvFieldNumber;
#endif  // !_MSC_VER

OpenConfigData::OpenConfigData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.OpenConfigData)
}

void OpenConfigData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

OpenConfigData::OpenConfigData(const OpenConfigData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.OpenConfigData)
}

void OpenConfigData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  system_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  component_id_ = 0u;
  sub_component_id_ = 0u;
  sensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
}

OpenConfigData::~OpenConfigData() {
  // @@protoc_insertion_point(destructor:agent.OpenConfigData)
  SharedDtor();
}

void OpenConfigData::SharedDtor() {
  system_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OpenConfigData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenConfigData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenConfigData_descriptor_;
}

const OpenConfigData& OpenConfigData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

OpenConfigData* OpenConfigData::default_instance_ = NULL;

OpenConfigData* OpenConfigData::New(::google::protobuf::Arena* arena) const {
  OpenConfigData* n = new OpenConfigData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpenConfigData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpenConfigData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(component_id_, sub_component_id_);
  system_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  kv_.Clear();
}

bool OpenConfigData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.OpenConfigData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string system_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_id().data(), this->system_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agent.OpenConfigData.system_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_component_id;
        break;
      }

      // optional uint32 component_id = 2;
      case 2: {
        if (tag == 16) {
         parse_component_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_component_id;
        break;
      }

      // optional uint32 sub_component_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_component_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_component_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sensor_name;
        break;
      }

      // optional string sensor_name = 4;
      case 4: {
        if (tag == 34) {
         parse_sensor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensor_name().data(), this->sensor_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agent.OpenConfigData.sensor_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sequence_number;
        break;
      }

      // optional uint32 sequence_number = 5;
      case 5: {
        if (tag == 40) {
         parse_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 6;
      case 6: {
        if (tag == 48) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_kv;
        break;
      }

      // repeated .agent.KeyValue kv = 7;
      case 7: {
        if (tag == 58) {
         parse_kv:
          DO_(input->IncrementRecursionDepth());
         parse_loop_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_kv;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.OpenConfigData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.OpenConfigData)
  return false;
#undef DO_
}

void OpenConfigData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.OpenConfigData)
  // optional string system_id = 1;
  if (this->system_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_id().data(), this->system_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.OpenConfigData.system_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->system_id(), output);
  }

  // optional uint32 component_id = 2;
  if (this->component_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->component_id(), output);
  }

  // optional uint32 sub_component_id = 3;
  if (this->sub_component_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_component_id(), output);
  }

  // optional string sensor_name = 4;
  if (this->sensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_name().data(), this->sensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.OpenConfigData.sensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sensor_name(), output);
  }

  // optional uint32 sequence_number = 5;
  if (this->sequence_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sequence_number(), output);
  }

  // optional uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp(), output);
  }

  // repeated .agent.KeyValue kv = 7;
  for (unsigned int i = 0, n = this->kv_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->kv(i), output);
  }

  // @@protoc_insertion_point(serialize_end:agent.OpenConfigData)
}

::google::protobuf::uint8* OpenConfigData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.OpenConfigData)
  // optional string system_id = 1;
  if (this->system_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_id().data(), this->system_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.OpenConfigData.system_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->system_id(), target);
  }

  // optional uint32 component_id = 2;
  if (this->component_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->component_id(), target);
  }

  // optional uint32 sub_component_id = 3;
  if (this->sub_component_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_component_id(), target);
  }

  // optional string sensor_name = 4;
  if (this->sensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_name().data(), this->sensor_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.OpenConfigData.sensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sensor_name(), target);
  }

  // optional uint32 sequence_number = 5;
  if (this->sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sequence_number(), target);
  }

  // optional uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp(), target);
  }

  // repeated .agent.KeyValue kv = 7;
  for (unsigned int i = 0, n = this->kv_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->kv(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agent.OpenConfigData)
  return target;
}

int OpenConfigData::ByteSize() const {
  int total_size = 0;

  // optional string system_id = 1;
  if (this->system_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_id());
  }

  // optional uint32 component_id = 2;
  if (this->component_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->component_id());
  }

  // optional uint32 sub_component_id = 3;
  if (this->sub_component_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sub_component_id());
  }

  // optional string sensor_name = 4;
  if (this->sensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_name());
  }

  // optional uint32 sequence_number = 5;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence_number());
  }

  // optional uint64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // repeated .agent.KeyValue kv = 7;
  total_size += 1 * this->kv_size();
  for (int i = 0; i < this->kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kv(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenConfigData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpenConfigData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenConfigData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenConfigData::MergeFrom(const OpenConfigData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  kv_.MergeFrom(from.kv_);
  if (from.system_id().size() > 0) {

    system_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_id_);
  }
  if (from.component_id() != 0) {
    set_component_id(from.component_id());
  }
  if (from.sub_component_id() != 0) {
    set_sub_component_id(from.sub_component_id());
  }
  if (from.sensor_name().size() > 0) {

    sensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_name_);
  }
  if (from.sequence_number() != 0) {
    set_sequence_number(from.sequence_number());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void OpenConfigData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenConfigData::CopyFrom(const OpenConfigData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenConfigData::IsInitialized() const {

  return true;
}

void OpenConfigData::Swap(OpenConfigData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenConfigData::InternalSwap(OpenConfigData* other) {
  system_id_.Swap(&other->system_id_);
  std::swap(component_id_, other->component_id_);
  std::swap(sub_component_id_, other->sub_component_id_);
  sensor_name_.Swap(&other->sensor_name_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(timestamp_, other->timestamp_);
  kv_.UnsafeArenaSwap(&other->kv_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpenConfigData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenConfigData_descriptor_;
  metadata.reflection = OpenConfigData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpenConfigData

// optional string system_id = 1;
void OpenConfigData::clear_system_id() {
  system_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OpenConfigData::system_id() const {
  // @@protoc_insertion_point(field_get:agent.OpenConfigData.system_id)
  return system_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenConfigData::set_system_id(const ::std::string& value) {
  
  system_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agent.OpenConfigData.system_id)
}
 void OpenConfigData::set_system_id(const char* value) {
  
  system_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agent.OpenConfigData.system_id)
}
 void OpenConfigData::set_system_id(const char* value, size_t size) {
  
  system_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agent.OpenConfigData.system_id)
}
 ::std::string* OpenConfigData::mutable_system_id() {
  
  // @@protoc_insertion_point(field_mutable:agent.OpenConfigData.system_id)
  return system_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenConfigData::release_system_id() {
  
  return system_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenConfigData::set_allocated_system_id(::std::string* system_id) {
  if (system_id != NULL) {
    
  } else {
    
  }
  system_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_id);
  // @@protoc_insertion_point(field_set_allocated:agent.OpenConfigData.system_id)
}

// optional uint32 component_id = 2;
void OpenConfigData::clear_component_id() {
  component_id_ = 0u;
}
 ::google::protobuf::uint32 OpenConfigData::component_id() const {
  // @@protoc_insertion_point(field_get:agent.OpenConfigData.component_id)
  return component_id_;
}
 void OpenConfigData::set_component_id(::google::protobuf::uint32 value) {
  
  component_id_ = value;
  // @@protoc_insertion_point(field_set:agent.OpenConfigData.component_id)
}

// optional uint32 sub_component_id = 3;
void OpenConfigData::clear_sub_component_id() {
  sub_component_id_ = 0u;
}
 ::google::protobuf::uint32 OpenConfigData::sub_component_id() const {
  // @@protoc_insertion_point(field_get:agent.OpenConfigData.sub_component_id)
  return sub_component_id_;
}
 void OpenConfigData::set_sub_component_id(::google::protobuf::uint32 value) {
  
  sub_component_id_ = value;
  // @@protoc_insertion_point(field_set:agent.OpenConfigData.sub_component_id)
}

// optional string sensor_name = 4;
void OpenConfigData::clear_sensor_name() {
  sensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& OpenConfigData::sensor_name() const {
  // @@protoc_insertion_point(field_get:agent.OpenConfigData.sensor_name)
  return sensor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenConfigData::set_sensor_name(const ::std::string& value) {
  
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agent.OpenConfigData.sensor_name)
}
 void OpenConfigData::set_sensor_name(const char* value) {
  
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agent.OpenConfigData.sensor_name)
}
 void OpenConfigData::set_sensor_name(const char* value, size_t size) {
  
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agent.OpenConfigData.sensor_name)
}
 ::std::string* OpenConfigData::mutable_sensor_name() {
  
  // @@protoc_insertion_point(field_mutable:agent.OpenConfigData.sensor_name)
  return sensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpenConfigData::release_sensor_name() {
  
  return sensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpenConfigData::set_allocated_sensor_name(::std::string* sensor_name) {
  if (sensor_name != NULL) {
    
  } else {
    
  }
  sensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_name);
  // @@protoc_insertion_point(field_set_allocated:agent.OpenConfigData.sensor_name)
}

// optional uint32 sequence_number = 5;
void OpenConfigData::clear_sequence_number() {
  sequence_number_ = 0u;
}
 ::google::protobuf::uint32 OpenConfigData::sequence_number() const {
  // @@protoc_insertion_point(field_get:agent.OpenConfigData.sequence_number)
  return sequence_number_;
}
 void OpenConfigData::set_sequence_number(::google::protobuf::uint32 value) {
  
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:agent.OpenConfigData.sequence_number)
}

// optional uint64 timestamp = 6;
void OpenConfigData::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 OpenConfigData::timestamp() const {
  // @@protoc_insertion_point(field_get:agent.OpenConfigData.timestamp)
  return timestamp_;
}
 void OpenConfigData::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:agent.OpenConfigData.timestamp)
}

// repeated .agent.KeyValue kv = 7;
int OpenConfigData::kv_size() const {
  return kv_.size();
}
void OpenConfigData::clear_kv() {
  kv_.Clear();
}
const ::agent::KeyValue& OpenConfigData::kv(int index) const {
  // @@protoc_insertion_point(field_get:agent.OpenConfigData.kv)
  return kv_.Get(index);
}
::agent::KeyValue* OpenConfigData::mutable_kv(int index) {
  // @@protoc_insertion_point(field_mutable:agent.OpenConfigData.kv)
  return kv_.Mutable(index);
}
::agent::KeyValue* OpenConfigData::add_kv() {
  // @@protoc_insertion_point(field_add:agent.OpenConfigData.kv)
  return kv_.Add();
}
::google::protobuf::RepeatedPtrField< ::agent::KeyValue >*
OpenConfigData::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:agent.OpenConfigData.kv)
  return &kv_;
}
const ::google::protobuf::RepeatedPtrField< ::agent::KeyValue >&
OpenConfigData::kv() const {
  // @@protoc_insertion_point(field_list:agent.OpenConfigData.kv)
  return kv_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kIntValueFieldNumber;
const int KeyValue::kStrValueFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent.KeyValue)
}

void KeyValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:agent.KeyValue)
}

void KeyValue::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  int_value_ = GOOGLE_LONGLONG(0);
  str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:agent.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  int_value_ = GOOGLE_LONGLONG(0);
  str_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:agent.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agent.KeyValue.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int_value;
        break;
      }

      // optional int64 int_value = 2;
      case 2: {
        if (tag == 16) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_str_value;
        break;
      }

      // optional string str_value = 3;
      case 3: {
        if (tag == 26) {
         parse_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str_value().data(), this->str_value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "agent.KeyValue.str_value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:agent.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:agent.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:agent.KeyValue)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.KeyValue.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional int64 int_value = 2;
  if (this->int_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int_value(), output);
  }

  // optional string str_value = 3;
  if (this->str_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.KeyValue.str_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->str_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:agent.KeyValue)
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent.KeyValue)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.KeyValue.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional int64 int_value = 2;
  if (this->int_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int_value(), target);
  }

  // optional string str_value = 3;
  if (this->str_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str_value().data(), this->str_value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "agent.KeyValue.str_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->str_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:agent.KeyValue)
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional int64 int_value = 2;
  if (this->int_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->int_value());
  }

  // optional string str_value = 3;
  if (this->str_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.int_value() != 0) {
    set_int_value(from.int_value());
  }
  if (from.str_value().size() > 0) {

    str_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_value_);
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  key_.Swap(&other->key_);
  std::swap(int_value_, other->int_value_);
  str_value_.Swap(&other->str_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// optional string key = 1;
void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:agent.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agent.KeyValue.key)
}
 void KeyValue::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agent.KeyValue.key)
}
 void KeyValue::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agent.KeyValue.key)
}
 ::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:agent.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyValue::release_key() {
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:agent.KeyValue.key)
}

// optional int64 int_value = 2;
void KeyValue::clear_int_value() {
  int_value_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 KeyValue::int_value() const {
  // @@protoc_insertion_point(field_get:agent.KeyValue.int_value)
  return int_value_;
}
 void KeyValue::set_int_value(::google::protobuf::int64 value) {
  
  int_value_ = value;
  // @@protoc_insertion_point(field_set:agent.KeyValue.int_value)
}

// optional string str_value = 3;
void KeyValue::clear_str_value() {
  str_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeyValue::str_value() const {
  // @@protoc_insertion_point(field_get:agent.KeyValue.str_value)
  return str_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_str_value(const ::std::string& value) {
  
  str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:agent.KeyValue.str_value)
}
 void KeyValue::set_str_value(const char* value) {
  
  str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agent.KeyValue.str_value)
}
 void KeyValue::set_str_value(const char* value, size_t size) {
  
  str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agent.KeyValue.str_value)
}
 ::std::string* KeyValue::mutable_str_value() {
  
  // @@protoc_insertion_point(field_mutable:agent.KeyValue.str_value)
  return str_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyValue::release_str_value() {
  
  return str_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_allocated_str_value(::std::string* str_value) {
  if (str_value != NULL) {
    
  } else {
    
  }
  str_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_value);
  // @@protoc_insertion_point(field_set_allocated:agent.KeyValue.str_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace agent

// @@protoc_insertion_point(global_scope)
