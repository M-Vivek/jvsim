syntax = "proto3";

package agent;

// Interface exported by Agent
service Agent {
  rpc telemetrySubscribe(SubscriptionRequest)     returns (stream OpenConfigData) {}
  rpc telemetryUnSubscribe(UnSubscribeRequest)    returns (Reply) {}
  rpc telemetrySubscriptionsGet(GetRequest)       returns (OpenConfigData) {}
  rpc telemetryOperationalStateGet(GetRequest)    returns (OpenConfigData) {}
}

// Arguments sent for a subscription request
message SubscriptionRequest {
    // List of xpaths
    repeated Path path_list = 1;


    // limit the number of records sent in the stream
    int32 limit_records = 2;

    // limit the time the stream remains open
    int32 limit_time_seconds = 3;
}

// Remove an existing subscription
message UnSubscribeRequest {
    // Identifier for the current subscription
    int32 id = 1;
}

// Arguments to a get request. 
message GetRequest {
    // Control verbosity of the output
    int32  verbosity = 1;

    // Optionally specify the subscription ID
    int32  id = 2;
}

// Result of the operation
enum ReturnCode {
    NONE = 0;
    OK   = 1;
    NO_SUBSCRIPTION_ENTRY = 2;
    UNSUPPORTED_PATHS = 3;
}

message Reply {
    // Error code
    ReturnCode code     = 1;
    string     code_str = 2;

    // The paths that were accepted by the device
    repeated Path path_list = 3;
};

// Parameters of subscription for a given resource
message Path {
    // xpath representing the resource
    string path = 1;

    // regular expression to filter data to be included in stream
    string filter = 2;

    // Time in ms between collection and transmission of the
    // specified data to the collector platform. The target device
    // will sample the corresponding data (e.g,. a counter) and
    // immediately send to the collector destination.
    uint32 sample_frequency = 3;

    // Send data only if it hasn't changed since the last time
    bool suppress_unchanged = 4;

    // Maximum time in ms the target device may go without sending
    // a message to the collector. If this time expires with
    // suppress-unchanged set, the target device must send an update
    // message regardless if the data values have changed.
    uint32 max_silent_interval = 5;
}

// Universal data format for telemetry coming back from server
message OpenConfigData {
    // router name or export IP address
    string system_id        = 1;

    // line card / RE (slot number)
    uint32 component_id     = 2;

    // PFE (if applicable)
    uint32 sub_component_id = 3;

    // configured sensor name
    string sensor_name      = 4;

    // sequence number, monotonically increasesing for each
    // system_id, component_id, sub_component_id + sensor_name.
    uint32 sequence_number  = 5;

    // timestamp (seconds since epoch)
    uint64 timestamp        = 6;

    // Array of key values
    repeated KeyValue kv    = 7;
}

// List of key values
message KeyValue {
    string key       = 1;
    int64  int_value = 2;
    string str_value = 3;
}

