// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: agent.proto

#include "agent.pb.h"
#include "agent.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace agent {

static const char* Agent_method_names[] = {
  "/agent.Agent/telemetrySubscribe",
  "/agent.Agent/telemetryUnSubscribe",
  "/agent.Agent/telemetrySubscriptionsGet",
  "/agent.Agent/telemetryOperationalStateGet",
};

std::unique_ptr< Agent::Stub> Agent::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Agent::Stub> stub(new Agent::Stub(channel));
  return stub;
}

Agent::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_telemetrySubscribe_(Agent_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_telemetryUnSubscribe_(Agent_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_telemetrySubscriptionsGet_(Agent_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_telemetryOperationalStateGet_(Agent_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::agent::OpenConfigData>* Agent::Stub::telemetrySubscribeRaw(::grpc::ClientContext* context, const ::agent::SubscriptionRequest& request) {
  return new ::grpc::ClientReader< ::agent::OpenConfigData>(channel_.get(), rpcmethod_telemetrySubscribe_, context, request);
}

::grpc::ClientAsyncReader< ::agent::OpenConfigData>* Agent::Stub::AsynctelemetrySubscribeRaw(::grpc::ClientContext* context, const ::agent::SubscriptionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::agent::OpenConfigData>(channel_.get(), cq, rpcmethod_telemetrySubscribe_, context, request, tag);
}

::grpc::Status Agent::Stub::telemetryUnSubscribe(::grpc::ClientContext* context, const ::agent::UnSubscribeRequest& request, ::agent::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_telemetryUnSubscribe_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::agent::Reply>* Agent::Stub::AsynctelemetryUnSubscribeRaw(::grpc::ClientContext* context, const ::agent::UnSubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::agent::Reply>(channel_.get(), cq, rpcmethod_telemetryUnSubscribe_, context, request);
}

::grpc::Status Agent::Stub::telemetrySubscriptionsGet(::grpc::ClientContext* context, const ::agent::GetRequest& request, ::agent::OpenConfigData* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_telemetrySubscriptionsGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::agent::OpenConfigData>* Agent::Stub::AsynctelemetrySubscriptionsGetRaw(::grpc::ClientContext* context, const ::agent::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::agent::OpenConfigData>(channel_.get(), cq, rpcmethod_telemetrySubscriptionsGet_, context, request);
}

::grpc::Status Agent::Stub::telemetryOperationalStateGet(::grpc::ClientContext* context, const ::agent::GetRequest& request, ::agent::OpenConfigData* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_telemetryOperationalStateGet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::agent::OpenConfigData>* Agent::Stub::AsynctelemetryOperationalStateGetRaw(::grpc::ClientContext* context, const ::agent::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::agent::OpenConfigData>(channel_.get(), cq, rpcmethod_telemetryOperationalStateGet_, context, request);
}

Agent::AsyncService::AsyncService() : ::grpc::AsynchronousService(Agent_method_names, 4) {}

Agent::Service::~Service() {
  delete service_;
}

::grpc::Status Agent::Service::telemetrySubscribe(::grpc::ServerContext* context, const ::agent::SubscriptionRequest* request, ::grpc::ServerWriter< ::agent::OpenConfigData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void Agent::AsyncService::RequesttelemetrySubscribe(::grpc::ServerContext* context, ::agent::SubscriptionRequest* request, ::grpc::ServerAsyncWriter< ::agent::OpenConfigData>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status Agent::Service::telemetryUnSubscribe(::grpc::ServerContext* context, const ::agent::UnSubscribeRequest* request, ::agent::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void Agent::AsyncService::RequesttelemetryUnSubscribe(::grpc::ServerContext* context, ::agent::UnSubscribeRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status Agent::Service::telemetrySubscriptionsGet(::grpc::ServerContext* context, const ::agent::GetRequest* request, ::agent::OpenConfigData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void Agent::AsyncService::RequesttelemetrySubscriptionsGet(::grpc::ServerContext* context, ::agent::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::OpenConfigData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status Agent::Service::telemetryOperationalStateGet(::grpc::ServerContext* context, const ::agent::GetRequest* request, ::agent::OpenConfigData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void Agent::AsyncService::RequesttelemetryOperationalStateGet(::grpc::ServerContext* context, ::agent::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::OpenConfigData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* Agent::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Agent_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Agent::Service, ::agent::SubscriptionRequest, ::agent::OpenConfigData>(
          std::mem_fn(&Agent::Service::telemetrySubscribe), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Agent_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Agent::Service, ::agent::UnSubscribeRequest, ::agent::Reply>(
          std::mem_fn(&Agent::Service::telemetryUnSubscribe), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Agent_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Agent::Service, ::agent::GetRequest, ::agent::OpenConfigData>(
          std::mem_fn(&Agent::Service::telemetrySubscriptionsGet), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Agent_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Agent::Service, ::agent::GetRequest, ::agent::OpenConfigData>(
          std::mem_fn(&Agent::Service::telemetryOperationalStateGet), this)));
  return service_;
}


}  // namespace agent

