// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: optics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "optics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Optics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Optics_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpticsInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpticsInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpticsDiagStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpticsDiagStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpticsDiagLaneStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpticsDiagLaneStats_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_optics_2eproto() {
  protobuf_AddDesc_optics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "optics.proto");
  GOOGLE_CHECK(file != NULL);
  Optics_descriptor_ = file->message_type(0);
  static const int Optics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optics, optics_diag_),
  };
  Optics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Optics_descriptor_,
      Optics::default_instance_,
      Optics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optics, _has_bits_[0]),
      -1,
      -1,
      sizeof(Optics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optics, _internal_metadata_),
      -1);
  OpticsInfos_descriptor_ = file->message_type(1);
  static const int OpticsInfos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsInfos, if_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsInfos, snmp_if_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsInfos, optics_diag_stats_),
  };
  OpticsInfos_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpticsInfos_descriptor_,
      OpticsInfos::default_instance_,
      OpticsInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsInfos, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpticsInfos),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsInfos, _internal_metadata_),
      -1);
  OpticsDiagStats_descriptor_ = file->message_type(2);
  static const int OpticsDiagStats_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, optics_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, module_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, module_temp_high_alarm_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, module_temp_low_alarm_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, module_temp_high_warning_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, module_temp_low_warning_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_output_power_high_alarm_threshold_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_output_power_low_alarm_threshold_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_output_power_high_warning_threshold_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_output_power_low_warning_threshold_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_rx_power_high_alarm_threshold_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_rx_power_low_alarm_threshold_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_rx_power_high_warning_threshold_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_rx_power_low_warning_threshold_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_bias_current_high_alarm_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_bias_current_low_alarm_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_bias_current_high_warning_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, laser_bias_current_low_warning_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, module_temp_high_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, module_temp_low_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, module_temp_high_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, module_temp_low_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, optics_lane_diag_stats_),
  };
  OpticsDiagStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpticsDiagStats_descriptor_,
      OpticsDiagStats::default_instance_,
      OpticsDiagStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpticsDiagStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagStats, _internal_metadata_),
      -1);
  OpticsDiagLaneStats_descriptor_ = file->message_type(3);
  static const int OpticsDiagLaneStats_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_output_power_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_receiver_power_dbm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_bias_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_output_power_high_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_output_power_low_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_output_power_high_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_output_power_low_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_receiver_power_high_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_receiver_power_low_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_receiver_power_high_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_receiver_power_low_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_bias_current_high_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_bias_current_low_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_bias_current_high_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_laser_bias_current_low_warning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_tx_loss_of_signal_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_rx_loss_of_signal_alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, lane_tx_laser_disabled_alarm_),
  };
  OpticsDiagLaneStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpticsDiagLaneStats_descriptor_,
      OpticsDiagLaneStats::default_instance_,
      OpticsDiagLaneStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpticsDiagLaneStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpticsDiagLaneStats, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_optics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Optics_descriptor_, &Optics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpticsInfos_descriptor_, &OpticsInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpticsDiagStats_descriptor_, &OpticsDiagStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpticsDiagLaneStats_descriptor_, &OpticsDiagLaneStats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_optics_2eproto() {
  delete Optics::default_instance_;
  delete Optics_reflection_;
  delete OpticsInfos::default_instance_;
  delete OpticsInfos_reflection_;
  delete OpticsDiagStats::default_instance_;
  delete OpticsDiagStats_reflection_;
  delete OpticsDiagLaneStats::default_instance_;
  delete OpticsDiagLaneStats_reflection_;
}

void protobuf_AddDesc_optics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_telemetry_5ftop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014optics.proto\032\023telemetry_top.proto\"+\n\006O"
    "ptics\022!\n\013Optics_diag\030\001 \003(\0132\014.OpticsInfos"
    "\"i\n\013OpticsInfos\022\026\n\007if_name\030\001 \002(\tB\005\202@\002\010\001\022"
    "\025\n\rsnmp_if_index\030\002 \001(\r\022+\n\021optics_diag_st"
    "ats\030\003 \001(\0132\020.OpticsDiagStats\"\366\010\n\017OpticsDi"
    "agStats\022\023\n\013optics_type\030\001 \001(\r\022\032\n\013module_t"
    "emp\030\002 \001(\001B\005\202@\002 \001\022/\n module_temp_high_ala"
    "rm_threshold\030\003 \001(\001B\005\202@\002 \001\022.\n\037module_temp"
    "_low_alarm_threshold\030\004 \001(\001B\005\202@\002 \001\0221\n\"mod"
    "ule_temp_high_warning_threshold\030\005 \001(\001B\005\202"
    "@\002 \001\0220\n!module_temp_low_warning_threshol"
    "d\030\006 \001(\001B\005\202@\002 \001\022:\n+laser_output_power_hig"
    "h_alarm_threshold_dbm\030\007 \001(\001B\005\202@\002 \001\0229\n*la"
    "ser_output_power_low_alarm_threshold_dbm"
    "\030\010 \001(\001B\005\202@\002 \001\022<\n-laser_output_power_high"
    "_warning_threshold_dbm\030\t \001(\001B\005\202@\002 \001\022;\n,l"
    "aser_output_power_low_warning_threshold_"
    "dbm\030\n \001(\001B\005\202@\002 \001\0226\n\'laser_rx_power_high_"
    "alarm_threshold_dbm\030\013 \001(\001B\005\202@\002 \001\0225\n&lase"
    "r_rx_power_low_alarm_threshold_dbm\030\014 \001(\001"
    "B\005\202@\002 \001\0228\n)laser_rx_power_high_warning_t"
    "hreshold_dbm\030\r \001(\001B\005\202@\002 \001\0227\n(laser_rx_po"
    "wer_low_warning_threshold_dbm\030\016 \001(\001B\005\202@\002"
    " \001\0226\n\'laser_bias_current_high_alarm_thre"
    "shold\030\017 \001(\001B\005\202@\002 \001\0225\n&laser_bias_current"
    "_low_alarm_threshold\030\020 \001(\001B\005\202@\002 \001\0228\n)las"
    "er_bias_current_high_warning_threshold\030\021"
    " \001(\001B\005\202@\002 \001\0227\n(laser_bias_current_low_wa"
    "rning_threshold\030\022 \001(\001B\005\202@\002 \001\022\036\n\026module_t"
    "emp_high_alarm\030\023 \001(\010\022\035\n\025module_temp_low_"
    "alarm\030\024 \001(\010\022 \n\030module_temp_high_warning\030"
    "\025 \001(\010\022\037\n\027module_temp_low_warning\030\026 \001(\010\0224"
    "\n\026optics_lane_diag_stats\030\027 \003(\0132\024.OpticsD"
    "iagLaneStats\"\343\006\n\023OpticsDiagLaneStats\022\032\n\013"
    "lane_number\030\001 \001(\rB\005\202@\002\010\001\022%\n\026lane_laser_t"
    "emperature\030\002 \001(\001B\005\202@\002 \001\022*\n\033lane_laser_ou"
    "tput_power_dbm\030\003 \001(\001B\005\202@\002 \001\022,\n\035lane_lase"
    "r_receiver_power_dbm\030\004 \001(\001B\005\202@\002 \001\022\037\n\027lan"
    "e_laser_bias_current\030\005 \001(\001\022*\n\"lane_laser"
    "_output_power_high_alarm\030\006 \001(\010\022)\n!lane_l"
    "aser_output_power_low_alarm\030\007 \001(\010\022,\n$lan"
    "e_laser_output_power_high_warning\030\010 \001(\010\022"
    "+\n#lane_laser_output_power_low_warning\030\t"
    " \001(\010\022,\n$lane_laser_receiver_power_high_a"
    "larm\030\n \001(\010\022+\n#lane_laser_receiver_power_"
    "low_alarm\030\013 \001(\010\022.\n&lane_laser_receiver_p"
    "ower_high_warning\030\014 \001(\010\022-\n%lane_laser_re"
    "ceiver_power_low_warning\030\r \001(\010\022*\n\"lane_l"
    "aser_bias_current_high_alarm\030\016 \001(\010\022)\n!la"
    "ne_laser_bias_current_low_alarm\030\017 \001(\010\022,\n"
    "$lane_laser_bias_current_high_warning\030\020 "
    "\001(\010\022+\n#lane_laser_bias_current_low_warni"
    "ng\030\021 \001(\010\022$\n\034lane_tx_loss_of_signal_alarm"
    "\030\022 \001(\010\022$\n\034lane_rx_loss_of_signal_alarm\030\023"
    " \001(\010\022$\n\034lane_tx_laser_disabled_alarm\030\024 \001"
    "(\010:9\n\017jnpr_optics_ext\022\027.JuniperNetworksS"
    "ensors\030\n \001(\0132\007.Optics", 2261);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "optics.proto", &protobuf_RegisterTypes);
  Optics::default_instance_ = new Optics();
  OpticsInfos::default_instance_ = new OpticsInfos();
  OpticsDiagStats::default_instance_ = new OpticsDiagStats();
  OpticsDiagLaneStats::default_instance_ = new OpticsDiagLaneStats();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::JuniperNetworksSensors::default_instance(),
    10, 11, false, false,
    &::Optics::default_instance());
  Optics::default_instance_->InitAsDefaultInstance();
  OpticsInfos::default_instance_->InitAsDefaultInstance();
  OpticsDiagStats::default_instance_->InitAsDefaultInstance();
  OpticsDiagLaneStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_optics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_optics_2eproto {
  StaticDescriptorInitializer_optics_2eproto() {
    protobuf_AddDesc_optics_2eproto();
  }
} static_descriptor_initializer_optics_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Optics::kOpticsDiagFieldNumber;
#endif  // !_MSC_VER

Optics::Optics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Optics)
}

void Optics::InitAsDefaultInstance() {
}

Optics::Optics(const Optics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Optics)
}

void Optics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Optics::~Optics() {
  // @@protoc_insertion_point(destructor:Optics)
  SharedDtor();
}

void Optics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Optics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Optics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Optics_descriptor_;
}

const Optics& Optics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_optics_2eproto();
  return *default_instance_;
}

Optics* Optics::default_instance_ = NULL;

Optics* Optics::New(::google::protobuf::Arena* arena) const {
  Optics* n = new Optics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Optics::Clear() {
  optics_diag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Optics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Optics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OpticsInfos Optics_diag = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Optics_diag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_optics_diag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Optics_diag;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Optics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Optics)
  return false;
#undef DO_
}

void Optics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Optics)
  // repeated .OpticsInfos Optics_diag = 1;
  for (unsigned int i = 0, n = this->optics_diag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->optics_diag(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Optics)
}

::google::protobuf::uint8* Optics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Optics)
  // repeated .OpticsInfos Optics_diag = 1;
  for (unsigned int i = 0, n = this->optics_diag_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->optics_diag(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Optics)
  return target;
}

int Optics::ByteSize() const {
  int total_size = 0;

  // repeated .OpticsInfos Optics_diag = 1;
  total_size += 1 * this->optics_diag_size();
  for (int i = 0; i < this->optics_diag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optics_diag(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Optics::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Optics* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Optics>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Optics::MergeFrom(const Optics& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  optics_diag_.MergeFrom(from.optics_diag_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Optics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optics::CopyFrom(const Optics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optics::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->optics_diag())) return false;
  return true;
}

void Optics::Swap(Optics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Optics::InternalSwap(Optics* other) {
  optics_diag_.UnsafeArenaSwap(&other->optics_diag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Optics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Optics_descriptor_;
  metadata.reflection = Optics_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Optics

// repeated .OpticsInfos Optics_diag = 1;
int Optics::optics_diag_size() const {
  return optics_diag_.size();
}
void Optics::clear_optics_diag() {
  optics_diag_.Clear();
}
const ::OpticsInfos& Optics::optics_diag(int index) const {
  // @@protoc_insertion_point(field_get:Optics.Optics_diag)
  return optics_diag_.Get(index);
}
::OpticsInfos* Optics::mutable_optics_diag(int index) {
  // @@protoc_insertion_point(field_mutable:Optics.Optics_diag)
  return optics_diag_.Mutable(index);
}
::OpticsInfos* Optics::add_optics_diag() {
  // @@protoc_insertion_point(field_add:Optics.Optics_diag)
  return optics_diag_.Add();
}
::google::protobuf::RepeatedPtrField< ::OpticsInfos >*
Optics::mutable_optics_diag() {
  // @@protoc_insertion_point(field_mutable_list:Optics.Optics_diag)
  return &optics_diag_;
}
const ::google::protobuf::RepeatedPtrField< ::OpticsInfos >&
Optics::optics_diag() const {
  // @@protoc_insertion_point(field_list:Optics.Optics_diag)
  return optics_diag_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int OpticsInfos::kIfNameFieldNumber;
const int OpticsInfos::kSnmpIfIndexFieldNumber;
const int OpticsInfos::kOpticsDiagStatsFieldNumber;
#endif  // !_MSC_VER

OpticsInfos::OpticsInfos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpticsInfos)
}

void OpticsInfos::InitAsDefaultInstance() {
  optics_diag_stats_ = const_cast< ::OpticsDiagStats*>(&::OpticsDiagStats::default_instance());
}

OpticsInfos::OpticsInfos(const OpticsInfos& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpticsInfos)
}

void OpticsInfos::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  if_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  snmp_if_index_ = 0u;
  optics_diag_stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpticsInfos::~OpticsInfos() {
  // @@protoc_insertion_point(destructor:OpticsInfos)
  SharedDtor();
}

void OpticsInfos::SharedDtor() {
  if_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete optics_diag_stats_;
  }
}

void OpticsInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpticsInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpticsInfos_descriptor_;
}

const OpticsInfos& OpticsInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_optics_2eproto();
  return *default_instance_;
}

OpticsInfos* OpticsInfos::default_instance_ = NULL;

OpticsInfos* OpticsInfos::New(::google::protobuf::Arena* arena) const {
  OpticsInfos* n = new OpticsInfos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpticsInfos::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_if_name()) {
      if_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    snmp_if_index_ = 0u;
    if (has_optics_diag_stats()) {
      if (optics_diag_stats_ != NULL) optics_diag_stats_->::OpticsDiagStats::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpticsInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpticsInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string if_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_if_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->if_name().data(), this->if_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OpticsInfos.if_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_snmp_if_index;
        break;
      }

      // optional uint32 snmp_if_index = 2;
      case 2: {
        if (tag == 16) {
         parse_snmp_if_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &snmp_if_index_)));
          set_has_snmp_if_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_optics_diag_stats;
        break;
      }

      // optional .OpticsDiagStats optics_diag_stats = 3;
      case 3: {
        if (tag == 26) {
         parse_optics_diag_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optics_diag_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpticsInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpticsInfos)
  return false;
#undef DO_
}

void OpticsInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpticsInfos)
  // required string if_name = 1;
  if (has_if_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->if_name().data(), this->if_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OpticsInfos.if_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->if_name(), output);
  }

  // optional uint32 snmp_if_index = 2;
  if (has_snmp_if_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->snmp_if_index(), output);
  }

  // optional .OpticsDiagStats optics_diag_stats = 3;
  if (has_optics_diag_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->optics_diag_stats_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpticsInfos)
}

::google::protobuf::uint8* OpticsInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpticsInfos)
  // required string if_name = 1;
  if (has_if_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->if_name().data(), this->if_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OpticsInfos.if_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->if_name(), target);
  }

  // optional uint32 snmp_if_index = 2;
  if (has_snmp_if_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->snmp_if_index(), target);
  }

  // optional .OpticsDiagStats optics_diag_stats = 3;
  if (has_optics_diag_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->optics_diag_stats_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpticsInfos)
  return target;
}

int OpticsInfos::ByteSize() const {
  int total_size = 0;

  // required string if_name = 1;
  if (has_if_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->if_name());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional uint32 snmp_if_index = 2;
    if (has_snmp_if_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->snmp_if_index());
    }

    // optional .OpticsDiagStats optics_diag_stats = 3;
    if (has_optics_diag_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->optics_diag_stats_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticsInfos::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpticsInfos* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpticsInfos>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpticsInfos::MergeFrom(const OpticsInfos& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_if_name()) {
      set_has_if_name();
      if_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.if_name_);
    }
    if (from.has_snmp_if_index()) {
      set_snmp_if_index(from.snmp_if_index());
    }
    if (from.has_optics_diag_stats()) {
      mutable_optics_diag_stats()->::OpticsDiagStats::MergeFrom(from.optics_diag_stats());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpticsInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpticsInfos::CopyFrom(const OpticsInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticsInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpticsInfos::Swap(OpticsInfos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticsInfos::InternalSwap(OpticsInfos* other) {
  if_name_.Swap(&other->if_name_);
  std::swap(snmp_if_index_, other->snmp_if_index_);
  std::swap(optics_diag_stats_, other->optics_diag_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpticsInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpticsInfos_descriptor_;
  metadata.reflection = OpticsInfos_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpticsInfos

// required string if_name = 1;
bool OpticsInfos::has_if_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpticsInfos::set_has_if_name() {
  _has_bits_[0] |= 0x00000001u;
}
void OpticsInfos::clear_has_if_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpticsInfos::clear_if_name() {
  if_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_if_name();
}
 const ::std::string& OpticsInfos::if_name() const {
  // @@protoc_insertion_point(field_get:OpticsInfos.if_name)
  return if_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpticsInfos::set_if_name(const ::std::string& value) {
  set_has_if_name();
  if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OpticsInfos.if_name)
}
 void OpticsInfos::set_if_name(const char* value) {
  set_has_if_name();
  if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OpticsInfos.if_name)
}
 void OpticsInfos::set_if_name(const char* value, size_t size) {
  set_has_if_name();
  if_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OpticsInfos.if_name)
}
 ::std::string* OpticsInfos::mutable_if_name() {
  set_has_if_name();
  // @@protoc_insertion_point(field_mutable:OpticsInfos.if_name)
  return if_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OpticsInfos::release_if_name() {
  clear_has_if_name();
  return if_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OpticsInfos::set_allocated_if_name(::std::string* if_name) {
  if (if_name != NULL) {
    set_has_if_name();
  } else {
    clear_has_if_name();
  }
  if_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), if_name);
  // @@protoc_insertion_point(field_set_allocated:OpticsInfos.if_name)
}

// optional uint32 snmp_if_index = 2;
bool OpticsInfos::has_snmp_if_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpticsInfos::set_has_snmp_if_index() {
  _has_bits_[0] |= 0x00000002u;
}
void OpticsInfos::clear_has_snmp_if_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpticsInfos::clear_snmp_if_index() {
  snmp_if_index_ = 0u;
  clear_has_snmp_if_index();
}
 ::google::protobuf::uint32 OpticsInfos::snmp_if_index() const {
  // @@protoc_insertion_point(field_get:OpticsInfos.snmp_if_index)
  return snmp_if_index_;
}
 void OpticsInfos::set_snmp_if_index(::google::protobuf::uint32 value) {
  set_has_snmp_if_index();
  snmp_if_index_ = value;
  // @@protoc_insertion_point(field_set:OpticsInfos.snmp_if_index)
}

// optional .OpticsDiagStats optics_diag_stats = 3;
bool OpticsInfos::has_optics_diag_stats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpticsInfos::set_has_optics_diag_stats() {
  _has_bits_[0] |= 0x00000004u;
}
void OpticsInfos::clear_has_optics_diag_stats() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpticsInfos::clear_optics_diag_stats() {
  if (optics_diag_stats_ != NULL) optics_diag_stats_->::OpticsDiagStats::Clear();
  clear_has_optics_diag_stats();
}
const ::OpticsDiagStats& OpticsInfos::optics_diag_stats() const {
  // @@protoc_insertion_point(field_get:OpticsInfos.optics_diag_stats)
  return optics_diag_stats_ != NULL ? *optics_diag_stats_ : *default_instance_->optics_diag_stats_;
}
::OpticsDiagStats* OpticsInfos::mutable_optics_diag_stats() {
  set_has_optics_diag_stats();
  if (optics_diag_stats_ == NULL) {
    optics_diag_stats_ = new ::OpticsDiagStats;
  }
  // @@protoc_insertion_point(field_mutable:OpticsInfos.optics_diag_stats)
  return optics_diag_stats_;
}
::OpticsDiagStats* OpticsInfos::release_optics_diag_stats() {
  clear_has_optics_diag_stats();
  ::OpticsDiagStats* temp = optics_diag_stats_;
  optics_diag_stats_ = NULL;
  return temp;
}
void OpticsInfos::set_allocated_optics_diag_stats(::OpticsDiagStats* optics_diag_stats) {
  delete optics_diag_stats_;
  optics_diag_stats_ = optics_diag_stats;
  if (optics_diag_stats) {
    set_has_optics_diag_stats();
  } else {
    clear_has_optics_diag_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:OpticsInfos.optics_diag_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int OpticsDiagStats::kOpticsTypeFieldNumber;
const int OpticsDiagStats::kModuleTempFieldNumber;
const int OpticsDiagStats::kModuleTempHighAlarmThresholdFieldNumber;
const int OpticsDiagStats::kModuleTempLowAlarmThresholdFieldNumber;
const int OpticsDiagStats::kModuleTempHighWarningThresholdFieldNumber;
const int OpticsDiagStats::kModuleTempLowWarningThresholdFieldNumber;
const int OpticsDiagStats::kLaserOutputPowerHighAlarmThresholdDbmFieldNumber;
const int OpticsDiagStats::kLaserOutputPowerLowAlarmThresholdDbmFieldNumber;
const int OpticsDiagStats::kLaserOutputPowerHighWarningThresholdDbmFieldNumber;
const int OpticsDiagStats::kLaserOutputPowerLowWarningThresholdDbmFieldNumber;
const int OpticsDiagStats::kLaserRxPowerHighAlarmThresholdDbmFieldNumber;
const int OpticsDiagStats::kLaserRxPowerLowAlarmThresholdDbmFieldNumber;
const int OpticsDiagStats::kLaserRxPowerHighWarningThresholdDbmFieldNumber;
const int OpticsDiagStats::kLaserRxPowerLowWarningThresholdDbmFieldNumber;
const int OpticsDiagStats::kLaserBiasCurrentHighAlarmThresholdFieldNumber;
const int OpticsDiagStats::kLaserBiasCurrentLowAlarmThresholdFieldNumber;
const int OpticsDiagStats::kLaserBiasCurrentHighWarningThresholdFieldNumber;
const int OpticsDiagStats::kLaserBiasCurrentLowWarningThresholdFieldNumber;
const int OpticsDiagStats::kModuleTempHighAlarmFieldNumber;
const int OpticsDiagStats::kModuleTempLowAlarmFieldNumber;
const int OpticsDiagStats::kModuleTempHighWarningFieldNumber;
const int OpticsDiagStats::kModuleTempLowWarningFieldNumber;
const int OpticsDiagStats::kOpticsLaneDiagStatsFieldNumber;
#endif  // !_MSC_VER

OpticsDiagStats::OpticsDiagStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpticsDiagStats)
}

void OpticsDiagStats::InitAsDefaultInstance() {
}

OpticsDiagStats::OpticsDiagStats(const OpticsDiagStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpticsDiagStats)
}

void OpticsDiagStats::SharedCtor() {
  _cached_size_ = 0;
  optics_type_ = 0u;
  module_temp_ = 0;
  module_temp_high_alarm_threshold_ = 0;
  module_temp_low_alarm_threshold_ = 0;
  module_temp_high_warning_threshold_ = 0;
  module_temp_low_warning_threshold_ = 0;
  laser_output_power_high_alarm_threshold_dbm_ = 0;
  laser_output_power_low_alarm_threshold_dbm_ = 0;
  laser_output_power_high_warning_threshold_dbm_ = 0;
  laser_output_power_low_warning_threshold_dbm_ = 0;
  laser_rx_power_high_alarm_threshold_dbm_ = 0;
  laser_rx_power_low_alarm_threshold_dbm_ = 0;
  laser_rx_power_high_warning_threshold_dbm_ = 0;
  laser_rx_power_low_warning_threshold_dbm_ = 0;
  laser_bias_current_high_alarm_threshold_ = 0;
  laser_bias_current_low_alarm_threshold_ = 0;
  laser_bias_current_high_warning_threshold_ = 0;
  laser_bias_current_low_warning_threshold_ = 0;
  module_temp_high_alarm_ = false;
  module_temp_low_alarm_ = false;
  module_temp_high_warning_ = false;
  module_temp_low_warning_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpticsDiagStats::~OpticsDiagStats() {
  // @@protoc_insertion_point(destructor:OpticsDiagStats)
  SharedDtor();
}

void OpticsDiagStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpticsDiagStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpticsDiagStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpticsDiagStats_descriptor_;
}

const OpticsDiagStats& OpticsDiagStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_optics_2eproto();
  return *default_instance_;
}

OpticsDiagStats* OpticsDiagStats::default_instance_ = NULL;

OpticsDiagStats* OpticsDiagStats::New(::google::protobuf::Arena* arena) const {
  OpticsDiagStats* n = new OpticsDiagStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpticsDiagStats::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpticsDiagStats*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(module_temp_, laser_output_power_low_alarm_threshold_dbm_);
    optics_type_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(laser_output_power_high_warning_threshold_dbm_, laser_bias_current_low_alarm_threshold_);
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(module_temp_high_alarm_, laser_bias_current_low_warning_threshold_);
  }

#undef ZR_HELPER_
#undef ZR_

  optics_lane_diag_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpticsDiagStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpticsDiagStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 optics_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &optics_type_)));
          set_has_optics_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_module_temp;
        break;
      }

      // optional double module_temp = 2;
      case 2: {
        if (tag == 17) {
         parse_module_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &module_temp_)));
          set_has_module_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_module_temp_high_alarm_threshold;
        break;
      }

      // optional double module_temp_high_alarm_threshold = 3;
      case 3: {
        if (tag == 25) {
         parse_module_temp_high_alarm_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &module_temp_high_alarm_threshold_)));
          set_has_module_temp_high_alarm_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_module_temp_low_alarm_threshold;
        break;
      }

      // optional double module_temp_low_alarm_threshold = 4;
      case 4: {
        if (tag == 33) {
         parse_module_temp_low_alarm_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &module_temp_low_alarm_threshold_)));
          set_has_module_temp_low_alarm_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_module_temp_high_warning_threshold;
        break;
      }

      // optional double module_temp_high_warning_threshold = 5;
      case 5: {
        if (tag == 41) {
         parse_module_temp_high_warning_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &module_temp_high_warning_threshold_)));
          set_has_module_temp_high_warning_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_module_temp_low_warning_threshold;
        break;
      }

      // optional double module_temp_low_warning_threshold = 6;
      case 6: {
        if (tag == 49) {
         parse_module_temp_low_warning_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &module_temp_low_warning_threshold_)));
          set_has_module_temp_low_warning_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_laser_output_power_high_alarm_threshold_dbm;
        break;
      }

      // optional double laser_output_power_high_alarm_threshold_dbm = 7;
      case 7: {
        if (tag == 57) {
         parse_laser_output_power_high_alarm_threshold_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_output_power_high_alarm_threshold_dbm_)));
          set_has_laser_output_power_high_alarm_threshold_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_laser_output_power_low_alarm_threshold_dbm;
        break;
      }

      // optional double laser_output_power_low_alarm_threshold_dbm = 8;
      case 8: {
        if (tag == 65) {
         parse_laser_output_power_low_alarm_threshold_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_output_power_low_alarm_threshold_dbm_)));
          set_has_laser_output_power_low_alarm_threshold_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_laser_output_power_high_warning_threshold_dbm;
        break;
      }

      // optional double laser_output_power_high_warning_threshold_dbm = 9;
      case 9: {
        if (tag == 73) {
         parse_laser_output_power_high_warning_threshold_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_output_power_high_warning_threshold_dbm_)));
          set_has_laser_output_power_high_warning_threshold_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_laser_output_power_low_warning_threshold_dbm;
        break;
      }

      // optional double laser_output_power_low_warning_threshold_dbm = 10;
      case 10: {
        if (tag == 81) {
         parse_laser_output_power_low_warning_threshold_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_output_power_low_warning_threshold_dbm_)));
          set_has_laser_output_power_low_warning_threshold_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_laser_rx_power_high_alarm_threshold_dbm;
        break;
      }

      // optional double laser_rx_power_high_alarm_threshold_dbm = 11;
      case 11: {
        if (tag == 89) {
         parse_laser_rx_power_high_alarm_threshold_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_rx_power_high_alarm_threshold_dbm_)));
          set_has_laser_rx_power_high_alarm_threshold_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_laser_rx_power_low_alarm_threshold_dbm;
        break;
      }

      // optional double laser_rx_power_low_alarm_threshold_dbm = 12;
      case 12: {
        if (tag == 97) {
         parse_laser_rx_power_low_alarm_threshold_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_rx_power_low_alarm_threshold_dbm_)));
          set_has_laser_rx_power_low_alarm_threshold_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_laser_rx_power_high_warning_threshold_dbm;
        break;
      }

      // optional double laser_rx_power_high_warning_threshold_dbm = 13;
      case 13: {
        if (tag == 105) {
         parse_laser_rx_power_high_warning_threshold_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_rx_power_high_warning_threshold_dbm_)));
          set_has_laser_rx_power_high_warning_threshold_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_laser_rx_power_low_warning_threshold_dbm;
        break;
      }

      // optional double laser_rx_power_low_warning_threshold_dbm = 14;
      case 14: {
        if (tag == 113) {
         parse_laser_rx_power_low_warning_threshold_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_rx_power_low_warning_threshold_dbm_)));
          set_has_laser_rx_power_low_warning_threshold_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_laser_bias_current_high_alarm_threshold;
        break;
      }

      // optional double laser_bias_current_high_alarm_threshold = 15;
      case 15: {
        if (tag == 121) {
         parse_laser_bias_current_high_alarm_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_bias_current_high_alarm_threshold_)));
          set_has_laser_bias_current_high_alarm_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_laser_bias_current_low_alarm_threshold;
        break;
      }

      // optional double laser_bias_current_low_alarm_threshold = 16;
      case 16: {
        if (tag == 129) {
         parse_laser_bias_current_low_alarm_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_bias_current_low_alarm_threshold_)));
          set_has_laser_bias_current_low_alarm_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_laser_bias_current_high_warning_threshold;
        break;
      }

      // optional double laser_bias_current_high_warning_threshold = 17;
      case 17: {
        if (tag == 137) {
         parse_laser_bias_current_high_warning_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_bias_current_high_warning_threshold_)));
          set_has_laser_bias_current_high_warning_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_laser_bias_current_low_warning_threshold;
        break;
      }

      // optional double laser_bias_current_low_warning_threshold = 18;
      case 18: {
        if (tag == 145) {
         parse_laser_bias_current_low_warning_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &laser_bias_current_low_warning_threshold_)));
          set_has_laser_bias_current_low_warning_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_module_temp_high_alarm;
        break;
      }

      // optional bool module_temp_high_alarm = 19;
      case 19: {
        if (tag == 152) {
         parse_module_temp_high_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &module_temp_high_alarm_)));
          set_has_module_temp_high_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_module_temp_low_alarm;
        break;
      }

      // optional bool module_temp_low_alarm = 20;
      case 20: {
        if (tag == 160) {
         parse_module_temp_low_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &module_temp_low_alarm_)));
          set_has_module_temp_low_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_module_temp_high_warning;
        break;
      }

      // optional bool module_temp_high_warning = 21;
      case 21: {
        if (tag == 168) {
         parse_module_temp_high_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &module_temp_high_warning_)));
          set_has_module_temp_high_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_module_temp_low_warning;
        break;
      }

      // optional bool module_temp_low_warning = 22;
      case 22: {
        if (tag == 176) {
         parse_module_temp_low_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &module_temp_low_warning_)));
          set_has_module_temp_low_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_optics_lane_diag_stats;
        break;
      }

      // repeated .OpticsDiagLaneStats optics_lane_diag_stats = 23;
      case 23: {
        if (tag == 186) {
         parse_optics_lane_diag_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_optics_lane_diag_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_optics_lane_diag_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_loop_optics_lane_diag_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpticsDiagStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpticsDiagStats)
  return false;
#undef DO_
}

void OpticsDiagStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpticsDiagStats)
  // optional uint32 optics_type = 1;
  if (has_optics_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->optics_type(), output);
  }

  // optional double module_temp = 2;
  if (has_module_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->module_temp(), output);
  }

  // optional double module_temp_high_alarm_threshold = 3;
  if (has_module_temp_high_alarm_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->module_temp_high_alarm_threshold(), output);
  }

  // optional double module_temp_low_alarm_threshold = 4;
  if (has_module_temp_low_alarm_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->module_temp_low_alarm_threshold(), output);
  }

  // optional double module_temp_high_warning_threshold = 5;
  if (has_module_temp_high_warning_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->module_temp_high_warning_threshold(), output);
  }

  // optional double module_temp_low_warning_threshold = 6;
  if (has_module_temp_low_warning_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->module_temp_low_warning_threshold(), output);
  }

  // optional double laser_output_power_high_alarm_threshold_dbm = 7;
  if (has_laser_output_power_high_alarm_threshold_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->laser_output_power_high_alarm_threshold_dbm(), output);
  }

  // optional double laser_output_power_low_alarm_threshold_dbm = 8;
  if (has_laser_output_power_low_alarm_threshold_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->laser_output_power_low_alarm_threshold_dbm(), output);
  }

  // optional double laser_output_power_high_warning_threshold_dbm = 9;
  if (has_laser_output_power_high_warning_threshold_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->laser_output_power_high_warning_threshold_dbm(), output);
  }

  // optional double laser_output_power_low_warning_threshold_dbm = 10;
  if (has_laser_output_power_low_warning_threshold_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->laser_output_power_low_warning_threshold_dbm(), output);
  }

  // optional double laser_rx_power_high_alarm_threshold_dbm = 11;
  if (has_laser_rx_power_high_alarm_threshold_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->laser_rx_power_high_alarm_threshold_dbm(), output);
  }

  // optional double laser_rx_power_low_alarm_threshold_dbm = 12;
  if (has_laser_rx_power_low_alarm_threshold_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->laser_rx_power_low_alarm_threshold_dbm(), output);
  }

  // optional double laser_rx_power_high_warning_threshold_dbm = 13;
  if (has_laser_rx_power_high_warning_threshold_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->laser_rx_power_high_warning_threshold_dbm(), output);
  }

  // optional double laser_rx_power_low_warning_threshold_dbm = 14;
  if (has_laser_rx_power_low_warning_threshold_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->laser_rx_power_low_warning_threshold_dbm(), output);
  }

  // optional double laser_bias_current_high_alarm_threshold = 15;
  if (has_laser_bias_current_high_alarm_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->laser_bias_current_high_alarm_threshold(), output);
  }

  // optional double laser_bias_current_low_alarm_threshold = 16;
  if (has_laser_bias_current_low_alarm_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->laser_bias_current_low_alarm_threshold(), output);
  }

  // optional double laser_bias_current_high_warning_threshold = 17;
  if (has_laser_bias_current_high_warning_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->laser_bias_current_high_warning_threshold(), output);
  }

  // optional double laser_bias_current_low_warning_threshold = 18;
  if (has_laser_bias_current_low_warning_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->laser_bias_current_low_warning_threshold(), output);
  }

  // optional bool module_temp_high_alarm = 19;
  if (has_module_temp_high_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->module_temp_high_alarm(), output);
  }

  // optional bool module_temp_low_alarm = 20;
  if (has_module_temp_low_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->module_temp_low_alarm(), output);
  }

  // optional bool module_temp_high_warning = 21;
  if (has_module_temp_high_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->module_temp_high_warning(), output);
  }

  // optional bool module_temp_low_warning = 22;
  if (has_module_temp_low_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->module_temp_low_warning(), output);
  }

  // repeated .OpticsDiagLaneStats optics_lane_diag_stats = 23;
  for (unsigned int i = 0, n = this->optics_lane_diag_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->optics_lane_diag_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpticsDiagStats)
}

::google::protobuf::uint8* OpticsDiagStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpticsDiagStats)
  // optional uint32 optics_type = 1;
  if (has_optics_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->optics_type(), target);
  }

  // optional double module_temp = 2;
  if (has_module_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->module_temp(), target);
  }

  // optional double module_temp_high_alarm_threshold = 3;
  if (has_module_temp_high_alarm_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->module_temp_high_alarm_threshold(), target);
  }

  // optional double module_temp_low_alarm_threshold = 4;
  if (has_module_temp_low_alarm_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->module_temp_low_alarm_threshold(), target);
  }

  // optional double module_temp_high_warning_threshold = 5;
  if (has_module_temp_high_warning_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->module_temp_high_warning_threshold(), target);
  }

  // optional double module_temp_low_warning_threshold = 6;
  if (has_module_temp_low_warning_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->module_temp_low_warning_threshold(), target);
  }

  // optional double laser_output_power_high_alarm_threshold_dbm = 7;
  if (has_laser_output_power_high_alarm_threshold_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->laser_output_power_high_alarm_threshold_dbm(), target);
  }

  // optional double laser_output_power_low_alarm_threshold_dbm = 8;
  if (has_laser_output_power_low_alarm_threshold_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->laser_output_power_low_alarm_threshold_dbm(), target);
  }

  // optional double laser_output_power_high_warning_threshold_dbm = 9;
  if (has_laser_output_power_high_warning_threshold_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->laser_output_power_high_warning_threshold_dbm(), target);
  }

  // optional double laser_output_power_low_warning_threshold_dbm = 10;
  if (has_laser_output_power_low_warning_threshold_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->laser_output_power_low_warning_threshold_dbm(), target);
  }

  // optional double laser_rx_power_high_alarm_threshold_dbm = 11;
  if (has_laser_rx_power_high_alarm_threshold_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->laser_rx_power_high_alarm_threshold_dbm(), target);
  }

  // optional double laser_rx_power_low_alarm_threshold_dbm = 12;
  if (has_laser_rx_power_low_alarm_threshold_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->laser_rx_power_low_alarm_threshold_dbm(), target);
  }

  // optional double laser_rx_power_high_warning_threshold_dbm = 13;
  if (has_laser_rx_power_high_warning_threshold_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->laser_rx_power_high_warning_threshold_dbm(), target);
  }

  // optional double laser_rx_power_low_warning_threshold_dbm = 14;
  if (has_laser_rx_power_low_warning_threshold_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->laser_rx_power_low_warning_threshold_dbm(), target);
  }

  // optional double laser_bias_current_high_alarm_threshold = 15;
  if (has_laser_bias_current_high_alarm_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->laser_bias_current_high_alarm_threshold(), target);
  }

  // optional double laser_bias_current_low_alarm_threshold = 16;
  if (has_laser_bias_current_low_alarm_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->laser_bias_current_low_alarm_threshold(), target);
  }

  // optional double laser_bias_current_high_warning_threshold = 17;
  if (has_laser_bias_current_high_warning_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->laser_bias_current_high_warning_threshold(), target);
  }

  // optional double laser_bias_current_low_warning_threshold = 18;
  if (has_laser_bias_current_low_warning_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->laser_bias_current_low_warning_threshold(), target);
  }

  // optional bool module_temp_high_alarm = 19;
  if (has_module_temp_high_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->module_temp_high_alarm(), target);
  }

  // optional bool module_temp_low_alarm = 20;
  if (has_module_temp_low_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->module_temp_low_alarm(), target);
  }

  // optional bool module_temp_high_warning = 21;
  if (has_module_temp_high_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->module_temp_high_warning(), target);
  }

  // optional bool module_temp_low_warning = 22;
  if (has_module_temp_low_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->module_temp_low_warning(), target);
  }

  // repeated .OpticsDiagLaneStats optics_lane_diag_stats = 23;
  for (unsigned int i = 0, n = this->optics_lane_diag_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->optics_lane_diag_stats(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpticsDiagStats)
  return target;
}

int OpticsDiagStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 optics_type = 1;
    if (has_optics_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optics_type());
    }

    // optional double module_temp = 2;
    if (has_module_temp()) {
      total_size += 1 + 8;
    }

    // optional double module_temp_high_alarm_threshold = 3;
    if (has_module_temp_high_alarm_threshold()) {
      total_size += 1 + 8;
    }

    // optional double module_temp_low_alarm_threshold = 4;
    if (has_module_temp_low_alarm_threshold()) {
      total_size += 1 + 8;
    }

    // optional double module_temp_high_warning_threshold = 5;
    if (has_module_temp_high_warning_threshold()) {
      total_size += 1 + 8;
    }

    // optional double module_temp_low_warning_threshold = 6;
    if (has_module_temp_low_warning_threshold()) {
      total_size += 1 + 8;
    }

    // optional double laser_output_power_high_alarm_threshold_dbm = 7;
    if (has_laser_output_power_high_alarm_threshold_dbm()) {
      total_size += 1 + 8;
    }

    // optional double laser_output_power_low_alarm_threshold_dbm = 8;
    if (has_laser_output_power_low_alarm_threshold_dbm()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double laser_output_power_high_warning_threshold_dbm = 9;
    if (has_laser_output_power_high_warning_threshold_dbm()) {
      total_size += 1 + 8;
    }

    // optional double laser_output_power_low_warning_threshold_dbm = 10;
    if (has_laser_output_power_low_warning_threshold_dbm()) {
      total_size += 1 + 8;
    }

    // optional double laser_rx_power_high_alarm_threshold_dbm = 11;
    if (has_laser_rx_power_high_alarm_threshold_dbm()) {
      total_size += 1 + 8;
    }

    // optional double laser_rx_power_low_alarm_threshold_dbm = 12;
    if (has_laser_rx_power_low_alarm_threshold_dbm()) {
      total_size += 1 + 8;
    }

    // optional double laser_rx_power_high_warning_threshold_dbm = 13;
    if (has_laser_rx_power_high_warning_threshold_dbm()) {
      total_size += 1 + 8;
    }

    // optional double laser_rx_power_low_warning_threshold_dbm = 14;
    if (has_laser_rx_power_low_warning_threshold_dbm()) {
      total_size += 1 + 8;
    }

    // optional double laser_bias_current_high_alarm_threshold = 15;
    if (has_laser_bias_current_high_alarm_threshold()) {
      total_size += 1 + 8;
    }

    // optional double laser_bias_current_low_alarm_threshold = 16;
    if (has_laser_bias_current_low_alarm_threshold()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional double laser_bias_current_high_warning_threshold = 17;
    if (has_laser_bias_current_high_warning_threshold()) {
      total_size += 2 + 8;
    }

    // optional double laser_bias_current_low_warning_threshold = 18;
    if (has_laser_bias_current_low_warning_threshold()) {
      total_size += 2 + 8;
    }

    // optional bool module_temp_high_alarm = 19;
    if (has_module_temp_high_alarm()) {
      total_size += 2 + 1;
    }

    // optional bool module_temp_low_alarm = 20;
    if (has_module_temp_low_alarm()) {
      total_size += 2 + 1;
    }

    // optional bool module_temp_high_warning = 21;
    if (has_module_temp_high_warning()) {
      total_size += 2 + 1;
    }

    // optional bool module_temp_low_warning = 22;
    if (has_module_temp_low_warning()) {
      total_size += 2 + 1;
    }

  }
  // repeated .OpticsDiagLaneStats optics_lane_diag_stats = 23;
  total_size += 2 * this->optics_lane_diag_stats_size();
  for (int i = 0; i < this->optics_lane_diag_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optics_lane_diag_stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticsDiagStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpticsDiagStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpticsDiagStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpticsDiagStats::MergeFrom(const OpticsDiagStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  optics_lane_diag_stats_.MergeFrom(from.optics_lane_diag_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optics_type()) {
      set_optics_type(from.optics_type());
    }
    if (from.has_module_temp()) {
      set_module_temp(from.module_temp());
    }
    if (from.has_module_temp_high_alarm_threshold()) {
      set_module_temp_high_alarm_threshold(from.module_temp_high_alarm_threshold());
    }
    if (from.has_module_temp_low_alarm_threshold()) {
      set_module_temp_low_alarm_threshold(from.module_temp_low_alarm_threshold());
    }
    if (from.has_module_temp_high_warning_threshold()) {
      set_module_temp_high_warning_threshold(from.module_temp_high_warning_threshold());
    }
    if (from.has_module_temp_low_warning_threshold()) {
      set_module_temp_low_warning_threshold(from.module_temp_low_warning_threshold());
    }
    if (from.has_laser_output_power_high_alarm_threshold_dbm()) {
      set_laser_output_power_high_alarm_threshold_dbm(from.laser_output_power_high_alarm_threshold_dbm());
    }
    if (from.has_laser_output_power_low_alarm_threshold_dbm()) {
      set_laser_output_power_low_alarm_threshold_dbm(from.laser_output_power_low_alarm_threshold_dbm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_laser_output_power_high_warning_threshold_dbm()) {
      set_laser_output_power_high_warning_threshold_dbm(from.laser_output_power_high_warning_threshold_dbm());
    }
    if (from.has_laser_output_power_low_warning_threshold_dbm()) {
      set_laser_output_power_low_warning_threshold_dbm(from.laser_output_power_low_warning_threshold_dbm());
    }
    if (from.has_laser_rx_power_high_alarm_threshold_dbm()) {
      set_laser_rx_power_high_alarm_threshold_dbm(from.laser_rx_power_high_alarm_threshold_dbm());
    }
    if (from.has_laser_rx_power_low_alarm_threshold_dbm()) {
      set_laser_rx_power_low_alarm_threshold_dbm(from.laser_rx_power_low_alarm_threshold_dbm());
    }
    if (from.has_laser_rx_power_high_warning_threshold_dbm()) {
      set_laser_rx_power_high_warning_threshold_dbm(from.laser_rx_power_high_warning_threshold_dbm());
    }
    if (from.has_laser_rx_power_low_warning_threshold_dbm()) {
      set_laser_rx_power_low_warning_threshold_dbm(from.laser_rx_power_low_warning_threshold_dbm());
    }
    if (from.has_laser_bias_current_high_alarm_threshold()) {
      set_laser_bias_current_high_alarm_threshold(from.laser_bias_current_high_alarm_threshold());
    }
    if (from.has_laser_bias_current_low_alarm_threshold()) {
      set_laser_bias_current_low_alarm_threshold(from.laser_bias_current_low_alarm_threshold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_laser_bias_current_high_warning_threshold()) {
      set_laser_bias_current_high_warning_threshold(from.laser_bias_current_high_warning_threshold());
    }
    if (from.has_laser_bias_current_low_warning_threshold()) {
      set_laser_bias_current_low_warning_threshold(from.laser_bias_current_low_warning_threshold());
    }
    if (from.has_module_temp_high_alarm()) {
      set_module_temp_high_alarm(from.module_temp_high_alarm());
    }
    if (from.has_module_temp_low_alarm()) {
      set_module_temp_low_alarm(from.module_temp_low_alarm());
    }
    if (from.has_module_temp_high_warning()) {
      set_module_temp_high_warning(from.module_temp_high_warning());
    }
    if (from.has_module_temp_low_warning()) {
      set_module_temp_low_warning(from.module_temp_low_warning());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpticsDiagStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpticsDiagStats::CopyFrom(const OpticsDiagStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticsDiagStats::IsInitialized() const {

  return true;
}

void OpticsDiagStats::Swap(OpticsDiagStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticsDiagStats::InternalSwap(OpticsDiagStats* other) {
  std::swap(optics_type_, other->optics_type_);
  std::swap(module_temp_, other->module_temp_);
  std::swap(module_temp_high_alarm_threshold_, other->module_temp_high_alarm_threshold_);
  std::swap(module_temp_low_alarm_threshold_, other->module_temp_low_alarm_threshold_);
  std::swap(module_temp_high_warning_threshold_, other->module_temp_high_warning_threshold_);
  std::swap(module_temp_low_warning_threshold_, other->module_temp_low_warning_threshold_);
  std::swap(laser_output_power_high_alarm_threshold_dbm_, other->laser_output_power_high_alarm_threshold_dbm_);
  std::swap(laser_output_power_low_alarm_threshold_dbm_, other->laser_output_power_low_alarm_threshold_dbm_);
  std::swap(laser_output_power_high_warning_threshold_dbm_, other->laser_output_power_high_warning_threshold_dbm_);
  std::swap(laser_output_power_low_warning_threshold_dbm_, other->laser_output_power_low_warning_threshold_dbm_);
  std::swap(laser_rx_power_high_alarm_threshold_dbm_, other->laser_rx_power_high_alarm_threshold_dbm_);
  std::swap(laser_rx_power_low_alarm_threshold_dbm_, other->laser_rx_power_low_alarm_threshold_dbm_);
  std::swap(laser_rx_power_high_warning_threshold_dbm_, other->laser_rx_power_high_warning_threshold_dbm_);
  std::swap(laser_rx_power_low_warning_threshold_dbm_, other->laser_rx_power_low_warning_threshold_dbm_);
  std::swap(laser_bias_current_high_alarm_threshold_, other->laser_bias_current_high_alarm_threshold_);
  std::swap(laser_bias_current_low_alarm_threshold_, other->laser_bias_current_low_alarm_threshold_);
  std::swap(laser_bias_current_high_warning_threshold_, other->laser_bias_current_high_warning_threshold_);
  std::swap(laser_bias_current_low_warning_threshold_, other->laser_bias_current_low_warning_threshold_);
  std::swap(module_temp_high_alarm_, other->module_temp_high_alarm_);
  std::swap(module_temp_low_alarm_, other->module_temp_low_alarm_);
  std::swap(module_temp_high_warning_, other->module_temp_high_warning_);
  std::swap(module_temp_low_warning_, other->module_temp_low_warning_);
  optics_lane_diag_stats_.UnsafeArenaSwap(&other->optics_lane_diag_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpticsDiagStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpticsDiagStats_descriptor_;
  metadata.reflection = OpticsDiagStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpticsDiagStats

// optional uint32 optics_type = 1;
bool OpticsDiagStats::has_optics_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpticsDiagStats::set_has_optics_type() {
  _has_bits_[0] |= 0x00000001u;
}
void OpticsDiagStats::clear_has_optics_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpticsDiagStats::clear_optics_type() {
  optics_type_ = 0u;
  clear_has_optics_type();
}
 ::google::protobuf::uint32 OpticsDiagStats::optics_type() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.optics_type)
  return optics_type_;
}
 void OpticsDiagStats::set_optics_type(::google::protobuf::uint32 value) {
  set_has_optics_type();
  optics_type_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.optics_type)
}

// optional double module_temp = 2;
bool OpticsDiagStats::has_module_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpticsDiagStats::set_has_module_temp() {
  _has_bits_[0] |= 0x00000002u;
}
void OpticsDiagStats::clear_has_module_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpticsDiagStats::clear_module_temp() {
  module_temp_ = 0;
  clear_has_module_temp();
}
 double OpticsDiagStats::module_temp() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp)
  return module_temp_;
}
 void OpticsDiagStats::set_module_temp(double value) {
  set_has_module_temp();
  module_temp_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp)
}

// optional double module_temp_high_alarm_threshold = 3;
bool OpticsDiagStats::has_module_temp_high_alarm_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpticsDiagStats::set_has_module_temp_high_alarm_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
void OpticsDiagStats::clear_has_module_temp_high_alarm_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpticsDiagStats::clear_module_temp_high_alarm_threshold() {
  module_temp_high_alarm_threshold_ = 0;
  clear_has_module_temp_high_alarm_threshold();
}
 double OpticsDiagStats::module_temp_high_alarm_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_high_alarm_threshold)
  return module_temp_high_alarm_threshold_;
}
 void OpticsDiagStats::set_module_temp_high_alarm_threshold(double value) {
  set_has_module_temp_high_alarm_threshold();
  module_temp_high_alarm_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_high_alarm_threshold)
}

// optional double module_temp_low_alarm_threshold = 4;
bool OpticsDiagStats::has_module_temp_low_alarm_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpticsDiagStats::set_has_module_temp_low_alarm_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void OpticsDiagStats::clear_has_module_temp_low_alarm_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpticsDiagStats::clear_module_temp_low_alarm_threshold() {
  module_temp_low_alarm_threshold_ = 0;
  clear_has_module_temp_low_alarm_threshold();
}
 double OpticsDiagStats::module_temp_low_alarm_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_low_alarm_threshold)
  return module_temp_low_alarm_threshold_;
}
 void OpticsDiagStats::set_module_temp_low_alarm_threshold(double value) {
  set_has_module_temp_low_alarm_threshold();
  module_temp_low_alarm_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_low_alarm_threshold)
}

// optional double module_temp_high_warning_threshold = 5;
bool OpticsDiagStats::has_module_temp_high_warning_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OpticsDiagStats::set_has_module_temp_high_warning_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
void OpticsDiagStats::clear_has_module_temp_high_warning_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
void OpticsDiagStats::clear_module_temp_high_warning_threshold() {
  module_temp_high_warning_threshold_ = 0;
  clear_has_module_temp_high_warning_threshold();
}
 double OpticsDiagStats::module_temp_high_warning_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_high_warning_threshold)
  return module_temp_high_warning_threshold_;
}
 void OpticsDiagStats::set_module_temp_high_warning_threshold(double value) {
  set_has_module_temp_high_warning_threshold();
  module_temp_high_warning_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_high_warning_threshold)
}

// optional double module_temp_low_warning_threshold = 6;
bool OpticsDiagStats::has_module_temp_low_warning_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OpticsDiagStats::set_has_module_temp_low_warning_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
void OpticsDiagStats::clear_has_module_temp_low_warning_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
void OpticsDiagStats::clear_module_temp_low_warning_threshold() {
  module_temp_low_warning_threshold_ = 0;
  clear_has_module_temp_low_warning_threshold();
}
 double OpticsDiagStats::module_temp_low_warning_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_low_warning_threshold)
  return module_temp_low_warning_threshold_;
}
 void OpticsDiagStats::set_module_temp_low_warning_threshold(double value) {
  set_has_module_temp_low_warning_threshold();
  module_temp_low_warning_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_low_warning_threshold)
}

// optional double laser_output_power_high_alarm_threshold_dbm = 7;
bool OpticsDiagStats::has_laser_output_power_high_alarm_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OpticsDiagStats::set_has_laser_output_power_high_alarm_threshold_dbm() {
  _has_bits_[0] |= 0x00000040u;
}
void OpticsDiagStats::clear_has_laser_output_power_high_alarm_threshold_dbm() {
  _has_bits_[0] &= ~0x00000040u;
}
void OpticsDiagStats::clear_laser_output_power_high_alarm_threshold_dbm() {
  laser_output_power_high_alarm_threshold_dbm_ = 0;
  clear_has_laser_output_power_high_alarm_threshold_dbm();
}
 double OpticsDiagStats::laser_output_power_high_alarm_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_output_power_high_alarm_threshold_dbm)
  return laser_output_power_high_alarm_threshold_dbm_;
}
 void OpticsDiagStats::set_laser_output_power_high_alarm_threshold_dbm(double value) {
  set_has_laser_output_power_high_alarm_threshold_dbm();
  laser_output_power_high_alarm_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_output_power_high_alarm_threshold_dbm)
}

// optional double laser_output_power_low_alarm_threshold_dbm = 8;
bool OpticsDiagStats::has_laser_output_power_low_alarm_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OpticsDiagStats::set_has_laser_output_power_low_alarm_threshold_dbm() {
  _has_bits_[0] |= 0x00000080u;
}
void OpticsDiagStats::clear_has_laser_output_power_low_alarm_threshold_dbm() {
  _has_bits_[0] &= ~0x00000080u;
}
void OpticsDiagStats::clear_laser_output_power_low_alarm_threshold_dbm() {
  laser_output_power_low_alarm_threshold_dbm_ = 0;
  clear_has_laser_output_power_low_alarm_threshold_dbm();
}
 double OpticsDiagStats::laser_output_power_low_alarm_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_output_power_low_alarm_threshold_dbm)
  return laser_output_power_low_alarm_threshold_dbm_;
}
 void OpticsDiagStats::set_laser_output_power_low_alarm_threshold_dbm(double value) {
  set_has_laser_output_power_low_alarm_threshold_dbm();
  laser_output_power_low_alarm_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_output_power_low_alarm_threshold_dbm)
}

// optional double laser_output_power_high_warning_threshold_dbm = 9;
bool OpticsDiagStats::has_laser_output_power_high_warning_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OpticsDiagStats::set_has_laser_output_power_high_warning_threshold_dbm() {
  _has_bits_[0] |= 0x00000100u;
}
void OpticsDiagStats::clear_has_laser_output_power_high_warning_threshold_dbm() {
  _has_bits_[0] &= ~0x00000100u;
}
void OpticsDiagStats::clear_laser_output_power_high_warning_threshold_dbm() {
  laser_output_power_high_warning_threshold_dbm_ = 0;
  clear_has_laser_output_power_high_warning_threshold_dbm();
}
 double OpticsDiagStats::laser_output_power_high_warning_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_output_power_high_warning_threshold_dbm)
  return laser_output_power_high_warning_threshold_dbm_;
}
 void OpticsDiagStats::set_laser_output_power_high_warning_threshold_dbm(double value) {
  set_has_laser_output_power_high_warning_threshold_dbm();
  laser_output_power_high_warning_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_output_power_high_warning_threshold_dbm)
}

// optional double laser_output_power_low_warning_threshold_dbm = 10;
bool OpticsDiagStats::has_laser_output_power_low_warning_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OpticsDiagStats::set_has_laser_output_power_low_warning_threshold_dbm() {
  _has_bits_[0] |= 0x00000200u;
}
void OpticsDiagStats::clear_has_laser_output_power_low_warning_threshold_dbm() {
  _has_bits_[0] &= ~0x00000200u;
}
void OpticsDiagStats::clear_laser_output_power_low_warning_threshold_dbm() {
  laser_output_power_low_warning_threshold_dbm_ = 0;
  clear_has_laser_output_power_low_warning_threshold_dbm();
}
 double OpticsDiagStats::laser_output_power_low_warning_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_output_power_low_warning_threshold_dbm)
  return laser_output_power_low_warning_threshold_dbm_;
}
 void OpticsDiagStats::set_laser_output_power_low_warning_threshold_dbm(double value) {
  set_has_laser_output_power_low_warning_threshold_dbm();
  laser_output_power_low_warning_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_output_power_low_warning_threshold_dbm)
}

// optional double laser_rx_power_high_alarm_threshold_dbm = 11;
bool OpticsDiagStats::has_laser_rx_power_high_alarm_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OpticsDiagStats::set_has_laser_rx_power_high_alarm_threshold_dbm() {
  _has_bits_[0] |= 0x00000400u;
}
void OpticsDiagStats::clear_has_laser_rx_power_high_alarm_threshold_dbm() {
  _has_bits_[0] &= ~0x00000400u;
}
void OpticsDiagStats::clear_laser_rx_power_high_alarm_threshold_dbm() {
  laser_rx_power_high_alarm_threshold_dbm_ = 0;
  clear_has_laser_rx_power_high_alarm_threshold_dbm();
}
 double OpticsDiagStats::laser_rx_power_high_alarm_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_rx_power_high_alarm_threshold_dbm)
  return laser_rx_power_high_alarm_threshold_dbm_;
}
 void OpticsDiagStats::set_laser_rx_power_high_alarm_threshold_dbm(double value) {
  set_has_laser_rx_power_high_alarm_threshold_dbm();
  laser_rx_power_high_alarm_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_rx_power_high_alarm_threshold_dbm)
}

// optional double laser_rx_power_low_alarm_threshold_dbm = 12;
bool OpticsDiagStats::has_laser_rx_power_low_alarm_threshold_dbm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OpticsDiagStats::set_has_laser_rx_power_low_alarm_threshold_dbm() {
  _has_bits_[0] |= 0x00000800u;
}
void OpticsDiagStats::clear_has_laser_rx_power_low_alarm_threshold_dbm() {
  _has_bits_[0] &= ~0x00000800u;
}
void OpticsDiagStats::clear_laser_rx_power_low_alarm_threshold_dbm() {
  laser_rx_power_low_alarm_threshold_dbm_ = 0;
  clear_has_laser_rx_power_low_alarm_threshold_dbm();
}
 double OpticsDiagStats::laser_rx_power_low_alarm_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_rx_power_low_alarm_threshold_dbm)
  return laser_rx_power_low_alarm_threshold_dbm_;
}
 void OpticsDiagStats::set_laser_rx_power_low_alarm_threshold_dbm(double value) {
  set_has_laser_rx_power_low_alarm_threshold_dbm();
  laser_rx_power_low_alarm_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_rx_power_low_alarm_threshold_dbm)
}

// optional double laser_rx_power_high_warning_threshold_dbm = 13;
bool OpticsDiagStats::has_laser_rx_power_high_warning_threshold_dbm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OpticsDiagStats::set_has_laser_rx_power_high_warning_threshold_dbm() {
  _has_bits_[0] |= 0x00001000u;
}
void OpticsDiagStats::clear_has_laser_rx_power_high_warning_threshold_dbm() {
  _has_bits_[0] &= ~0x00001000u;
}
void OpticsDiagStats::clear_laser_rx_power_high_warning_threshold_dbm() {
  laser_rx_power_high_warning_threshold_dbm_ = 0;
  clear_has_laser_rx_power_high_warning_threshold_dbm();
}
 double OpticsDiagStats::laser_rx_power_high_warning_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_rx_power_high_warning_threshold_dbm)
  return laser_rx_power_high_warning_threshold_dbm_;
}
 void OpticsDiagStats::set_laser_rx_power_high_warning_threshold_dbm(double value) {
  set_has_laser_rx_power_high_warning_threshold_dbm();
  laser_rx_power_high_warning_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_rx_power_high_warning_threshold_dbm)
}

// optional double laser_rx_power_low_warning_threshold_dbm = 14;
bool OpticsDiagStats::has_laser_rx_power_low_warning_threshold_dbm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OpticsDiagStats::set_has_laser_rx_power_low_warning_threshold_dbm() {
  _has_bits_[0] |= 0x00002000u;
}
void OpticsDiagStats::clear_has_laser_rx_power_low_warning_threshold_dbm() {
  _has_bits_[0] &= ~0x00002000u;
}
void OpticsDiagStats::clear_laser_rx_power_low_warning_threshold_dbm() {
  laser_rx_power_low_warning_threshold_dbm_ = 0;
  clear_has_laser_rx_power_low_warning_threshold_dbm();
}
 double OpticsDiagStats::laser_rx_power_low_warning_threshold_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_rx_power_low_warning_threshold_dbm)
  return laser_rx_power_low_warning_threshold_dbm_;
}
 void OpticsDiagStats::set_laser_rx_power_low_warning_threshold_dbm(double value) {
  set_has_laser_rx_power_low_warning_threshold_dbm();
  laser_rx_power_low_warning_threshold_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_rx_power_low_warning_threshold_dbm)
}

// optional double laser_bias_current_high_alarm_threshold = 15;
bool OpticsDiagStats::has_laser_bias_current_high_alarm_threshold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void OpticsDiagStats::set_has_laser_bias_current_high_alarm_threshold() {
  _has_bits_[0] |= 0x00004000u;
}
void OpticsDiagStats::clear_has_laser_bias_current_high_alarm_threshold() {
  _has_bits_[0] &= ~0x00004000u;
}
void OpticsDiagStats::clear_laser_bias_current_high_alarm_threshold() {
  laser_bias_current_high_alarm_threshold_ = 0;
  clear_has_laser_bias_current_high_alarm_threshold();
}
 double OpticsDiagStats::laser_bias_current_high_alarm_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_bias_current_high_alarm_threshold)
  return laser_bias_current_high_alarm_threshold_;
}
 void OpticsDiagStats::set_laser_bias_current_high_alarm_threshold(double value) {
  set_has_laser_bias_current_high_alarm_threshold();
  laser_bias_current_high_alarm_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_bias_current_high_alarm_threshold)
}

// optional double laser_bias_current_low_alarm_threshold = 16;
bool OpticsDiagStats::has_laser_bias_current_low_alarm_threshold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void OpticsDiagStats::set_has_laser_bias_current_low_alarm_threshold() {
  _has_bits_[0] |= 0x00008000u;
}
void OpticsDiagStats::clear_has_laser_bias_current_low_alarm_threshold() {
  _has_bits_[0] &= ~0x00008000u;
}
void OpticsDiagStats::clear_laser_bias_current_low_alarm_threshold() {
  laser_bias_current_low_alarm_threshold_ = 0;
  clear_has_laser_bias_current_low_alarm_threshold();
}
 double OpticsDiagStats::laser_bias_current_low_alarm_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_bias_current_low_alarm_threshold)
  return laser_bias_current_low_alarm_threshold_;
}
 void OpticsDiagStats::set_laser_bias_current_low_alarm_threshold(double value) {
  set_has_laser_bias_current_low_alarm_threshold();
  laser_bias_current_low_alarm_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_bias_current_low_alarm_threshold)
}

// optional double laser_bias_current_high_warning_threshold = 17;
bool OpticsDiagStats::has_laser_bias_current_high_warning_threshold() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void OpticsDiagStats::set_has_laser_bias_current_high_warning_threshold() {
  _has_bits_[0] |= 0x00010000u;
}
void OpticsDiagStats::clear_has_laser_bias_current_high_warning_threshold() {
  _has_bits_[0] &= ~0x00010000u;
}
void OpticsDiagStats::clear_laser_bias_current_high_warning_threshold() {
  laser_bias_current_high_warning_threshold_ = 0;
  clear_has_laser_bias_current_high_warning_threshold();
}
 double OpticsDiagStats::laser_bias_current_high_warning_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_bias_current_high_warning_threshold)
  return laser_bias_current_high_warning_threshold_;
}
 void OpticsDiagStats::set_laser_bias_current_high_warning_threshold(double value) {
  set_has_laser_bias_current_high_warning_threshold();
  laser_bias_current_high_warning_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_bias_current_high_warning_threshold)
}

// optional double laser_bias_current_low_warning_threshold = 18;
bool OpticsDiagStats::has_laser_bias_current_low_warning_threshold() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void OpticsDiagStats::set_has_laser_bias_current_low_warning_threshold() {
  _has_bits_[0] |= 0x00020000u;
}
void OpticsDiagStats::clear_has_laser_bias_current_low_warning_threshold() {
  _has_bits_[0] &= ~0x00020000u;
}
void OpticsDiagStats::clear_laser_bias_current_low_warning_threshold() {
  laser_bias_current_low_warning_threshold_ = 0;
  clear_has_laser_bias_current_low_warning_threshold();
}
 double OpticsDiagStats::laser_bias_current_low_warning_threshold() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.laser_bias_current_low_warning_threshold)
  return laser_bias_current_low_warning_threshold_;
}
 void OpticsDiagStats::set_laser_bias_current_low_warning_threshold(double value) {
  set_has_laser_bias_current_low_warning_threshold();
  laser_bias_current_low_warning_threshold_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.laser_bias_current_low_warning_threshold)
}

// optional bool module_temp_high_alarm = 19;
bool OpticsDiagStats::has_module_temp_high_alarm() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void OpticsDiagStats::set_has_module_temp_high_alarm() {
  _has_bits_[0] |= 0x00040000u;
}
void OpticsDiagStats::clear_has_module_temp_high_alarm() {
  _has_bits_[0] &= ~0x00040000u;
}
void OpticsDiagStats::clear_module_temp_high_alarm() {
  module_temp_high_alarm_ = false;
  clear_has_module_temp_high_alarm();
}
 bool OpticsDiagStats::module_temp_high_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_high_alarm)
  return module_temp_high_alarm_;
}
 void OpticsDiagStats::set_module_temp_high_alarm(bool value) {
  set_has_module_temp_high_alarm();
  module_temp_high_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_high_alarm)
}

// optional bool module_temp_low_alarm = 20;
bool OpticsDiagStats::has_module_temp_low_alarm() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void OpticsDiagStats::set_has_module_temp_low_alarm() {
  _has_bits_[0] |= 0x00080000u;
}
void OpticsDiagStats::clear_has_module_temp_low_alarm() {
  _has_bits_[0] &= ~0x00080000u;
}
void OpticsDiagStats::clear_module_temp_low_alarm() {
  module_temp_low_alarm_ = false;
  clear_has_module_temp_low_alarm();
}
 bool OpticsDiagStats::module_temp_low_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_low_alarm)
  return module_temp_low_alarm_;
}
 void OpticsDiagStats::set_module_temp_low_alarm(bool value) {
  set_has_module_temp_low_alarm();
  module_temp_low_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_low_alarm)
}

// optional bool module_temp_high_warning = 21;
bool OpticsDiagStats::has_module_temp_high_warning() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void OpticsDiagStats::set_has_module_temp_high_warning() {
  _has_bits_[0] |= 0x00100000u;
}
void OpticsDiagStats::clear_has_module_temp_high_warning() {
  _has_bits_[0] &= ~0x00100000u;
}
void OpticsDiagStats::clear_module_temp_high_warning() {
  module_temp_high_warning_ = false;
  clear_has_module_temp_high_warning();
}
 bool OpticsDiagStats::module_temp_high_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_high_warning)
  return module_temp_high_warning_;
}
 void OpticsDiagStats::set_module_temp_high_warning(bool value) {
  set_has_module_temp_high_warning();
  module_temp_high_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_high_warning)
}

// optional bool module_temp_low_warning = 22;
bool OpticsDiagStats::has_module_temp_low_warning() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void OpticsDiagStats::set_has_module_temp_low_warning() {
  _has_bits_[0] |= 0x00200000u;
}
void OpticsDiagStats::clear_has_module_temp_low_warning() {
  _has_bits_[0] &= ~0x00200000u;
}
void OpticsDiagStats::clear_module_temp_low_warning() {
  module_temp_low_warning_ = false;
  clear_has_module_temp_low_warning();
}
 bool OpticsDiagStats::module_temp_low_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.module_temp_low_warning)
  return module_temp_low_warning_;
}
 void OpticsDiagStats::set_module_temp_low_warning(bool value) {
  set_has_module_temp_low_warning();
  module_temp_low_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagStats.module_temp_low_warning)
}

// repeated .OpticsDiagLaneStats optics_lane_diag_stats = 23;
int OpticsDiagStats::optics_lane_diag_stats_size() const {
  return optics_lane_diag_stats_.size();
}
void OpticsDiagStats::clear_optics_lane_diag_stats() {
  optics_lane_diag_stats_.Clear();
}
const ::OpticsDiagLaneStats& OpticsDiagStats::optics_lane_diag_stats(int index) const {
  // @@protoc_insertion_point(field_get:OpticsDiagStats.optics_lane_diag_stats)
  return optics_lane_diag_stats_.Get(index);
}
::OpticsDiagLaneStats* OpticsDiagStats::mutable_optics_lane_diag_stats(int index) {
  // @@protoc_insertion_point(field_mutable:OpticsDiagStats.optics_lane_diag_stats)
  return optics_lane_diag_stats_.Mutable(index);
}
::OpticsDiagLaneStats* OpticsDiagStats::add_optics_lane_diag_stats() {
  // @@protoc_insertion_point(field_add:OpticsDiagStats.optics_lane_diag_stats)
  return optics_lane_diag_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::OpticsDiagLaneStats >*
OpticsDiagStats::mutable_optics_lane_diag_stats() {
  // @@protoc_insertion_point(field_mutable_list:OpticsDiagStats.optics_lane_diag_stats)
  return &optics_lane_diag_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::OpticsDiagLaneStats >&
OpticsDiagStats::optics_lane_diag_stats() const {
  // @@protoc_insertion_point(field_list:OpticsDiagStats.optics_lane_diag_stats)
  return optics_lane_diag_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int OpticsDiagLaneStats::kLaneNumberFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserTemperatureFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserOutputPowerDbmFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserReceiverPowerDbmFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserBiasCurrentFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserOutputPowerHighAlarmFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserOutputPowerLowAlarmFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserOutputPowerHighWarningFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserOutputPowerLowWarningFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserReceiverPowerHighAlarmFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserReceiverPowerLowAlarmFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserReceiverPowerHighWarningFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserReceiverPowerLowWarningFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserBiasCurrentHighAlarmFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserBiasCurrentLowAlarmFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserBiasCurrentHighWarningFieldNumber;
const int OpticsDiagLaneStats::kLaneLaserBiasCurrentLowWarningFieldNumber;
const int OpticsDiagLaneStats::kLaneTxLossOfSignalAlarmFieldNumber;
const int OpticsDiagLaneStats::kLaneRxLossOfSignalAlarmFieldNumber;
const int OpticsDiagLaneStats::kLaneTxLaserDisabledAlarmFieldNumber;
#endif  // !_MSC_VER

OpticsDiagLaneStats::OpticsDiagLaneStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpticsDiagLaneStats)
}

void OpticsDiagLaneStats::InitAsDefaultInstance() {
}

OpticsDiagLaneStats::OpticsDiagLaneStats(const OpticsDiagLaneStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpticsDiagLaneStats)
}

void OpticsDiagLaneStats::SharedCtor() {
  _cached_size_ = 0;
  lane_number_ = 0u;
  lane_laser_temperature_ = 0;
  lane_laser_output_power_dbm_ = 0;
  lane_laser_receiver_power_dbm_ = 0;
  lane_laser_bias_current_ = 0;
  lane_laser_output_power_high_alarm_ = false;
  lane_laser_output_power_low_alarm_ = false;
  lane_laser_output_power_high_warning_ = false;
  lane_laser_output_power_low_warning_ = false;
  lane_laser_receiver_power_high_alarm_ = false;
  lane_laser_receiver_power_low_alarm_ = false;
  lane_laser_receiver_power_high_warning_ = false;
  lane_laser_receiver_power_low_warning_ = false;
  lane_laser_bias_current_high_alarm_ = false;
  lane_laser_bias_current_low_alarm_ = false;
  lane_laser_bias_current_high_warning_ = false;
  lane_laser_bias_current_low_warning_ = false;
  lane_tx_loss_of_signal_alarm_ = false;
  lane_rx_loss_of_signal_alarm_ = false;
  lane_tx_laser_disabled_alarm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpticsDiagLaneStats::~OpticsDiagLaneStats() {
  // @@protoc_insertion_point(destructor:OpticsDiagLaneStats)
  SharedDtor();
}

void OpticsDiagLaneStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpticsDiagLaneStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpticsDiagLaneStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpticsDiagLaneStats_descriptor_;
}

const OpticsDiagLaneStats& OpticsDiagLaneStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_optics_2eproto();
  return *default_instance_;
}

OpticsDiagLaneStats* OpticsDiagLaneStats::default_instance_ = NULL;

OpticsDiagLaneStats* OpticsDiagLaneStats::New(::google::protobuf::Arena* arena) const {
  OpticsDiagLaneStats* n = new OpticsDiagLaneStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpticsDiagLaneStats::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OpticsDiagLaneStats*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(lane_laser_temperature_, lane_laser_output_power_high_warning_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(lane_laser_output_power_low_warning_, lane_laser_bias_current_high_warning_);
  }
  ZR_(lane_laser_bias_current_low_warning_, lane_tx_laser_disabled_alarm_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpticsDiagLaneStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpticsDiagLaneStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lane_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_number_)));
          set_has_lane_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lane_laser_temperature;
        break;
      }

      // optional double lane_laser_temperature = 2;
      case 2: {
        if (tag == 17) {
         parse_lane_laser_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_laser_temperature_)));
          set_has_lane_laser_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lane_laser_output_power_dbm;
        break;
      }

      // optional double lane_laser_output_power_dbm = 3;
      case 3: {
        if (tag == 25) {
         parse_lane_laser_output_power_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_laser_output_power_dbm_)));
          set_has_lane_laser_output_power_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lane_laser_receiver_power_dbm;
        break;
      }

      // optional double lane_laser_receiver_power_dbm = 4;
      case 4: {
        if (tag == 33) {
         parse_lane_laser_receiver_power_dbm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_laser_receiver_power_dbm_)));
          set_has_lane_laser_receiver_power_dbm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lane_laser_bias_current;
        break;
      }

      // optional double lane_laser_bias_current = 5;
      case 5: {
        if (tag == 41) {
         parse_lane_laser_bias_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_laser_bias_current_)));
          set_has_lane_laser_bias_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lane_laser_output_power_high_alarm;
        break;
      }

      // optional bool lane_laser_output_power_high_alarm = 6;
      case 6: {
        if (tag == 48) {
         parse_lane_laser_output_power_high_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_output_power_high_alarm_)));
          set_has_lane_laser_output_power_high_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lane_laser_output_power_low_alarm;
        break;
      }

      // optional bool lane_laser_output_power_low_alarm = 7;
      case 7: {
        if (tag == 56) {
         parse_lane_laser_output_power_low_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_output_power_low_alarm_)));
          set_has_lane_laser_output_power_low_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lane_laser_output_power_high_warning;
        break;
      }

      // optional bool lane_laser_output_power_high_warning = 8;
      case 8: {
        if (tag == 64) {
         parse_lane_laser_output_power_high_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_output_power_high_warning_)));
          set_has_lane_laser_output_power_high_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lane_laser_output_power_low_warning;
        break;
      }

      // optional bool lane_laser_output_power_low_warning = 9;
      case 9: {
        if (tag == 72) {
         parse_lane_laser_output_power_low_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_output_power_low_warning_)));
          set_has_lane_laser_output_power_low_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_lane_laser_receiver_power_high_alarm;
        break;
      }

      // optional bool lane_laser_receiver_power_high_alarm = 10;
      case 10: {
        if (tag == 80) {
         parse_lane_laser_receiver_power_high_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_receiver_power_high_alarm_)));
          set_has_lane_laser_receiver_power_high_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_lane_laser_receiver_power_low_alarm;
        break;
      }

      // optional bool lane_laser_receiver_power_low_alarm = 11;
      case 11: {
        if (tag == 88) {
         parse_lane_laser_receiver_power_low_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_receiver_power_low_alarm_)));
          set_has_lane_laser_receiver_power_low_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lane_laser_receiver_power_high_warning;
        break;
      }

      // optional bool lane_laser_receiver_power_high_warning = 12;
      case 12: {
        if (tag == 96) {
         parse_lane_laser_receiver_power_high_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_receiver_power_high_warning_)));
          set_has_lane_laser_receiver_power_high_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_lane_laser_receiver_power_low_warning;
        break;
      }

      // optional bool lane_laser_receiver_power_low_warning = 13;
      case 13: {
        if (tag == 104) {
         parse_lane_laser_receiver_power_low_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_receiver_power_low_warning_)));
          set_has_lane_laser_receiver_power_low_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_lane_laser_bias_current_high_alarm;
        break;
      }

      // optional bool lane_laser_bias_current_high_alarm = 14;
      case 14: {
        if (tag == 112) {
         parse_lane_laser_bias_current_high_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_bias_current_high_alarm_)));
          set_has_lane_laser_bias_current_high_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_lane_laser_bias_current_low_alarm;
        break;
      }

      // optional bool lane_laser_bias_current_low_alarm = 15;
      case 15: {
        if (tag == 120) {
         parse_lane_laser_bias_current_low_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_bias_current_low_alarm_)));
          set_has_lane_laser_bias_current_low_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_lane_laser_bias_current_high_warning;
        break;
      }

      // optional bool lane_laser_bias_current_high_warning = 16;
      case 16: {
        if (tag == 128) {
         parse_lane_laser_bias_current_high_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_bias_current_high_warning_)));
          set_has_lane_laser_bias_current_high_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_lane_laser_bias_current_low_warning;
        break;
      }

      // optional bool lane_laser_bias_current_low_warning = 17;
      case 17: {
        if (tag == 136) {
         parse_lane_laser_bias_current_low_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_laser_bias_current_low_warning_)));
          set_has_lane_laser_bias_current_low_warning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_lane_tx_loss_of_signal_alarm;
        break;
      }

      // optional bool lane_tx_loss_of_signal_alarm = 18;
      case 18: {
        if (tag == 144) {
         parse_lane_tx_loss_of_signal_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_tx_loss_of_signal_alarm_)));
          set_has_lane_tx_loss_of_signal_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_lane_rx_loss_of_signal_alarm;
        break;
      }

      // optional bool lane_rx_loss_of_signal_alarm = 19;
      case 19: {
        if (tag == 152) {
         parse_lane_rx_loss_of_signal_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_rx_loss_of_signal_alarm_)));
          set_has_lane_rx_loss_of_signal_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_lane_tx_laser_disabled_alarm;
        break;
      }

      // optional bool lane_tx_laser_disabled_alarm = 20;
      case 20: {
        if (tag == 160) {
         parse_lane_tx_laser_disabled_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_tx_laser_disabled_alarm_)));
          set_has_lane_tx_laser_disabled_alarm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpticsDiagLaneStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpticsDiagLaneStats)
  return false;
#undef DO_
}

void OpticsDiagLaneStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpticsDiagLaneStats)
  // optional uint32 lane_number = 1;
  if (has_lane_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lane_number(), output);
  }

  // optional double lane_laser_temperature = 2;
  if (has_lane_laser_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lane_laser_temperature(), output);
  }

  // optional double lane_laser_output_power_dbm = 3;
  if (has_lane_laser_output_power_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lane_laser_output_power_dbm(), output);
  }

  // optional double lane_laser_receiver_power_dbm = 4;
  if (has_lane_laser_receiver_power_dbm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lane_laser_receiver_power_dbm(), output);
  }

  // optional double lane_laser_bias_current = 5;
  if (has_lane_laser_bias_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lane_laser_bias_current(), output);
  }

  // optional bool lane_laser_output_power_high_alarm = 6;
  if (has_lane_laser_output_power_high_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->lane_laser_output_power_high_alarm(), output);
  }

  // optional bool lane_laser_output_power_low_alarm = 7;
  if (has_lane_laser_output_power_low_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->lane_laser_output_power_low_alarm(), output);
  }

  // optional bool lane_laser_output_power_high_warning = 8;
  if (has_lane_laser_output_power_high_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->lane_laser_output_power_high_warning(), output);
  }

  // optional bool lane_laser_output_power_low_warning = 9;
  if (has_lane_laser_output_power_low_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->lane_laser_output_power_low_warning(), output);
  }

  // optional bool lane_laser_receiver_power_high_alarm = 10;
  if (has_lane_laser_receiver_power_high_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->lane_laser_receiver_power_high_alarm(), output);
  }

  // optional bool lane_laser_receiver_power_low_alarm = 11;
  if (has_lane_laser_receiver_power_low_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->lane_laser_receiver_power_low_alarm(), output);
  }

  // optional bool lane_laser_receiver_power_high_warning = 12;
  if (has_lane_laser_receiver_power_high_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->lane_laser_receiver_power_high_warning(), output);
  }

  // optional bool lane_laser_receiver_power_low_warning = 13;
  if (has_lane_laser_receiver_power_low_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->lane_laser_receiver_power_low_warning(), output);
  }

  // optional bool lane_laser_bias_current_high_alarm = 14;
  if (has_lane_laser_bias_current_high_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->lane_laser_bias_current_high_alarm(), output);
  }

  // optional bool lane_laser_bias_current_low_alarm = 15;
  if (has_lane_laser_bias_current_low_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->lane_laser_bias_current_low_alarm(), output);
  }

  // optional bool lane_laser_bias_current_high_warning = 16;
  if (has_lane_laser_bias_current_high_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->lane_laser_bias_current_high_warning(), output);
  }

  // optional bool lane_laser_bias_current_low_warning = 17;
  if (has_lane_laser_bias_current_low_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->lane_laser_bias_current_low_warning(), output);
  }

  // optional bool lane_tx_loss_of_signal_alarm = 18;
  if (has_lane_tx_loss_of_signal_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->lane_tx_loss_of_signal_alarm(), output);
  }

  // optional bool lane_rx_loss_of_signal_alarm = 19;
  if (has_lane_rx_loss_of_signal_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->lane_rx_loss_of_signal_alarm(), output);
  }

  // optional bool lane_tx_laser_disabled_alarm = 20;
  if (has_lane_tx_laser_disabled_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->lane_tx_laser_disabled_alarm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpticsDiagLaneStats)
}

::google::protobuf::uint8* OpticsDiagLaneStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpticsDiagLaneStats)
  // optional uint32 lane_number = 1;
  if (has_lane_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lane_number(), target);
  }

  // optional double lane_laser_temperature = 2;
  if (has_lane_laser_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lane_laser_temperature(), target);
  }

  // optional double lane_laser_output_power_dbm = 3;
  if (has_lane_laser_output_power_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lane_laser_output_power_dbm(), target);
  }

  // optional double lane_laser_receiver_power_dbm = 4;
  if (has_lane_laser_receiver_power_dbm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lane_laser_receiver_power_dbm(), target);
  }

  // optional double lane_laser_bias_current = 5;
  if (has_lane_laser_bias_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lane_laser_bias_current(), target);
  }

  // optional bool lane_laser_output_power_high_alarm = 6;
  if (has_lane_laser_output_power_high_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->lane_laser_output_power_high_alarm(), target);
  }

  // optional bool lane_laser_output_power_low_alarm = 7;
  if (has_lane_laser_output_power_low_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->lane_laser_output_power_low_alarm(), target);
  }

  // optional bool lane_laser_output_power_high_warning = 8;
  if (has_lane_laser_output_power_high_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->lane_laser_output_power_high_warning(), target);
  }

  // optional bool lane_laser_output_power_low_warning = 9;
  if (has_lane_laser_output_power_low_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->lane_laser_output_power_low_warning(), target);
  }

  // optional bool lane_laser_receiver_power_high_alarm = 10;
  if (has_lane_laser_receiver_power_high_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->lane_laser_receiver_power_high_alarm(), target);
  }

  // optional bool lane_laser_receiver_power_low_alarm = 11;
  if (has_lane_laser_receiver_power_low_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->lane_laser_receiver_power_low_alarm(), target);
  }

  // optional bool lane_laser_receiver_power_high_warning = 12;
  if (has_lane_laser_receiver_power_high_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->lane_laser_receiver_power_high_warning(), target);
  }

  // optional bool lane_laser_receiver_power_low_warning = 13;
  if (has_lane_laser_receiver_power_low_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->lane_laser_receiver_power_low_warning(), target);
  }

  // optional bool lane_laser_bias_current_high_alarm = 14;
  if (has_lane_laser_bias_current_high_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->lane_laser_bias_current_high_alarm(), target);
  }

  // optional bool lane_laser_bias_current_low_alarm = 15;
  if (has_lane_laser_bias_current_low_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->lane_laser_bias_current_low_alarm(), target);
  }

  // optional bool lane_laser_bias_current_high_warning = 16;
  if (has_lane_laser_bias_current_high_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->lane_laser_bias_current_high_warning(), target);
  }

  // optional bool lane_laser_bias_current_low_warning = 17;
  if (has_lane_laser_bias_current_low_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->lane_laser_bias_current_low_warning(), target);
  }

  // optional bool lane_tx_loss_of_signal_alarm = 18;
  if (has_lane_tx_loss_of_signal_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->lane_tx_loss_of_signal_alarm(), target);
  }

  // optional bool lane_rx_loss_of_signal_alarm = 19;
  if (has_lane_rx_loss_of_signal_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->lane_rx_loss_of_signal_alarm(), target);
  }

  // optional bool lane_tx_laser_disabled_alarm = 20;
  if (has_lane_tx_laser_disabled_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->lane_tx_laser_disabled_alarm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpticsDiagLaneStats)
  return target;
}

int OpticsDiagLaneStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 lane_number = 1;
    if (has_lane_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_number());
    }

    // optional double lane_laser_temperature = 2;
    if (has_lane_laser_temperature()) {
      total_size += 1 + 8;
    }

    // optional double lane_laser_output_power_dbm = 3;
    if (has_lane_laser_output_power_dbm()) {
      total_size += 1 + 8;
    }

    // optional double lane_laser_receiver_power_dbm = 4;
    if (has_lane_laser_receiver_power_dbm()) {
      total_size += 1 + 8;
    }

    // optional double lane_laser_bias_current = 5;
    if (has_lane_laser_bias_current()) {
      total_size += 1 + 8;
    }

    // optional bool lane_laser_output_power_high_alarm = 6;
    if (has_lane_laser_output_power_high_alarm()) {
      total_size += 1 + 1;
    }

    // optional bool lane_laser_output_power_low_alarm = 7;
    if (has_lane_laser_output_power_low_alarm()) {
      total_size += 1 + 1;
    }

    // optional bool lane_laser_output_power_high_warning = 8;
    if (has_lane_laser_output_power_high_warning()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool lane_laser_output_power_low_warning = 9;
    if (has_lane_laser_output_power_low_warning()) {
      total_size += 1 + 1;
    }

    // optional bool lane_laser_receiver_power_high_alarm = 10;
    if (has_lane_laser_receiver_power_high_alarm()) {
      total_size += 1 + 1;
    }

    // optional bool lane_laser_receiver_power_low_alarm = 11;
    if (has_lane_laser_receiver_power_low_alarm()) {
      total_size += 1 + 1;
    }

    // optional bool lane_laser_receiver_power_high_warning = 12;
    if (has_lane_laser_receiver_power_high_warning()) {
      total_size += 1 + 1;
    }

    // optional bool lane_laser_receiver_power_low_warning = 13;
    if (has_lane_laser_receiver_power_low_warning()) {
      total_size += 1 + 1;
    }

    // optional bool lane_laser_bias_current_high_alarm = 14;
    if (has_lane_laser_bias_current_high_alarm()) {
      total_size += 1 + 1;
    }

    // optional bool lane_laser_bias_current_low_alarm = 15;
    if (has_lane_laser_bias_current_low_alarm()) {
      total_size += 1 + 1;
    }

    // optional bool lane_laser_bias_current_high_warning = 16;
    if (has_lane_laser_bias_current_high_warning()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional bool lane_laser_bias_current_low_warning = 17;
    if (has_lane_laser_bias_current_low_warning()) {
      total_size += 2 + 1;
    }

    // optional bool lane_tx_loss_of_signal_alarm = 18;
    if (has_lane_tx_loss_of_signal_alarm()) {
      total_size += 2 + 1;
    }

    // optional bool lane_rx_loss_of_signal_alarm = 19;
    if (has_lane_rx_loss_of_signal_alarm()) {
      total_size += 2 + 1;
    }

    // optional bool lane_tx_laser_disabled_alarm = 20;
    if (has_lane_tx_laser_disabled_alarm()) {
      total_size += 2 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpticsDiagLaneStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpticsDiagLaneStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpticsDiagLaneStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpticsDiagLaneStats::MergeFrom(const OpticsDiagLaneStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lane_number()) {
      set_lane_number(from.lane_number());
    }
    if (from.has_lane_laser_temperature()) {
      set_lane_laser_temperature(from.lane_laser_temperature());
    }
    if (from.has_lane_laser_output_power_dbm()) {
      set_lane_laser_output_power_dbm(from.lane_laser_output_power_dbm());
    }
    if (from.has_lane_laser_receiver_power_dbm()) {
      set_lane_laser_receiver_power_dbm(from.lane_laser_receiver_power_dbm());
    }
    if (from.has_lane_laser_bias_current()) {
      set_lane_laser_bias_current(from.lane_laser_bias_current());
    }
    if (from.has_lane_laser_output_power_high_alarm()) {
      set_lane_laser_output_power_high_alarm(from.lane_laser_output_power_high_alarm());
    }
    if (from.has_lane_laser_output_power_low_alarm()) {
      set_lane_laser_output_power_low_alarm(from.lane_laser_output_power_low_alarm());
    }
    if (from.has_lane_laser_output_power_high_warning()) {
      set_lane_laser_output_power_high_warning(from.lane_laser_output_power_high_warning());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lane_laser_output_power_low_warning()) {
      set_lane_laser_output_power_low_warning(from.lane_laser_output_power_low_warning());
    }
    if (from.has_lane_laser_receiver_power_high_alarm()) {
      set_lane_laser_receiver_power_high_alarm(from.lane_laser_receiver_power_high_alarm());
    }
    if (from.has_lane_laser_receiver_power_low_alarm()) {
      set_lane_laser_receiver_power_low_alarm(from.lane_laser_receiver_power_low_alarm());
    }
    if (from.has_lane_laser_receiver_power_high_warning()) {
      set_lane_laser_receiver_power_high_warning(from.lane_laser_receiver_power_high_warning());
    }
    if (from.has_lane_laser_receiver_power_low_warning()) {
      set_lane_laser_receiver_power_low_warning(from.lane_laser_receiver_power_low_warning());
    }
    if (from.has_lane_laser_bias_current_high_alarm()) {
      set_lane_laser_bias_current_high_alarm(from.lane_laser_bias_current_high_alarm());
    }
    if (from.has_lane_laser_bias_current_low_alarm()) {
      set_lane_laser_bias_current_low_alarm(from.lane_laser_bias_current_low_alarm());
    }
    if (from.has_lane_laser_bias_current_high_warning()) {
      set_lane_laser_bias_current_high_warning(from.lane_laser_bias_current_high_warning());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lane_laser_bias_current_low_warning()) {
      set_lane_laser_bias_current_low_warning(from.lane_laser_bias_current_low_warning());
    }
    if (from.has_lane_tx_loss_of_signal_alarm()) {
      set_lane_tx_loss_of_signal_alarm(from.lane_tx_loss_of_signal_alarm());
    }
    if (from.has_lane_rx_loss_of_signal_alarm()) {
      set_lane_rx_loss_of_signal_alarm(from.lane_rx_loss_of_signal_alarm());
    }
    if (from.has_lane_tx_laser_disabled_alarm()) {
      set_lane_tx_laser_disabled_alarm(from.lane_tx_laser_disabled_alarm());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpticsDiagLaneStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpticsDiagLaneStats::CopyFrom(const OpticsDiagLaneStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpticsDiagLaneStats::IsInitialized() const {

  return true;
}

void OpticsDiagLaneStats::Swap(OpticsDiagLaneStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpticsDiagLaneStats::InternalSwap(OpticsDiagLaneStats* other) {
  std::swap(lane_number_, other->lane_number_);
  std::swap(lane_laser_temperature_, other->lane_laser_temperature_);
  std::swap(lane_laser_output_power_dbm_, other->lane_laser_output_power_dbm_);
  std::swap(lane_laser_receiver_power_dbm_, other->lane_laser_receiver_power_dbm_);
  std::swap(lane_laser_bias_current_, other->lane_laser_bias_current_);
  std::swap(lane_laser_output_power_high_alarm_, other->lane_laser_output_power_high_alarm_);
  std::swap(lane_laser_output_power_low_alarm_, other->lane_laser_output_power_low_alarm_);
  std::swap(lane_laser_output_power_high_warning_, other->lane_laser_output_power_high_warning_);
  std::swap(lane_laser_output_power_low_warning_, other->lane_laser_output_power_low_warning_);
  std::swap(lane_laser_receiver_power_high_alarm_, other->lane_laser_receiver_power_high_alarm_);
  std::swap(lane_laser_receiver_power_low_alarm_, other->lane_laser_receiver_power_low_alarm_);
  std::swap(lane_laser_receiver_power_high_warning_, other->lane_laser_receiver_power_high_warning_);
  std::swap(lane_laser_receiver_power_low_warning_, other->lane_laser_receiver_power_low_warning_);
  std::swap(lane_laser_bias_current_high_alarm_, other->lane_laser_bias_current_high_alarm_);
  std::swap(lane_laser_bias_current_low_alarm_, other->lane_laser_bias_current_low_alarm_);
  std::swap(lane_laser_bias_current_high_warning_, other->lane_laser_bias_current_high_warning_);
  std::swap(lane_laser_bias_current_low_warning_, other->lane_laser_bias_current_low_warning_);
  std::swap(lane_tx_loss_of_signal_alarm_, other->lane_tx_loss_of_signal_alarm_);
  std::swap(lane_rx_loss_of_signal_alarm_, other->lane_rx_loss_of_signal_alarm_);
  std::swap(lane_tx_laser_disabled_alarm_, other->lane_tx_laser_disabled_alarm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpticsDiagLaneStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpticsDiagLaneStats_descriptor_;
  metadata.reflection = OpticsDiagLaneStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpticsDiagLaneStats

// optional uint32 lane_number = 1;
bool OpticsDiagLaneStats::has_lane_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_number() {
  _has_bits_[0] |= 0x00000001u;
}
void OpticsDiagLaneStats::clear_has_lane_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void OpticsDiagLaneStats::clear_lane_number() {
  lane_number_ = 0u;
  clear_has_lane_number();
}
 ::google::protobuf::uint32 OpticsDiagLaneStats::lane_number() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_number)
  return lane_number_;
}
 void OpticsDiagLaneStats::set_lane_number(::google::protobuf::uint32 value) {
  set_has_lane_number();
  lane_number_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_number)
}

// optional double lane_laser_temperature = 2;
bool OpticsDiagLaneStats::has_lane_laser_temperature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_temperature() {
  _has_bits_[0] |= 0x00000002u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_temperature() {
  _has_bits_[0] &= ~0x00000002u;
}
void OpticsDiagLaneStats::clear_lane_laser_temperature() {
  lane_laser_temperature_ = 0;
  clear_has_lane_laser_temperature();
}
 double OpticsDiagLaneStats::lane_laser_temperature() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_temperature)
  return lane_laser_temperature_;
}
 void OpticsDiagLaneStats::set_lane_laser_temperature(double value) {
  set_has_lane_laser_temperature();
  lane_laser_temperature_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_temperature)
}

// optional double lane_laser_output_power_dbm = 3;
bool OpticsDiagLaneStats::has_lane_laser_output_power_dbm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_output_power_dbm() {
  _has_bits_[0] |= 0x00000004u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_output_power_dbm() {
  _has_bits_[0] &= ~0x00000004u;
}
void OpticsDiagLaneStats::clear_lane_laser_output_power_dbm() {
  lane_laser_output_power_dbm_ = 0;
  clear_has_lane_laser_output_power_dbm();
}
 double OpticsDiagLaneStats::lane_laser_output_power_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_output_power_dbm)
  return lane_laser_output_power_dbm_;
}
 void OpticsDiagLaneStats::set_lane_laser_output_power_dbm(double value) {
  set_has_lane_laser_output_power_dbm();
  lane_laser_output_power_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_output_power_dbm)
}

// optional double lane_laser_receiver_power_dbm = 4;
bool OpticsDiagLaneStats::has_lane_laser_receiver_power_dbm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_receiver_power_dbm() {
  _has_bits_[0] |= 0x00000008u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_receiver_power_dbm() {
  _has_bits_[0] &= ~0x00000008u;
}
void OpticsDiagLaneStats::clear_lane_laser_receiver_power_dbm() {
  lane_laser_receiver_power_dbm_ = 0;
  clear_has_lane_laser_receiver_power_dbm();
}
 double OpticsDiagLaneStats::lane_laser_receiver_power_dbm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_receiver_power_dbm)
  return lane_laser_receiver_power_dbm_;
}
 void OpticsDiagLaneStats::set_lane_laser_receiver_power_dbm(double value) {
  set_has_lane_laser_receiver_power_dbm();
  lane_laser_receiver_power_dbm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_receiver_power_dbm)
}

// optional double lane_laser_bias_current = 5;
bool OpticsDiagLaneStats::has_lane_laser_bias_current() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_bias_current() {
  _has_bits_[0] |= 0x00000010u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_bias_current() {
  _has_bits_[0] &= ~0x00000010u;
}
void OpticsDiagLaneStats::clear_lane_laser_bias_current() {
  lane_laser_bias_current_ = 0;
  clear_has_lane_laser_bias_current();
}
 double OpticsDiagLaneStats::lane_laser_bias_current() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_bias_current)
  return lane_laser_bias_current_;
}
 void OpticsDiagLaneStats::set_lane_laser_bias_current(double value) {
  set_has_lane_laser_bias_current();
  lane_laser_bias_current_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_bias_current)
}

// optional bool lane_laser_output_power_high_alarm = 6;
bool OpticsDiagLaneStats::has_lane_laser_output_power_high_alarm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_output_power_high_alarm() {
  _has_bits_[0] |= 0x00000020u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_output_power_high_alarm() {
  _has_bits_[0] &= ~0x00000020u;
}
void OpticsDiagLaneStats::clear_lane_laser_output_power_high_alarm() {
  lane_laser_output_power_high_alarm_ = false;
  clear_has_lane_laser_output_power_high_alarm();
}
 bool OpticsDiagLaneStats::lane_laser_output_power_high_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_output_power_high_alarm)
  return lane_laser_output_power_high_alarm_;
}
 void OpticsDiagLaneStats::set_lane_laser_output_power_high_alarm(bool value) {
  set_has_lane_laser_output_power_high_alarm();
  lane_laser_output_power_high_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_output_power_high_alarm)
}

// optional bool lane_laser_output_power_low_alarm = 7;
bool OpticsDiagLaneStats::has_lane_laser_output_power_low_alarm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_output_power_low_alarm() {
  _has_bits_[0] |= 0x00000040u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_output_power_low_alarm() {
  _has_bits_[0] &= ~0x00000040u;
}
void OpticsDiagLaneStats::clear_lane_laser_output_power_low_alarm() {
  lane_laser_output_power_low_alarm_ = false;
  clear_has_lane_laser_output_power_low_alarm();
}
 bool OpticsDiagLaneStats::lane_laser_output_power_low_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_output_power_low_alarm)
  return lane_laser_output_power_low_alarm_;
}
 void OpticsDiagLaneStats::set_lane_laser_output_power_low_alarm(bool value) {
  set_has_lane_laser_output_power_low_alarm();
  lane_laser_output_power_low_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_output_power_low_alarm)
}

// optional bool lane_laser_output_power_high_warning = 8;
bool OpticsDiagLaneStats::has_lane_laser_output_power_high_warning() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_output_power_high_warning() {
  _has_bits_[0] |= 0x00000080u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_output_power_high_warning() {
  _has_bits_[0] &= ~0x00000080u;
}
void OpticsDiagLaneStats::clear_lane_laser_output_power_high_warning() {
  lane_laser_output_power_high_warning_ = false;
  clear_has_lane_laser_output_power_high_warning();
}
 bool OpticsDiagLaneStats::lane_laser_output_power_high_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_output_power_high_warning)
  return lane_laser_output_power_high_warning_;
}
 void OpticsDiagLaneStats::set_lane_laser_output_power_high_warning(bool value) {
  set_has_lane_laser_output_power_high_warning();
  lane_laser_output_power_high_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_output_power_high_warning)
}

// optional bool lane_laser_output_power_low_warning = 9;
bool OpticsDiagLaneStats::has_lane_laser_output_power_low_warning() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_output_power_low_warning() {
  _has_bits_[0] |= 0x00000100u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_output_power_low_warning() {
  _has_bits_[0] &= ~0x00000100u;
}
void OpticsDiagLaneStats::clear_lane_laser_output_power_low_warning() {
  lane_laser_output_power_low_warning_ = false;
  clear_has_lane_laser_output_power_low_warning();
}
 bool OpticsDiagLaneStats::lane_laser_output_power_low_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_output_power_low_warning)
  return lane_laser_output_power_low_warning_;
}
 void OpticsDiagLaneStats::set_lane_laser_output_power_low_warning(bool value) {
  set_has_lane_laser_output_power_low_warning();
  lane_laser_output_power_low_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_output_power_low_warning)
}

// optional bool lane_laser_receiver_power_high_alarm = 10;
bool OpticsDiagLaneStats::has_lane_laser_receiver_power_high_alarm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_receiver_power_high_alarm() {
  _has_bits_[0] |= 0x00000200u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_receiver_power_high_alarm() {
  _has_bits_[0] &= ~0x00000200u;
}
void OpticsDiagLaneStats::clear_lane_laser_receiver_power_high_alarm() {
  lane_laser_receiver_power_high_alarm_ = false;
  clear_has_lane_laser_receiver_power_high_alarm();
}
 bool OpticsDiagLaneStats::lane_laser_receiver_power_high_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_receiver_power_high_alarm)
  return lane_laser_receiver_power_high_alarm_;
}
 void OpticsDiagLaneStats::set_lane_laser_receiver_power_high_alarm(bool value) {
  set_has_lane_laser_receiver_power_high_alarm();
  lane_laser_receiver_power_high_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_receiver_power_high_alarm)
}

// optional bool lane_laser_receiver_power_low_alarm = 11;
bool OpticsDiagLaneStats::has_lane_laser_receiver_power_low_alarm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_receiver_power_low_alarm() {
  _has_bits_[0] |= 0x00000400u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_receiver_power_low_alarm() {
  _has_bits_[0] &= ~0x00000400u;
}
void OpticsDiagLaneStats::clear_lane_laser_receiver_power_low_alarm() {
  lane_laser_receiver_power_low_alarm_ = false;
  clear_has_lane_laser_receiver_power_low_alarm();
}
 bool OpticsDiagLaneStats::lane_laser_receiver_power_low_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_receiver_power_low_alarm)
  return lane_laser_receiver_power_low_alarm_;
}
 void OpticsDiagLaneStats::set_lane_laser_receiver_power_low_alarm(bool value) {
  set_has_lane_laser_receiver_power_low_alarm();
  lane_laser_receiver_power_low_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_receiver_power_low_alarm)
}

// optional bool lane_laser_receiver_power_high_warning = 12;
bool OpticsDiagLaneStats::has_lane_laser_receiver_power_high_warning() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_receiver_power_high_warning() {
  _has_bits_[0] |= 0x00000800u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_receiver_power_high_warning() {
  _has_bits_[0] &= ~0x00000800u;
}
void OpticsDiagLaneStats::clear_lane_laser_receiver_power_high_warning() {
  lane_laser_receiver_power_high_warning_ = false;
  clear_has_lane_laser_receiver_power_high_warning();
}
 bool OpticsDiagLaneStats::lane_laser_receiver_power_high_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_receiver_power_high_warning)
  return lane_laser_receiver_power_high_warning_;
}
 void OpticsDiagLaneStats::set_lane_laser_receiver_power_high_warning(bool value) {
  set_has_lane_laser_receiver_power_high_warning();
  lane_laser_receiver_power_high_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_receiver_power_high_warning)
}

// optional bool lane_laser_receiver_power_low_warning = 13;
bool OpticsDiagLaneStats::has_lane_laser_receiver_power_low_warning() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_receiver_power_low_warning() {
  _has_bits_[0] |= 0x00001000u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_receiver_power_low_warning() {
  _has_bits_[0] &= ~0x00001000u;
}
void OpticsDiagLaneStats::clear_lane_laser_receiver_power_low_warning() {
  lane_laser_receiver_power_low_warning_ = false;
  clear_has_lane_laser_receiver_power_low_warning();
}
 bool OpticsDiagLaneStats::lane_laser_receiver_power_low_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_receiver_power_low_warning)
  return lane_laser_receiver_power_low_warning_;
}
 void OpticsDiagLaneStats::set_lane_laser_receiver_power_low_warning(bool value) {
  set_has_lane_laser_receiver_power_low_warning();
  lane_laser_receiver_power_low_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_receiver_power_low_warning)
}

// optional bool lane_laser_bias_current_high_alarm = 14;
bool OpticsDiagLaneStats::has_lane_laser_bias_current_high_alarm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_bias_current_high_alarm() {
  _has_bits_[0] |= 0x00002000u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_bias_current_high_alarm() {
  _has_bits_[0] &= ~0x00002000u;
}
void OpticsDiagLaneStats::clear_lane_laser_bias_current_high_alarm() {
  lane_laser_bias_current_high_alarm_ = false;
  clear_has_lane_laser_bias_current_high_alarm();
}
 bool OpticsDiagLaneStats::lane_laser_bias_current_high_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_bias_current_high_alarm)
  return lane_laser_bias_current_high_alarm_;
}
 void OpticsDiagLaneStats::set_lane_laser_bias_current_high_alarm(bool value) {
  set_has_lane_laser_bias_current_high_alarm();
  lane_laser_bias_current_high_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_bias_current_high_alarm)
}

// optional bool lane_laser_bias_current_low_alarm = 15;
bool OpticsDiagLaneStats::has_lane_laser_bias_current_low_alarm() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_bias_current_low_alarm() {
  _has_bits_[0] |= 0x00004000u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_bias_current_low_alarm() {
  _has_bits_[0] &= ~0x00004000u;
}
void OpticsDiagLaneStats::clear_lane_laser_bias_current_low_alarm() {
  lane_laser_bias_current_low_alarm_ = false;
  clear_has_lane_laser_bias_current_low_alarm();
}
 bool OpticsDiagLaneStats::lane_laser_bias_current_low_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_bias_current_low_alarm)
  return lane_laser_bias_current_low_alarm_;
}
 void OpticsDiagLaneStats::set_lane_laser_bias_current_low_alarm(bool value) {
  set_has_lane_laser_bias_current_low_alarm();
  lane_laser_bias_current_low_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_bias_current_low_alarm)
}

// optional bool lane_laser_bias_current_high_warning = 16;
bool OpticsDiagLaneStats::has_lane_laser_bias_current_high_warning() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_bias_current_high_warning() {
  _has_bits_[0] |= 0x00008000u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_bias_current_high_warning() {
  _has_bits_[0] &= ~0x00008000u;
}
void OpticsDiagLaneStats::clear_lane_laser_bias_current_high_warning() {
  lane_laser_bias_current_high_warning_ = false;
  clear_has_lane_laser_bias_current_high_warning();
}
 bool OpticsDiagLaneStats::lane_laser_bias_current_high_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_bias_current_high_warning)
  return lane_laser_bias_current_high_warning_;
}
 void OpticsDiagLaneStats::set_lane_laser_bias_current_high_warning(bool value) {
  set_has_lane_laser_bias_current_high_warning();
  lane_laser_bias_current_high_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_bias_current_high_warning)
}

// optional bool lane_laser_bias_current_low_warning = 17;
bool OpticsDiagLaneStats::has_lane_laser_bias_current_low_warning() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_laser_bias_current_low_warning() {
  _has_bits_[0] |= 0x00010000u;
}
void OpticsDiagLaneStats::clear_has_lane_laser_bias_current_low_warning() {
  _has_bits_[0] &= ~0x00010000u;
}
void OpticsDiagLaneStats::clear_lane_laser_bias_current_low_warning() {
  lane_laser_bias_current_low_warning_ = false;
  clear_has_lane_laser_bias_current_low_warning();
}
 bool OpticsDiagLaneStats::lane_laser_bias_current_low_warning() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_laser_bias_current_low_warning)
  return lane_laser_bias_current_low_warning_;
}
 void OpticsDiagLaneStats::set_lane_laser_bias_current_low_warning(bool value) {
  set_has_lane_laser_bias_current_low_warning();
  lane_laser_bias_current_low_warning_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_laser_bias_current_low_warning)
}

// optional bool lane_tx_loss_of_signal_alarm = 18;
bool OpticsDiagLaneStats::has_lane_tx_loss_of_signal_alarm() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_tx_loss_of_signal_alarm() {
  _has_bits_[0] |= 0x00020000u;
}
void OpticsDiagLaneStats::clear_has_lane_tx_loss_of_signal_alarm() {
  _has_bits_[0] &= ~0x00020000u;
}
void OpticsDiagLaneStats::clear_lane_tx_loss_of_signal_alarm() {
  lane_tx_loss_of_signal_alarm_ = false;
  clear_has_lane_tx_loss_of_signal_alarm();
}
 bool OpticsDiagLaneStats::lane_tx_loss_of_signal_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_tx_loss_of_signal_alarm)
  return lane_tx_loss_of_signal_alarm_;
}
 void OpticsDiagLaneStats::set_lane_tx_loss_of_signal_alarm(bool value) {
  set_has_lane_tx_loss_of_signal_alarm();
  lane_tx_loss_of_signal_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_tx_loss_of_signal_alarm)
}

// optional bool lane_rx_loss_of_signal_alarm = 19;
bool OpticsDiagLaneStats::has_lane_rx_loss_of_signal_alarm() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_rx_loss_of_signal_alarm() {
  _has_bits_[0] |= 0x00040000u;
}
void OpticsDiagLaneStats::clear_has_lane_rx_loss_of_signal_alarm() {
  _has_bits_[0] &= ~0x00040000u;
}
void OpticsDiagLaneStats::clear_lane_rx_loss_of_signal_alarm() {
  lane_rx_loss_of_signal_alarm_ = false;
  clear_has_lane_rx_loss_of_signal_alarm();
}
 bool OpticsDiagLaneStats::lane_rx_loss_of_signal_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_rx_loss_of_signal_alarm)
  return lane_rx_loss_of_signal_alarm_;
}
 void OpticsDiagLaneStats::set_lane_rx_loss_of_signal_alarm(bool value) {
  set_has_lane_rx_loss_of_signal_alarm();
  lane_rx_loss_of_signal_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_rx_loss_of_signal_alarm)
}

// optional bool lane_tx_laser_disabled_alarm = 20;
bool OpticsDiagLaneStats::has_lane_tx_laser_disabled_alarm() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void OpticsDiagLaneStats::set_has_lane_tx_laser_disabled_alarm() {
  _has_bits_[0] |= 0x00080000u;
}
void OpticsDiagLaneStats::clear_has_lane_tx_laser_disabled_alarm() {
  _has_bits_[0] &= ~0x00080000u;
}
void OpticsDiagLaneStats::clear_lane_tx_laser_disabled_alarm() {
  lane_tx_laser_disabled_alarm_ = false;
  clear_has_lane_tx_laser_disabled_alarm();
}
 bool OpticsDiagLaneStats::lane_tx_laser_disabled_alarm() const {
  // @@protoc_insertion_point(field_get:OpticsDiagLaneStats.lane_tx_laser_disabled_alarm)
  return lane_tx_laser_disabled_alarm_;
}
 void OpticsDiagLaneStats::set_lane_tx_laser_disabled_alarm(bool value) {
  set_has_lane_tx_laser_disabled_alarm();
  lane_tx_laser_disabled_alarm_ = value;
  // @@protoc_insertion_point(field_set:OpticsDiagLaneStats.lane_tx_laser_disabled_alarm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::JuniperNetworksSensors,
    ::google::protobuf::internal::MessageTypeTraits< ::Optics >, 11, false >
  jnpr_optics_ext(kJnprOpticsExtFieldNumber, ::Optics::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
