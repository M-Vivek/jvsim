// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry_top.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "telemetry_top.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TelemetryFieldOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelemetryFieldOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* TelemetryStream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TelemetryStream_reflection_ = NULL;
const ::google::protobuf::Descriptor* IETFSensors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IETFSensors_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterpriseSensors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterpriseSensors_reflection_ = NULL;
const ::google::protobuf::Descriptor* JuniperNetworksSensors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JuniperNetworksSensors_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_telemetry_5ftop_2eproto() {
  protobuf_AddDesc_telemetry_5ftop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "telemetry_top.proto");
  GOOGLE_CHECK(file != NULL);
  TelemetryFieldOptions_descriptor_ = file->message_type(0);
  static const int TelemetryFieldOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryFieldOptions, is_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryFieldOptions, is_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryFieldOptions, is_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryFieldOptions, is_gauge_),
  };
  TelemetryFieldOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelemetryFieldOptions_descriptor_,
      TelemetryFieldOptions::default_instance_,
      TelemetryFieldOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryFieldOptions, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelemetryFieldOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryFieldOptions, _internal_metadata_),
      -1);
  TelemetryStream_descriptor_ = file->message_type(1);
  static const int TelemetryStream_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, component_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, sub_component_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, sensor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, sequence_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, version_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, version_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, ietf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, enterprise_),
  };
  TelemetryStream_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TelemetryStream_descriptor_,
      TelemetryStream::default_instance_,
      TelemetryStream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, _has_bits_[0]),
      -1,
      -1,
      sizeof(TelemetryStream),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TelemetryStream, _internal_metadata_),
      -1);
  IETFSensors_descriptor_ = file->message_type(2);
  static const int IETFSensors_offsets_[1] = {
  };
  IETFSensors_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IETFSensors_descriptor_,
      IETFSensors::default_instance_,
      IETFSensors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IETFSensors, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IETFSensors, _extensions_),
      sizeof(IETFSensors),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IETFSensors, _internal_metadata_),
      -1);
  EnterpriseSensors_descriptor_ = file->message_type(3);
  static const int EnterpriseSensors_offsets_[1] = {
  };
  EnterpriseSensors_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnterpriseSensors_descriptor_,
      EnterpriseSensors::default_instance_,
      EnterpriseSensors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterpriseSensors, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterpriseSensors, _extensions_),
      sizeof(EnterpriseSensors),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterpriseSensors, _internal_metadata_),
      -1);
  JuniperNetworksSensors_descriptor_ = file->message_type(4);
  static const int JuniperNetworksSensors_offsets_[1] = {
  };
  JuniperNetworksSensors_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JuniperNetworksSensors_descriptor_,
      JuniperNetworksSensors::default_instance_,
      JuniperNetworksSensors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JuniperNetworksSensors, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JuniperNetworksSensors, _extensions_),
      sizeof(JuniperNetworksSensors),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JuniperNetworksSensors, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_telemetry_5ftop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelemetryFieldOptions_descriptor_, &TelemetryFieldOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TelemetryStream_descriptor_, &TelemetryStream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IETFSensors_descriptor_, &IETFSensors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnterpriseSensors_descriptor_, &EnterpriseSensors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JuniperNetworksSensors_descriptor_, &JuniperNetworksSensors::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_telemetry_5ftop_2eproto() {
  delete TelemetryFieldOptions::default_instance_;
  delete TelemetryFieldOptions_reflection_;
  delete TelemetryStream::default_instance_;
  delete TelemetryStream_reflection_;
  delete IETFSensors::default_instance_;
  delete IETFSensors_reflection_;
  delete EnterpriseSensors::default_instance_;
  delete EnterpriseSensors_reflection_;
  delete JuniperNetworksSensors::default_instance_;
  delete JuniperNetworksSensors_reflection_;
}

void protobuf_AddDesc_telemetry_5ftop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023telemetry_top.proto\032 google/protobuf/d"
    "escriptor.proto\"c\n\025TelemetryFieldOptions"
    "\022\016\n\006is_key\030\001 \001(\010\022\024\n\014is_timestamp\030\002 \001(\010\022\022"
    "\n\nis_counter\030\003 \001(\010\022\020\n\010is_gauge\030\004 \001(\010\"\252\002\n"
    "\017TelemetryStream\022\030\n\tsystem_id\030\001 \002(\tB\005\202@\002"
    "\010\001\022\033\n\014component_id\030\002 \001(\rB\005\202@\002\010\001\022\037\n\020sub_c"
    "omponent_id\030\003 \001(\rB\005\202@\002\010\001\022\032\n\013sensor_name\030"
    "\004 \001(\tB\005\202@\002\010\001\022\027\n\017sequence_number\030\005 \001(\r\022\030\n"
    "\ttimestamp\030\006 \001(\004B\005\202@\002\020\001\022\025\n\rversion_major"
    "\030\007 \001(\r\022\025\n\rversion_minor\030\010 \001(\r\022\032\n\004ietf\030d "
    "\001(\0132\014.IETFSensors\022&\n\nenterprise\030e \001(\0132\022."
    "EnterpriseSensors\"\027\n\013IETFSensors*\010\010\001\020\200\200\200"
    "\200\002\"\035\n\021EnterpriseSensors*\010\010\001\020\200\200\200\200\002\"\"\n\026Jun"
    "iperNetworksSensors*\010\010\001\020\200\200\200\200\002:Q\n\021telemet"
    "ry_options\022\035.google.protobuf.FieldOption"
    "s\030\200\010 \001(\0132\026.TelemetryFieldOptions:E\n\017juni"
    "perNetworks\022\022.EnterpriseSensors\030\314\024 \001(\0132\027"
    ".JuniperNetworksSensors", 703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "telemetry_top.proto", &protobuf_RegisterTypes);
  TelemetryFieldOptions::default_instance_ = new TelemetryFieldOptions();
  TelemetryStream::default_instance_ = new TelemetryStream();
  IETFSensors::default_instance_ = new IETFSensors();
  EnterpriseSensors::default_instance_ = new EnterpriseSensors();
  JuniperNetworksSensors::default_instance_ = new JuniperNetworksSensors();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    1024, 11, false, false,
    &::TelemetryFieldOptions::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::EnterpriseSensors::default_instance(),
    2636, 11, false, false,
    &::JuniperNetworksSensors::default_instance());
  TelemetryFieldOptions::default_instance_->InitAsDefaultInstance();
  TelemetryStream::default_instance_->InitAsDefaultInstance();
  IETFSensors::default_instance_->InitAsDefaultInstance();
  EnterpriseSensors::default_instance_->InitAsDefaultInstance();
  JuniperNetworksSensors::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_telemetry_5ftop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_telemetry_5ftop_2eproto {
  StaticDescriptorInitializer_telemetry_5ftop_2eproto() {
    protobuf_AddDesc_telemetry_5ftop_2eproto();
  }
} static_descriptor_initializer_telemetry_5ftop_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int TelemetryFieldOptions::kIsKeyFieldNumber;
const int TelemetryFieldOptions::kIsTimestampFieldNumber;
const int TelemetryFieldOptions::kIsCounterFieldNumber;
const int TelemetryFieldOptions::kIsGaugeFieldNumber;
#endif  // !_MSC_VER

TelemetryFieldOptions::TelemetryFieldOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TelemetryFieldOptions)
}

void TelemetryFieldOptions::InitAsDefaultInstance() {
}

TelemetryFieldOptions::TelemetryFieldOptions(const TelemetryFieldOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TelemetryFieldOptions)
}

void TelemetryFieldOptions::SharedCtor() {
  _cached_size_ = 0;
  is_key_ = false;
  is_timestamp_ = false;
  is_counter_ = false;
  is_gauge_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelemetryFieldOptions::~TelemetryFieldOptions() {
  // @@protoc_insertion_point(destructor:TelemetryFieldOptions)
  SharedDtor();
}

void TelemetryFieldOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TelemetryFieldOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetryFieldOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelemetryFieldOptions_descriptor_;
}

const TelemetryFieldOptions& TelemetryFieldOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_telemetry_5ftop_2eproto();
  return *default_instance_;
}

TelemetryFieldOptions* TelemetryFieldOptions::default_instance_ = NULL;

TelemetryFieldOptions* TelemetryFieldOptions::New(::google::protobuf::Arena* arena) const {
  TelemetryFieldOptions* n = new TelemetryFieldOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetryFieldOptions::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TelemetryFieldOptions*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_key_, is_gauge_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelemetryFieldOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TelemetryFieldOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_key_)));
          set_has_is_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_timestamp;
        break;
      }

      // optional bool is_timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_is_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_timestamp_)));
          set_has_is_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_counter;
        break;
      }

      // optional bool is_counter = 3;
      case 3: {
        if (tag == 24) {
         parse_is_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_counter_)));
          set_has_is_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_gauge;
        break;
      }

      // optional bool is_gauge = 4;
      case 4: {
        if (tag == 32) {
         parse_is_gauge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gauge_)));
          set_has_is_gauge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TelemetryFieldOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TelemetryFieldOptions)
  return false;
#undef DO_
}

void TelemetryFieldOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TelemetryFieldOptions)
  // optional bool is_key = 1;
  if (has_is_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_key(), output);
  }

  // optional bool is_timestamp = 2;
  if (has_is_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_timestamp(), output);
  }

  // optional bool is_counter = 3;
  if (has_is_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_counter(), output);
  }

  // optional bool is_gauge = 4;
  if (has_is_gauge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_gauge(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TelemetryFieldOptions)
}

::google::protobuf::uint8* TelemetryFieldOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TelemetryFieldOptions)
  // optional bool is_key = 1;
  if (has_is_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_key(), target);
  }

  // optional bool is_timestamp = 2;
  if (has_is_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_timestamp(), target);
  }

  // optional bool is_counter = 3;
  if (has_is_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_counter(), target);
  }

  // optional bool is_gauge = 4;
  if (has_is_gauge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_gauge(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TelemetryFieldOptions)
  return target;
}

int TelemetryFieldOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bool is_key = 1;
    if (has_is_key()) {
      total_size += 1 + 1;
    }

    // optional bool is_timestamp = 2;
    if (has_is_timestamp()) {
      total_size += 1 + 1;
    }

    // optional bool is_counter = 3;
    if (has_is_counter()) {
      total_size += 1 + 1;
    }

    // optional bool is_gauge = 4;
    if (has_is_gauge()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetryFieldOptions::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TelemetryFieldOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetryFieldOptions>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TelemetryFieldOptions::MergeFrom(const TelemetryFieldOptions& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_key()) {
      set_is_key(from.is_key());
    }
    if (from.has_is_timestamp()) {
      set_is_timestamp(from.is_timestamp());
    }
    if (from.has_is_counter()) {
      set_is_counter(from.is_counter());
    }
    if (from.has_is_gauge()) {
      set_is_gauge(from.is_gauge());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelemetryFieldOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryFieldOptions::CopyFrom(const TelemetryFieldOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryFieldOptions::IsInitialized() const {

  return true;
}

void TelemetryFieldOptions::Swap(TelemetryFieldOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryFieldOptions::InternalSwap(TelemetryFieldOptions* other) {
  std::swap(is_key_, other->is_key_);
  std::swap(is_timestamp_, other->is_timestamp_);
  std::swap(is_counter_, other->is_counter_);
  std::swap(is_gauge_, other->is_gauge_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetryFieldOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelemetryFieldOptions_descriptor_;
  metadata.reflection = TelemetryFieldOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TelemetryFieldOptions

// optional bool is_key = 1;
bool TelemetryFieldOptions::has_is_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelemetryFieldOptions::set_has_is_key() {
  _has_bits_[0] |= 0x00000001u;
}
void TelemetryFieldOptions::clear_has_is_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelemetryFieldOptions::clear_is_key() {
  is_key_ = false;
  clear_has_is_key();
}
 bool TelemetryFieldOptions::is_key() const {
  // @@protoc_insertion_point(field_get:TelemetryFieldOptions.is_key)
  return is_key_;
}
 void TelemetryFieldOptions::set_is_key(bool value) {
  set_has_is_key();
  is_key_ = value;
  // @@protoc_insertion_point(field_set:TelemetryFieldOptions.is_key)
}

// optional bool is_timestamp = 2;
bool TelemetryFieldOptions::has_is_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelemetryFieldOptions::set_has_is_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void TelemetryFieldOptions::clear_has_is_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelemetryFieldOptions::clear_is_timestamp() {
  is_timestamp_ = false;
  clear_has_is_timestamp();
}
 bool TelemetryFieldOptions::is_timestamp() const {
  // @@protoc_insertion_point(field_get:TelemetryFieldOptions.is_timestamp)
  return is_timestamp_;
}
 void TelemetryFieldOptions::set_is_timestamp(bool value) {
  set_has_is_timestamp();
  is_timestamp_ = value;
  // @@protoc_insertion_point(field_set:TelemetryFieldOptions.is_timestamp)
}

// optional bool is_counter = 3;
bool TelemetryFieldOptions::has_is_counter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelemetryFieldOptions::set_has_is_counter() {
  _has_bits_[0] |= 0x00000004u;
}
void TelemetryFieldOptions::clear_has_is_counter() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelemetryFieldOptions::clear_is_counter() {
  is_counter_ = false;
  clear_has_is_counter();
}
 bool TelemetryFieldOptions::is_counter() const {
  // @@protoc_insertion_point(field_get:TelemetryFieldOptions.is_counter)
  return is_counter_;
}
 void TelemetryFieldOptions::set_is_counter(bool value) {
  set_has_is_counter();
  is_counter_ = value;
  // @@protoc_insertion_point(field_set:TelemetryFieldOptions.is_counter)
}

// optional bool is_gauge = 4;
bool TelemetryFieldOptions::has_is_gauge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TelemetryFieldOptions::set_has_is_gauge() {
  _has_bits_[0] |= 0x00000008u;
}
void TelemetryFieldOptions::clear_has_is_gauge() {
  _has_bits_[0] &= ~0x00000008u;
}
void TelemetryFieldOptions::clear_is_gauge() {
  is_gauge_ = false;
  clear_has_is_gauge();
}
 bool TelemetryFieldOptions::is_gauge() const {
  // @@protoc_insertion_point(field_get:TelemetryFieldOptions.is_gauge)
  return is_gauge_;
}
 void TelemetryFieldOptions::set_is_gauge(bool value) {
  set_has_is_gauge();
  is_gauge_ = value;
  // @@protoc_insertion_point(field_set:TelemetryFieldOptions.is_gauge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TelemetryStream::kSystemIdFieldNumber;
const int TelemetryStream::kComponentIdFieldNumber;
const int TelemetryStream::kSubComponentIdFieldNumber;
const int TelemetryStream::kSensorNameFieldNumber;
const int TelemetryStream::kSequenceNumberFieldNumber;
const int TelemetryStream::kTimestampFieldNumber;
const int TelemetryStream::kVersionMajorFieldNumber;
const int TelemetryStream::kVersionMinorFieldNumber;
const int TelemetryStream::kIetfFieldNumber;
const int TelemetryStream::kEnterpriseFieldNumber;
#endif  // !_MSC_VER

TelemetryStream::TelemetryStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TelemetryStream)
}

void TelemetryStream::InitAsDefaultInstance() {
  ietf_ = const_cast< ::IETFSensors*>(&::IETFSensors::default_instance());
  enterprise_ = const_cast< ::EnterpriseSensors*>(&::EnterpriseSensors::default_instance());
}

TelemetryStream::TelemetryStream(const TelemetryStream& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TelemetryStream)
}

void TelemetryStream::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  system_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  component_id_ = 0u;
  sub_component_id_ = 0u;
  sensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_number_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  version_major_ = 0u;
  version_minor_ = 0u;
  ietf_ = NULL;
  enterprise_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TelemetryStream::~TelemetryStream() {
  // @@protoc_insertion_point(destructor:TelemetryStream)
  SharedDtor();
}

void TelemetryStream::SharedDtor() {
  system_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete ietf_;
    delete enterprise_;
  }
}

void TelemetryStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TelemetryStream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TelemetryStream_descriptor_;
}

const TelemetryStream& TelemetryStream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_telemetry_5ftop_2eproto();
  return *default_instance_;
}

TelemetryStream* TelemetryStream::default_instance_ = NULL;

TelemetryStream* TelemetryStream::New(::google::protobuf::Arena* arena) const {
  TelemetryStream* n = new TelemetryStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TelemetryStream::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TelemetryStream*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(component_id_, sub_component_id_);
    ZR_(timestamp_, version_major_);
    if (has_system_id()) {
      system_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sensor_name()) {
      sensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    version_minor_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_ietf()) {
      if (ietf_ != NULL) ietf_->::IETFSensors::Clear();
    }
    if (has_enterprise()) {
      if (enterprise_ != NULL) enterprise_->::EnterpriseSensors::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TelemetryStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TelemetryStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string system_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->system_id().data(), this->system_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TelemetryStream.system_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_component_id;
        break;
      }

      // optional uint32 component_id = 2;
      case 2: {
        if (tag == 16) {
         parse_component_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_id_)));
          set_has_component_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_component_id;
        break;
      }

      // optional uint32 sub_component_id = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_component_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_component_id_)));
          set_has_sub_component_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sensor_name;
        break;
      }

      // optional string sensor_name = 4;
      case 4: {
        if (tag == 34) {
         parse_sensor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor_name().data(), this->sensor_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TelemetryStream.sensor_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sequence_number;
        break;
      }

      // optional uint32 sequence_number = 5;
      case 5: {
        if (tag == 40) {
         parse_sequence_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_number_)));
          set_has_sequence_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 6;
      case 6: {
        if (tag == 48) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_version_major;
        break;
      }

      // optional uint32 version_major = 7;
      case 7: {
        if (tag == 56) {
         parse_version_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_major_)));
          set_has_version_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_version_minor;
        break;
      }

      // optional uint32 version_minor = 8;
      case 8: {
        if (tag == 64) {
         parse_version_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_minor_)));
          set_has_version_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_ietf;
        break;
      }

      // optional .IETFSensors ietf = 100;
      case 100: {
        if (tag == 802) {
         parse_ietf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ietf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_enterprise;
        break;
      }

      // optional .EnterpriseSensors enterprise = 101;
      case 101: {
        if (tag == 810) {
         parse_enterprise:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterprise()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TelemetryStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TelemetryStream)
  return false;
#undef DO_
}

void TelemetryStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TelemetryStream)
  // required string system_id = 1;
  if (has_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_id().data(), this->system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TelemetryStream.system_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->system_id(), output);
  }

  // optional uint32 component_id = 2;
  if (has_component_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->component_id(), output);
  }

  // optional uint32 sub_component_id = 3;
  if (has_sub_component_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_component_id(), output);
  }

  // optional string sensor_name = 4;
  if (has_sensor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_name().data(), this->sensor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TelemetryStream.sensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sensor_name(), output);
  }

  // optional uint32 sequence_number = 5;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sequence_number(), output);
  }

  // optional uint64 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp(), output);
  }

  // optional uint32 version_major = 7;
  if (has_version_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->version_major(), output);
  }

  // optional uint32 version_minor = 8;
  if (has_version_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->version_minor(), output);
  }

  // optional .IETFSensors ietf = 100;
  if (has_ietf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->ietf_, output);
  }

  // optional .EnterpriseSensors enterprise = 101;
  if (has_enterprise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *this->enterprise_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TelemetryStream)
}

::google::protobuf::uint8* TelemetryStream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TelemetryStream)
  // required string system_id = 1;
  if (has_system_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_id().data(), this->system_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TelemetryStream.system_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->system_id(), target);
  }

  // optional uint32 component_id = 2;
  if (has_component_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->component_id(), target);
  }

  // optional uint32 sub_component_id = 3;
  if (has_sub_component_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_component_id(), target);
  }

  // optional string sensor_name = 4;
  if (has_sensor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_name().data(), this->sensor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TelemetryStream.sensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sensor_name(), target);
  }

  // optional uint32 sequence_number = 5;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sequence_number(), target);
  }

  // optional uint64 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp(), target);
  }

  // optional uint32 version_major = 7;
  if (has_version_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->version_major(), target);
  }

  // optional uint32 version_minor = 8;
  if (has_version_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->version_minor(), target);
  }

  // optional .IETFSensors ietf = 100;
  if (has_ietf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, *this->ietf_, target);
  }

  // optional .EnterpriseSensors enterprise = 101;
  if (has_enterprise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, *this->enterprise_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TelemetryStream)
  return target;
}

int TelemetryStream::ByteSize() const {
  int total_size = 0;

  // required string system_id = 1;
  if (has_system_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_id());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional uint32 component_id = 2;
    if (has_component_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->component_id());
    }

    // optional uint32 sub_component_id = 3;
    if (has_sub_component_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_component_id());
    }

    // optional string sensor_name = 4;
    if (has_sensor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor_name());
    }

    // optional uint32 sequence_number = 5;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_number());
    }

    // optional uint64 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional uint32 version_major = 7;
    if (has_version_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_major());
    }

    // optional uint32 version_minor = 8;
    if (has_version_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_minor());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .IETFSensors ietf = 100;
    if (has_ietf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ietf_);
    }

    // optional .EnterpriseSensors enterprise = 101;
    if (has_enterprise()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->enterprise_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TelemetryStream::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TelemetryStream* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TelemetryStream>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TelemetryStream::MergeFrom(const TelemetryStream& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_system_id()) {
      set_has_system_id();
      system_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_id_);
    }
    if (from.has_component_id()) {
      set_component_id(from.component_id());
    }
    if (from.has_sub_component_id()) {
      set_sub_component_id(from.sub_component_id());
    }
    if (from.has_sensor_name()) {
      set_has_sensor_name();
      sensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_name_);
    }
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_version_major()) {
      set_version_major(from.version_major());
    }
    if (from.has_version_minor()) {
      set_version_minor(from.version_minor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ietf()) {
      mutable_ietf()->::IETFSensors::MergeFrom(from.ietf());
    }
    if (from.has_enterprise()) {
      mutable_enterprise()->::EnterpriseSensors::MergeFrom(from.enterprise());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TelemetryStream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryStream::CopyFrom(const TelemetryStream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryStream::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ietf()) {
    if (!this->ietf_->IsInitialized()) return false;
  }
  if (has_enterprise()) {
    if (!this->enterprise_->IsInitialized()) return false;
  }
  return true;
}

void TelemetryStream::Swap(TelemetryStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TelemetryStream::InternalSwap(TelemetryStream* other) {
  system_id_.Swap(&other->system_id_);
  std::swap(component_id_, other->component_id_);
  std::swap(sub_component_id_, other->sub_component_id_);
  sensor_name_.Swap(&other->sensor_name_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(version_major_, other->version_major_);
  std::swap(version_minor_, other->version_minor_);
  std::swap(ietf_, other->ietf_);
  std::swap(enterprise_, other->enterprise_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TelemetryStream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TelemetryStream_descriptor_;
  metadata.reflection = TelemetryStream_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TelemetryStream

// required string system_id = 1;
bool TelemetryStream::has_system_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TelemetryStream::set_has_system_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TelemetryStream::clear_has_system_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TelemetryStream::clear_system_id() {
  system_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system_id();
}
 const ::std::string& TelemetryStream::system_id() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.system_id)
  return system_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelemetryStream::set_system_id(const ::std::string& value) {
  set_has_system_id();
  system_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryStream.system_id)
}
 void TelemetryStream::set_system_id(const char* value) {
  set_has_system_id();
  system_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryStream.system_id)
}
 void TelemetryStream::set_system_id(const char* value, size_t size) {
  set_has_system_id();
  system_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryStream.system_id)
}
 ::std::string* TelemetryStream::mutable_system_id() {
  set_has_system_id();
  // @@protoc_insertion_point(field_mutable:TelemetryStream.system_id)
  return system_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TelemetryStream::release_system_id() {
  clear_has_system_id();
  return system_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelemetryStream::set_allocated_system_id(::std::string* system_id) {
  if (system_id != NULL) {
    set_has_system_id();
  } else {
    clear_has_system_id();
  }
  system_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_id);
  // @@protoc_insertion_point(field_set_allocated:TelemetryStream.system_id)
}

// optional uint32 component_id = 2;
bool TelemetryStream::has_component_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TelemetryStream::set_has_component_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TelemetryStream::clear_has_component_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TelemetryStream::clear_component_id() {
  component_id_ = 0u;
  clear_has_component_id();
}
 ::google::protobuf::uint32 TelemetryStream::component_id() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.component_id)
  return component_id_;
}
 void TelemetryStream::set_component_id(::google::protobuf::uint32 value) {
  set_has_component_id();
  component_id_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.component_id)
}

// optional uint32 sub_component_id = 3;
bool TelemetryStream::has_sub_component_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TelemetryStream::set_has_sub_component_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TelemetryStream::clear_has_sub_component_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TelemetryStream::clear_sub_component_id() {
  sub_component_id_ = 0u;
  clear_has_sub_component_id();
}
 ::google::protobuf::uint32 TelemetryStream::sub_component_id() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.sub_component_id)
  return sub_component_id_;
}
 void TelemetryStream::set_sub_component_id(::google::protobuf::uint32 value) {
  set_has_sub_component_id();
  sub_component_id_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.sub_component_id)
}

// optional string sensor_name = 4;
bool TelemetryStream::has_sensor_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TelemetryStream::set_has_sensor_name() {
  _has_bits_[0] |= 0x00000008u;
}
void TelemetryStream::clear_has_sensor_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void TelemetryStream::clear_sensor_name() {
  sensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_name();
}
 const ::std::string& TelemetryStream::sensor_name() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.sensor_name)
  return sensor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelemetryStream::set_sensor_name(const ::std::string& value) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TelemetryStream.sensor_name)
}
 void TelemetryStream::set_sensor_name(const char* value) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TelemetryStream.sensor_name)
}
 void TelemetryStream::set_sensor_name(const char* value, size_t size) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TelemetryStream.sensor_name)
}
 ::std::string* TelemetryStream::mutable_sensor_name() {
  set_has_sensor_name();
  // @@protoc_insertion_point(field_mutable:TelemetryStream.sensor_name)
  return sensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TelemetryStream::release_sensor_name() {
  clear_has_sensor_name();
  return sensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TelemetryStream::set_allocated_sensor_name(::std::string* sensor_name) {
  if (sensor_name != NULL) {
    set_has_sensor_name();
  } else {
    clear_has_sensor_name();
  }
  sensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_name);
  // @@protoc_insertion_point(field_set_allocated:TelemetryStream.sensor_name)
}

// optional uint32 sequence_number = 5;
bool TelemetryStream::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TelemetryStream::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000010u;
}
void TelemetryStream::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000010u;
}
void TelemetryStream::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
 ::google::protobuf::uint32 TelemetryStream::sequence_number() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.sequence_number)
  return sequence_number_;
}
 void TelemetryStream::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.sequence_number)
}

// optional uint64 timestamp = 6;
bool TelemetryStream::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TelemetryStream::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void TelemetryStream::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void TelemetryStream::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::uint64 TelemetryStream::timestamp() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.timestamp)
  return timestamp_;
}
 void TelemetryStream::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.timestamp)
}

// optional uint32 version_major = 7;
bool TelemetryStream::has_version_major() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TelemetryStream::set_has_version_major() {
  _has_bits_[0] |= 0x00000040u;
}
void TelemetryStream::clear_has_version_major() {
  _has_bits_[0] &= ~0x00000040u;
}
void TelemetryStream::clear_version_major() {
  version_major_ = 0u;
  clear_has_version_major();
}
 ::google::protobuf::uint32 TelemetryStream::version_major() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.version_major)
  return version_major_;
}
 void TelemetryStream::set_version_major(::google::protobuf::uint32 value) {
  set_has_version_major();
  version_major_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.version_major)
}

// optional uint32 version_minor = 8;
bool TelemetryStream::has_version_minor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TelemetryStream::set_has_version_minor() {
  _has_bits_[0] |= 0x00000080u;
}
void TelemetryStream::clear_has_version_minor() {
  _has_bits_[0] &= ~0x00000080u;
}
void TelemetryStream::clear_version_minor() {
  version_minor_ = 0u;
  clear_has_version_minor();
}
 ::google::protobuf::uint32 TelemetryStream::version_minor() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.version_minor)
  return version_minor_;
}
 void TelemetryStream::set_version_minor(::google::protobuf::uint32 value) {
  set_has_version_minor();
  version_minor_ = value;
  // @@protoc_insertion_point(field_set:TelemetryStream.version_minor)
}

// optional .IETFSensors ietf = 100;
bool TelemetryStream::has_ietf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TelemetryStream::set_has_ietf() {
  _has_bits_[0] |= 0x00000100u;
}
void TelemetryStream::clear_has_ietf() {
  _has_bits_[0] &= ~0x00000100u;
}
void TelemetryStream::clear_ietf() {
  if (ietf_ != NULL) ietf_->::IETFSensors::Clear();
  clear_has_ietf();
}
const ::IETFSensors& TelemetryStream::ietf() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.ietf)
  return ietf_ != NULL ? *ietf_ : *default_instance_->ietf_;
}
::IETFSensors* TelemetryStream::mutable_ietf() {
  set_has_ietf();
  if (ietf_ == NULL) {
    ietf_ = new ::IETFSensors;
  }
  // @@protoc_insertion_point(field_mutable:TelemetryStream.ietf)
  return ietf_;
}
::IETFSensors* TelemetryStream::release_ietf() {
  clear_has_ietf();
  ::IETFSensors* temp = ietf_;
  ietf_ = NULL;
  return temp;
}
void TelemetryStream::set_allocated_ietf(::IETFSensors* ietf) {
  delete ietf_;
  ietf_ = ietf;
  if (ietf) {
    set_has_ietf();
  } else {
    clear_has_ietf();
  }
  // @@protoc_insertion_point(field_set_allocated:TelemetryStream.ietf)
}

// optional .EnterpriseSensors enterprise = 101;
bool TelemetryStream::has_enterprise() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TelemetryStream::set_has_enterprise() {
  _has_bits_[0] |= 0x00000200u;
}
void TelemetryStream::clear_has_enterprise() {
  _has_bits_[0] &= ~0x00000200u;
}
void TelemetryStream::clear_enterprise() {
  if (enterprise_ != NULL) enterprise_->::EnterpriseSensors::Clear();
  clear_has_enterprise();
}
const ::EnterpriseSensors& TelemetryStream::enterprise() const {
  // @@protoc_insertion_point(field_get:TelemetryStream.enterprise)
  return enterprise_ != NULL ? *enterprise_ : *default_instance_->enterprise_;
}
::EnterpriseSensors* TelemetryStream::mutable_enterprise() {
  set_has_enterprise();
  if (enterprise_ == NULL) {
    enterprise_ = new ::EnterpriseSensors;
  }
  // @@protoc_insertion_point(field_mutable:TelemetryStream.enterprise)
  return enterprise_;
}
::EnterpriseSensors* TelemetryStream::release_enterprise() {
  clear_has_enterprise();
  ::EnterpriseSensors* temp = enterprise_;
  enterprise_ = NULL;
  return temp;
}
void TelemetryStream::set_allocated_enterprise(::EnterpriseSensors* enterprise) {
  delete enterprise_;
  enterprise_ = enterprise;
  if (enterprise) {
    set_has_enterprise();
  } else {
    clear_has_enterprise();
  }
  // @@protoc_insertion_point(field_set_allocated:TelemetryStream.enterprise)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IETFSensors::IETFSensors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IETFSensors)
}

void IETFSensors::InitAsDefaultInstance() {
}

IETFSensors::IETFSensors(const IETFSensors& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IETFSensors)
}

void IETFSensors::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IETFSensors::~IETFSensors() {
  // @@protoc_insertion_point(destructor:IETFSensors)
  SharedDtor();
}

void IETFSensors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IETFSensors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IETFSensors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IETFSensors_descriptor_;
}

const IETFSensors& IETFSensors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_telemetry_5ftop_2eproto();
  return *default_instance_;
}

IETFSensors* IETFSensors::default_instance_ = NULL;

IETFSensors* IETFSensors::New(::google::protobuf::Arena* arena) const {
  IETFSensors* n = new IETFSensors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IETFSensors::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IETFSensors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IETFSensors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    if ((8u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IETFSensors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IETFSensors)
  return false;
#undef DO_
}

void IETFSensors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IETFSensors)
  // Extension range [1, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IETFSensors)
}

::google::protobuf::uint8* IETFSensors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IETFSensors)
  // Extension range [1, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IETFSensors)
  return target;
}

int IETFSensors::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IETFSensors::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IETFSensors* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IETFSensors>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IETFSensors::MergeFrom(const IETFSensors& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IETFSensors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IETFSensors::CopyFrom(const IETFSensors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IETFSensors::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void IETFSensors::Swap(IETFSensors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IETFSensors::InternalSwap(IETFSensors* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata IETFSensors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IETFSensors_descriptor_;
  metadata.reflection = IETFSensors_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IETFSensors

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EnterpriseSensors::EnterpriseSensors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnterpriseSensors)
}

void EnterpriseSensors::InitAsDefaultInstance() {
}

EnterpriseSensors::EnterpriseSensors(const EnterpriseSensors& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EnterpriseSensors)
}

void EnterpriseSensors::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterpriseSensors::~EnterpriseSensors() {
  // @@protoc_insertion_point(destructor:EnterpriseSensors)
  SharedDtor();
}

void EnterpriseSensors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterpriseSensors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterpriseSensors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterpriseSensors_descriptor_;
}

const EnterpriseSensors& EnterpriseSensors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_telemetry_5ftop_2eproto();
  return *default_instance_;
}

EnterpriseSensors* EnterpriseSensors::default_instance_ = NULL;

EnterpriseSensors* EnterpriseSensors::New(::google::protobuf::Arena* arena) const {
  EnterpriseSensors* n = new EnterpriseSensors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnterpriseSensors::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnterpriseSensors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnterpriseSensors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    if ((8u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EnterpriseSensors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnterpriseSensors)
  return false;
#undef DO_
}

void EnterpriseSensors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnterpriseSensors)
  // Extension range [1, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnterpriseSensors)
}

::google::protobuf::uint8* EnterpriseSensors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterpriseSensors)
  // Extension range [1, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterpriseSensors)
  return target;
}

int EnterpriseSensors::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterpriseSensors::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EnterpriseSensors* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnterpriseSensors>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterpriseSensors::MergeFrom(const EnterpriseSensors& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EnterpriseSensors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterpriseSensors::CopyFrom(const EnterpriseSensors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterpriseSensors::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void EnterpriseSensors::Swap(EnterpriseSensors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnterpriseSensors::InternalSwap(EnterpriseSensors* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata EnterpriseSensors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterpriseSensors_descriptor_;
  metadata.reflection = EnterpriseSensors_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnterpriseSensors

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

JuniperNetworksSensors::JuniperNetworksSensors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JuniperNetworksSensors)
}

void JuniperNetworksSensors::InitAsDefaultInstance() {
}

JuniperNetworksSensors::JuniperNetworksSensors(const JuniperNetworksSensors& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JuniperNetworksSensors)
}

void JuniperNetworksSensors::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JuniperNetworksSensors::~JuniperNetworksSensors() {
  // @@protoc_insertion_point(destructor:JuniperNetworksSensors)
  SharedDtor();
}

void JuniperNetworksSensors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JuniperNetworksSensors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JuniperNetworksSensors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JuniperNetworksSensors_descriptor_;
}

const JuniperNetworksSensors& JuniperNetworksSensors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_telemetry_5ftop_2eproto();
  return *default_instance_;
}

JuniperNetworksSensors* JuniperNetworksSensors::default_instance_ = NULL;

JuniperNetworksSensors* JuniperNetworksSensors::New(::google::protobuf::Arena* arena) const {
  JuniperNetworksSensors* n = new JuniperNetworksSensors;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JuniperNetworksSensors::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool JuniperNetworksSensors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JuniperNetworksSensors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    if ((8u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:JuniperNetworksSensors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JuniperNetworksSensors)
  return false;
#undef DO_
}

void JuniperNetworksSensors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JuniperNetworksSensors)
  // Extension range [1, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JuniperNetworksSensors)
}

::google::protobuf::uint8* JuniperNetworksSensors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JuniperNetworksSensors)
  // Extension range [1, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1, 536870912, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JuniperNetworksSensors)
  return target;
}

int JuniperNetworksSensors::ByteSize() const {
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JuniperNetworksSensors::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JuniperNetworksSensors* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JuniperNetworksSensors>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JuniperNetworksSensors::MergeFrom(const JuniperNetworksSensors& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void JuniperNetworksSensors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JuniperNetworksSensors::CopyFrom(const JuniperNetworksSensors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JuniperNetworksSensors::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void JuniperNetworksSensors::Swap(JuniperNetworksSensors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JuniperNetworksSensors::InternalSwap(JuniperNetworksSensors* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata JuniperNetworksSensors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JuniperNetworksSensors_descriptor_;
  metadata.reflection = JuniperNetworksSensors_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JuniperNetworksSensors

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::TelemetryFieldOptions >, 11, false >
  telemetry_options(kTelemetryOptionsFieldNumber, ::TelemetryFieldOptions::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::EnterpriseSensors,
    ::google::protobuf::internal::MessageTypeTraits< ::JuniperNetworksSensors >, 11, false >
  juniperNetworks(kJuniperNetworksFieldNumber, ::JuniperNetworksSensors::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
