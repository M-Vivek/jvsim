// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iptunnels.proto

#ifndef PROTOBUF_iptunnels_2eproto__INCLUDED
#define PROTOBUF_iptunnels_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "telemetry_top.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_iptunnels_2eproto();
void protobuf_AssignDesc_iptunnels_2eproto();
void protobuf_ShutdownFile_iptunnels_2eproto();

class IpTunnelStats;
class IpTunnelStatsRecord;

// ===================================================================

class IpTunnelStats : public ::google::protobuf::Message {
 public:
  IpTunnelStats();
  virtual ~IpTunnelStats();

  IpTunnelStats(const IpTunnelStats& from);

  inline IpTunnelStats& operator=(const IpTunnelStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpTunnelStats& default_instance();

  void Swap(IpTunnelStats* other);

  // implements Message ----------------------------------------------

  inline IpTunnelStats* New() const { return New(NULL); }

  IpTunnelStats* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpTunnelStats& from);
  void MergeFrom(const IpTunnelStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IpTunnelStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IpTunnelStatsRecord iptunnel_stats_records = 1;
  int iptunnel_stats_records_size() const;
  void clear_iptunnel_stats_records();
  static const int kIptunnelStatsRecordsFieldNumber = 1;
  const ::IpTunnelStatsRecord& iptunnel_stats_records(int index) const;
  ::IpTunnelStatsRecord* mutable_iptunnel_stats_records(int index);
  ::IpTunnelStatsRecord* add_iptunnel_stats_records();
  ::google::protobuf::RepeatedPtrField< ::IpTunnelStatsRecord >*
      mutable_iptunnel_stats_records();
  const ::google::protobuf::RepeatedPtrField< ::IpTunnelStatsRecord >&
      iptunnel_stats_records() const;

  // @@protoc_insertion_point(class_scope:IpTunnelStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IpTunnelStatsRecord > iptunnel_stats_records_;
  friend void  protobuf_AddDesc_iptunnels_2eproto();
  friend void protobuf_AssignDesc_iptunnels_2eproto();
  friend void protobuf_ShutdownFile_iptunnels_2eproto();

  void InitAsDefaultInstance();
  static IpTunnelStats* default_instance_;
};
// -------------------------------------------------------------------

class IpTunnelStatsRecord : public ::google::protobuf::Message {
 public:
  IpTunnelStatsRecord();
  virtual ~IpTunnelStatsRecord();

  IpTunnelStatsRecord(const IpTunnelStatsRecord& from);

  inline IpTunnelStatsRecord& operator=(const IpTunnelStatsRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpTunnelStatsRecord& default_instance();

  void Swap(IpTunnelStatsRecord* other);

  // implements Message ----------------------------------------------

  inline IpTunnelStatsRecord* New() const { return New(NULL); }

  IpTunnelStatsRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IpTunnelStatsRecord& from);
  void MergeFrom(const IpTunnelStatsRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IpTunnelStatsRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 rx_packets = 2;
  bool has_rx_packets() const;
  void clear_rx_packets();
  static const int kRxPacketsFieldNumber = 2;
  ::google::protobuf::uint64 rx_packets() const;
  void set_rx_packets(::google::protobuf::uint64 value);

  // optional uint64 rx_bytes = 3;
  bool has_rx_bytes() const;
  void clear_rx_bytes();
  static const int kRxBytesFieldNumber = 3;
  ::google::protobuf::uint64 rx_bytes() const;
  void set_rx_bytes(::google::protobuf::uint64 value);

  // optional uint64 tx_packets = 4;
  bool has_tx_packets() const;
  void clear_tx_packets();
  static const int kTxPacketsFieldNumber = 4;
  ::google::protobuf::uint64 tx_packets() const;
  void set_tx_packets(::google::protobuf::uint64 value);

  // optional uint64 tx_bytes = 5;
  bool has_tx_bytes() const;
  void clear_tx_bytes();
  static const int kTxBytesFieldNumber = 5;
  ::google::protobuf::uint64 tx_bytes() const;
  void set_tx_bytes(::google::protobuf::uint64 value);

  // optional uint64 rpf_failed_packets = 6;
  bool has_rpf_failed_packets() const;
  void clear_rpf_failed_packets();
  static const int kRpfFailedPacketsFieldNumber = 6;
  ::google::protobuf::uint64 rpf_failed_packets() const;
  void set_rpf_failed_packets(::google::protobuf::uint64 value);

  // optional uint64 rpf_failed_bytes = 7;
  bool has_rpf_failed_bytes() const;
  void clear_rpf_failed_bytes();
  static const int kRpfFailedBytesFieldNumber = 7;
  ::google::protobuf::uint64 rpf_failed_bytes() const;
  void set_rpf_failed_bytes(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IpTunnelStatsRecord)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rx_packets();
  inline void clear_has_rx_packets();
  inline void set_has_rx_bytes();
  inline void clear_has_rx_bytes();
  inline void set_has_tx_packets();
  inline void clear_has_tx_packets();
  inline void set_has_tx_bytes();
  inline void clear_has_tx_bytes();
  inline void set_has_rpf_failed_packets();
  inline void clear_has_rpf_failed_packets();
  inline void set_has_rpf_failed_bytes();
  inline void clear_has_rpf_failed_bytes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 rx_packets_;
  ::google::protobuf::uint64 rx_bytes_;
  ::google::protobuf::uint64 tx_packets_;
  ::google::protobuf::uint64 tx_bytes_;
  ::google::protobuf::uint64 rpf_failed_packets_;
  ::google::protobuf::uint64 rpf_failed_bytes_;
  friend void  protobuf_AddDesc_iptunnels_2eproto();
  friend void protobuf_AssignDesc_iptunnels_2eproto();
  friend void protobuf_ShutdownFile_iptunnels_2eproto();

  void InitAsDefaultInstance();
  static IpTunnelStatsRecord* default_instance_;
};
// ===================================================================

static const int kJnprIptunnelsStatisticsExtFieldNumber = 14;
extern ::google::protobuf::internal::ExtensionIdentifier< ::JuniperNetworksSensors,
    ::google::protobuf::internal::MessageTypeTraits< ::IpTunnelStats >, 11, false >
  jnpr_iptunnels_statistics_ext;

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IpTunnelStats

// repeated .IpTunnelStatsRecord iptunnel_stats_records = 1;
inline int IpTunnelStats::iptunnel_stats_records_size() const {
  return iptunnel_stats_records_.size();
}
inline void IpTunnelStats::clear_iptunnel_stats_records() {
  iptunnel_stats_records_.Clear();
}
inline const ::IpTunnelStatsRecord& IpTunnelStats::iptunnel_stats_records(int index) const {
  // @@protoc_insertion_point(field_get:IpTunnelStats.iptunnel_stats_records)
  return iptunnel_stats_records_.Get(index);
}
inline ::IpTunnelStatsRecord* IpTunnelStats::mutable_iptunnel_stats_records(int index) {
  // @@protoc_insertion_point(field_mutable:IpTunnelStats.iptunnel_stats_records)
  return iptunnel_stats_records_.Mutable(index);
}
inline ::IpTunnelStatsRecord* IpTunnelStats::add_iptunnel_stats_records() {
  // @@protoc_insertion_point(field_add:IpTunnelStats.iptunnel_stats_records)
  return iptunnel_stats_records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IpTunnelStatsRecord >*
IpTunnelStats::mutable_iptunnel_stats_records() {
  // @@protoc_insertion_point(field_mutable_list:IpTunnelStats.iptunnel_stats_records)
  return &iptunnel_stats_records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IpTunnelStatsRecord >&
IpTunnelStats::iptunnel_stats_records() const {
  // @@protoc_insertion_point(field_list:IpTunnelStats.iptunnel_stats_records)
  return iptunnel_stats_records_;
}

// -------------------------------------------------------------------

// IpTunnelStatsRecord

// required string name = 1;
inline bool IpTunnelStatsRecord::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpTunnelStatsRecord::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpTunnelStatsRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpTunnelStatsRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& IpTunnelStatsRecord::name() const {
  // @@protoc_insertion_point(field_get:IpTunnelStatsRecord.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpTunnelStatsRecord::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IpTunnelStatsRecord.name)
}
inline void IpTunnelStatsRecord::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IpTunnelStatsRecord.name)
}
inline void IpTunnelStatsRecord::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IpTunnelStatsRecord.name)
}
inline ::std::string* IpTunnelStatsRecord::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:IpTunnelStatsRecord.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpTunnelStatsRecord::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpTunnelStatsRecord::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IpTunnelStatsRecord.name)
}

// optional uint64 rx_packets = 2;
inline bool IpTunnelStatsRecord::has_rx_packets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpTunnelStatsRecord::set_has_rx_packets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpTunnelStatsRecord::clear_has_rx_packets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpTunnelStatsRecord::clear_rx_packets() {
  rx_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_rx_packets();
}
inline ::google::protobuf::uint64 IpTunnelStatsRecord::rx_packets() const {
  // @@protoc_insertion_point(field_get:IpTunnelStatsRecord.rx_packets)
  return rx_packets_;
}
inline void IpTunnelStatsRecord::set_rx_packets(::google::protobuf::uint64 value) {
  set_has_rx_packets();
  rx_packets_ = value;
  // @@protoc_insertion_point(field_set:IpTunnelStatsRecord.rx_packets)
}

// optional uint64 rx_bytes = 3;
inline bool IpTunnelStatsRecord::has_rx_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpTunnelStatsRecord::set_has_rx_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpTunnelStatsRecord::clear_has_rx_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpTunnelStatsRecord::clear_rx_bytes() {
  rx_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_rx_bytes();
}
inline ::google::protobuf::uint64 IpTunnelStatsRecord::rx_bytes() const {
  // @@protoc_insertion_point(field_get:IpTunnelStatsRecord.rx_bytes)
  return rx_bytes_;
}
inline void IpTunnelStatsRecord::set_rx_bytes(::google::protobuf::uint64 value) {
  set_has_rx_bytes();
  rx_bytes_ = value;
  // @@protoc_insertion_point(field_set:IpTunnelStatsRecord.rx_bytes)
}

// optional uint64 tx_packets = 4;
inline bool IpTunnelStatsRecord::has_tx_packets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpTunnelStatsRecord::set_has_tx_packets() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpTunnelStatsRecord::clear_has_tx_packets() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpTunnelStatsRecord::clear_tx_packets() {
  tx_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_tx_packets();
}
inline ::google::protobuf::uint64 IpTunnelStatsRecord::tx_packets() const {
  // @@protoc_insertion_point(field_get:IpTunnelStatsRecord.tx_packets)
  return tx_packets_;
}
inline void IpTunnelStatsRecord::set_tx_packets(::google::protobuf::uint64 value) {
  set_has_tx_packets();
  tx_packets_ = value;
  // @@protoc_insertion_point(field_set:IpTunnelStatsRecord.tx_packets)
}

// optional uint64 tx_bytes = 5;
inline bool IpTunnelStatsRecord::has_tx_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpTunnelStatsRecord::set_has_tx_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpTunnelStatsRecord::clear_has_tx_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpTunnelStatsRecord::clear_tx_bytes() {
  tx_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_tx_bytes();
}
inline ::google::protobuf::uint64 IpTunnelStatsRecord::tx_bytes() const {
  // @@protoc_insertion_point(field_get:IpTunnelStatsRecord.tx_bytes)
  return tx_bytes_;
}
inline void IpTunnelStatsRecord::set_tx_bytes(::google::protobuf::uint64 value) {
  set_has_tx_bytes();
  tx_bytes_ = value;
  // @@protoc_insertion_point(field_set:IpTunnelStatsRecord.tx_bytes)
}

// optional uint64 rpf_failed_packets = 6;
inline bool IpTunnelStatsRecord::has_rpf_failed_packets() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpTunnelStatsRecord::set_has_rpf_failed_packets() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpTunnelStatsRecord::clear_has_rpf_failed_packets() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpTunnelStatsRecord::clear_rpf_failed_packets() {
  rpf_failed_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_rpf_failed_packets();
}
inline ::google::protobuf::uint64 IpTunnelStatsRecord::rpf_failed_packets() const {
  // @@protoc_insertion_point(field_get:IpTunnelStatsRecord.rpf_failed_packets)
  return rpf_failed_packets_;
}
inline void IpTunnelStatsRecord::set_rpf_failed_packets(::google::protobuf::uint64 value) {
  set_has_rpf_failed_packets();
  rpf_failed_packets_ = value;
  // @@protoc_insertion_point(field_set:IpTunnelStatsRecord.rpf_failed_packets)
}

// optional uint64 rpf_failed_bytes = 7;
inline bool IpTunnelStatsRecord::has_rpf_failed_bytes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpTunnelStatsRecord::set_has_rpf_failed_bytes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpTunnelStatsRecord::clear_has_rpf_failed_bytes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpTunnelStatsRecord::clear_rpf_failed_bytes() {
  rpf_failed_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_rpf_failed_bytes();
}
inline ::google::protobuf::uint64 IpTunnelStatsRecord::rpf_failed_bytes() const {
  // @@protoc_insertion_point(field_get:IpTunnelStatsRecord.rpf_failed_bytes)
  return rpf_failed_bytes_;
}
inline void IpTunnelStatsRecord::set_rpf_failed_bytes(::google::protobuf::uint64 value) {
  set_has_rpf_failed_bytes();
  rpf_failed_bytes_ = value;
  // @@protoc_insertion_point(field_set:IpTunnelStatsRecord.rpf_failed_bytes)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_iptunnels_2eproto__INCLUDED
