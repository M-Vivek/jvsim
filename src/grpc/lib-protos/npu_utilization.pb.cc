// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npu_utilization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "npu_utilization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NetworkProcessorUtilization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkProcessorUtilization_reflection_ = NULL;
const ::google::protobuf::Descriptor* Utilization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Utilization_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* PacketLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketLoad_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_npu_5futilization_2eproto() {
  protobuf_AddDesc_npu_5futilization_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "npu_utilization.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkProcessorUtilization_descriptor_ = file->message_type(0);
  static const int NetworkProcessorUtilization_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkProcessorUtilization, npu_util_stats_),
  };
  NetworkProcessorUtilization_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkProcessorUtilization_descriptor_,
      NetworkProcessorUtilization::default_instance_,
      NetworkProcessorUtilization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkProcessorUtilization, _has_bits_[0]),
      -1,
      -1,
      sizeof(NetworkProcessorUtilization),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkProcessorUtilization, _internal_metadata_),
      -1);
  Utilization_descriptor_ = file->message_type(1);
  static const int Utilization_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utilization, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utilization, utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utilization, packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utilization, memory_),
  };
  Utilization_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Utilization_descriptor_,
      Utilization::default_instance_,
      Utilization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utilization, _has_bits_[0]),
      -1,
      -1,
      sizeof(Utilization),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utilization, _internal_metadata_),
      -1);
  MemoryLoad_descriptor_ = file->message_type(2);
  static const int MemoryLoad_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLoad, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLoad, average_util_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLoad, highest_util_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLoad, lowest_util_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLoad, average_cache_hit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLoad, highest_cache_hit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLoad, lowest_cache_hit_rate_),
  };
  MemoryLoad_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemoryLoad_descriptor_,
      MemoryLoad::default_instance_,
      MemoryLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLoad, _has_bits_[0]),
      -1,
      -1,
      sizeof(MemoryLoad),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryLoad, _internal_metadata_),
      -1);
  PacketLoad_descriptor_ = file->message_type(3);
  static const int PacketLoad_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketLoad, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketLoad, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketLoad, average_instructions_per_packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketLoad, average_wait_cycles_per_packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketLoad, average_cycles_per_packet_),
  };
  PacketLoad_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PacketLoad_descriptor_,
      PacketLoad::default_instance_,
      PacketLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketLoad, _has_bits_[0]),
      -1,
      -1,
      sizeof(PacketLoad),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketLoad, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_npu_5futilization_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkProcessorUtilization_descriptor_, &NetworkProcessorUtilization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Utilization_descriptor_, &Utilization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemoryLoad_descriptor_, &MemoryLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PacketLoad_descriptor_, &PacketLoad::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_npu_5futilization_2eproto() {
  delete NetworkProcessorUtilization::default_instance_;
  delete NetworkProcessorUtilization_reflection_;
  delete Utilization::default_instance_;
  delete Utilization_reflection_;
  delete MemoryLoad::default_instance_;
  delete MemoryLoad_reflection_;
  delete PacketLoad::default_instance_;
  delete PacketLoad_reflection_;
}

void protobuf_AddDesc_npu_5futilization_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_telemetry_5ftop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025npu_utilization.proto\032\023telemetry_top.p"
    "roto\"C\n\033NetworkProcessorUtilization\022$\n\016n"
    "pu_util_stats\030\001 \003(\0132\014.Utilization\"q\n\013Uti"
    "lization\022\022\n\nidentifier\030\001 \002(\t\022\023\n\013utilizat"
    "ion\030\002 \001(\r\022\034\n\007packets\030\003 \003(\0132\013.PacketLoad\022"
    "\033\n\006memory\030\004 \003(\0132\013.MemoryLoad\"\272\001\n\nMemoryL"
    "oad\022\014\n\004name\030\001 \001(\t\022\024\n\014average_util\030\002 \001(\r\022"
    "\024\n\014highest_util\030\003 \001(\r\022\023\n\013lowest_util\030\004 \001"
    "(\r\022\036\n\026average_cache_hit_rate\030\005 \001(\r\022\036\n\026hi"
    "ghest_cache_hit_rate\030\006 \001(\r\022\035\n\025lowest_cac"
    "he_hit_rate\030\007 \001(\r\"\242\001\n\nPacketLoad\022\022\n\niden"
    "tifier\030\001 \002(\t\022\014\n\004rate\030\002 \001(\004\022\'\n\037average_in"
    "structions_per_packet\030\003 \001(\r\022&\n\036average_w"
    "ait_cycles_per_packet\030\004 \001(\r\022!\n\031average_c"
    "ycles_per_packet\030\005 \001(\r:W\n\030jnpr_npu_utili"
    "zation_ext\022\027.JuniperNetworksSensors\030\014 \001("
    "\0132\034.NetworkProcessorUtilization", 671);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "npu_utilization.proto", &protobuf_RegisterTypes);
  NetworkProcessorUtilization::default_instance_ = new NetworkProcessorUtilization();
  Utilization::default_instance_ = new Utilization();
  MemoryLoad::default_instance_ = new MemoryLoad();
  PacketLoad::default_instance_ = new PacketLoad();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::JuniperNetworksSensors::default_instance(),
    12, 11, false, false,
    &::NetworkProcessorUtilization::default_instance());
  NetworkProcessorUtilization::default_instance_->InitAsDefaultInstance();
  Utilization::default_instance_->InitAsDefaultInstance();
  MemoryLoad::default_instance_->InitAsDefaultInstance();
  PacketLoad::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_npu_5futilization_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_npu_5futilization_2eproto {
  StaticDescriptorInitializer_npu_5futilization_2eproto() {
    protobuf_AddDesc_npu_5futilization_2eproto();
  }
} static_descriptor_initializer_npu_5futilization_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int NetworkProcessorUtilization::kNpuUtilStatsFieldNumber;
#endif  // !_MSC_VER

NetworkProcessorUtilization::NetworkProcessorUtilization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetworkProcessorUtilization)
}

void NetworkProcessorUtilization::InitAsDefaultInstance() {
}

NetworkProcessorUtilization::NetworkProcessorUtilization(const NetworkProcessorUtilization& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetworkProcessorUtilization)
}

void NetworkProcessorUtilization::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkProcessorUtilization::~NetworkProcessorUtilization() {
  // @@protoc_insertion_point(destructor:NetworkProcessorUtilization)
  SharedDtor();
}

void NetworkProcessorUtilization::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkProcessorUtilization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkProcessorUtilization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkProcessorUtilization_descriptor_;
}

const NetworkProcessorUtilization& NetworkProcessorUtilization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npu_5futilization_2eproto();
  return *default_instance_;
}

NetworkProcessorUtilization* NetworkProcessorUtilization::default_instance_ = NULL;

NetworkProcessorUtilization* NetworkProcessorUtilization::New(::google::protobuf::Arena* arena) const {
  NetworkProcessorUtilization* n = new NetworkProcessorUtilization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkProcessorUtilization::Clear() {
  npu_util_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkProcessorUtilization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetworkProcessorUtilization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Utilization npu_util_stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_npu_util_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_npu_util_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_npu_util_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetworkProcessorUtilization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetworkProcessorUtilization)
  return false;
#undef DO_
}

void NetworkProcessorUtilization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetworkProcessorUtilization)
  // repeated .Utilization npu_util_stats = 1;
  for (unsigned int i = 0, n = this->npu_util_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npu_util_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetworkProcessorUtilization)
}

::google::protobuf::uint8* NetworkProcessorUtilization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkProcessorUtilization)
  // repeated .Utilization npu_util_stats = 1;
  for (unsigned int i = 0, n = this->npu_util_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npu_util_stats(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkProcessorUtilization)
  return target;
}

int NetworkProcessorUtilization::ByteSize() const {
  int total_size = 0;

  // repeated .Utilization npu_util_stats = 1;
  total_size += 1 * this->npu_util_stats_size();
  for (int i = 0; i < this->npu_util_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npu_util_stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkProcessorUtilization::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkProcessorUtilization* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkProcessorUtilization>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkProcessorUtilization::MergeFrom(const NetworkProcessorUtilization& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  npu_util_stats_.MergeFrom(from.npu_util_stats_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NetworkProcessorUtilization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkProcessorUtilization::CopyFrom(const NetworkProcessorUtilization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkProcessorUtilization::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->npu_util_stats())) return false;
  return true;
}

void NetworkProcessorUtilization::Swap(NetworkProcessorUtilization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkProcessorUtilization::InternalSwap(NetworkProcessorUtilization* other) {
  npu_util_stats_.UnsafeArenaSwap(&other->npu_util_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkProcessorUtilization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkProcessorUtilization_descriptor_;
  metadata.reflection = NetworkProcessorUtilization_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkProcessorUtilization

// repeated .Utilization npu_util_stats = 1;
int NetworkProcessorUtilization::npu_util_stats_size() const {
  return npu_util_stats_.size();
}
void NetworkProcessorUtilization::clear_npu_util_stats() {
  npu_util_stats_.Clear();
}
const ::Utilization& NetworkProcessorUtilization::npu_util_stats(int index) const {
  // @@protoc_insertion_point(field_get:NetworkProcessorUtilization.npu_util_stats)
  return npu_util_stats_.Get(index);
}
::Utilization* NetworkProcessorUtilization::mutable_npu_util_stats(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkProcessorUtilization.npu_util_stats)
  return npu_util_stats_.Mutable(index);
}
::Utilization* NetworkProcessorUtilization::add_npu_util_stats() {
  // @@protoc_insertion_point(field_add:NetworkProcessorUtilization.npu_util_stats)
  return npu_util_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::Utilization >*
NetworkProcessorUtilization::mutable_npu_util_stats() {
  // @@protoc_insertion_point(field_mutable_list:NetworkProcessorUtilization.npu_util_stats)
  return &npu_util_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::Utilization >&
NetworkProcessorUtilization::npu_util_stats() const {
  // @@protoc_insertion_point(field_list:NetworkProcessorUtilization.npu_util_stats)
  return npu_util_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Utilization::kIdentifierFieldNumber;
const int Utilization::kUtilizationFieldNumber;
const int Utilization::kPacketsFieldNumber;
const int Utilization::kMemoryFieldNumber;
#endif  // !_MSC_VER

Utilization::Utilization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Utilization)
}

void Utilization::InitAsDefaultInstance() {
}

Utilization::Utilization(const Utilization& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Utilization)
}

void Utilization::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utilization_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Utilization::~Utilization() {
  // @@protoc_insertion_point(destructor:Utilization)
  SharedDtor();
}

void Utilization::SharedDtor() {
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Utilization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Utilization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Utilization_descriptor_;
}

const Utilization& Utilization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npu_5futilization_2eproto();
  return *default_instance_;
}

Utilization* Utilization::default_instance_ = NULL;

Utilization* Utilization::New(::google::protobuf::Arena* arena) const {
  Utilization* n = new Utilization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Utilization::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_identifier()) {
      identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    utilization_ = 0u;
  }
  packets_.Clear();
  memory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Utilization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Utilization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Utilization.identifier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_utilization;
        break;
      }

      // optional uint32 utilization = 2;
      case 2: {
        if (tag == 16) {
         parse_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utilization_)));
          set_has_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_packets;
        break;
      }

      // repeated .PacketLoad packets = 3;
      case 3: {
        if (tag == 26) {
         parse_packets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_packets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_packets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_packets;
        if (input->ExpectTag(34)) goto parse_loop_memory;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .MemoryLoad memory = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_memory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_memory;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Utilization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Utilization)
  return false;
#undef DO_
}

void Utilization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Utilization)
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Utilization.identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identifier(), output);
  }

  // optional uint32 utilization = 2;
  if (has_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utilization(), output);
  }

  // repeated .PacketLoad packets = 3;
  for (unsigned int i = 0, n = this->packets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->packets(i), output);
  }

  // repeated .MemoryLoad memory = 4;
  for (unsigned int i = 0, n = this->memory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memory(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Utilization)
}

::google::protobuf::uint8* Utilization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Utilization)
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Utilization.identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }

  // optional uint32 utilization = 2;
  if (has_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utilization(), target);
  }

  // repeated .PacketLoad packets = 3;
  for (unsigned int i = 0, n = this->packets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->packets(i), target);
  }

  // repeated .MemoryLoad memory = 4;
  for (unsigned int i = 0, n = this->memory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->memory(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Utilization)
  return target;
}

int Utilization::ByteSize() const {
  int total_size = 0;

  // required string identifier = 1;
  if (has_identifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifier());
  }
  // optional uint32 utilization = 2;
  if (has_utilization()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->utilization());
  }

  // repeated .PacketLoad packets = 3;
  total_size += 1 * this->packets_size();
  for (int i = 0; i < this->packets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packets(i));
  }

  // repeated .MemoryLoad memory = 4;
  total_size += 1 * this->memory_size();
  for (int i = 0; i < this->memory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memory(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Utilization::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Utilization* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Utilization>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Utilization::MergeFrom(const Utilization& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  packets_.MergeFrom(from.packets_);
  memory_.MergeFrom(from.memory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_has_identifier();
      identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
    }
    if (from.has_utilization()) {
      set_utilization(from.utilization());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Utilization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utilization::CopyFrom(const Utilization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Utilization::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->packets())) return false;
  return true;
}

void Utilization::Swap(Utilization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Utilization::InternalSwap(Utilization* other) {
  identifier_.Swap(&other->identifier_);
  std::swap(utilization_, other->utilization_);
  packets_.UnsafeArenaSwap(&other->packets_);
  memory_.UnsafeArenaSwap(&other->memory_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Utilization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Utilization_descriptor_;
  metadata.reflection = Utilization_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Utilization

// required string identifier = 1;
bool Utilization::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Utilization::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
void Utilization::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
void Utilization::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
 const ::std::string& Utilization::identifier() const {
  // @@protoc_insertion_point(field_get:Utilization.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Utilization::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Utilization.identifier)
}
 void Utilization::set_identifier(const char* value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Utilization.identifier)
}
 void Utilization::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Utilization.identifier)
}
 ::std::string* Utilization::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:Utilization.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Utilization::release_identifier() {
  clear_has_identifier();
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Utilization::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:Utilization.identifier)
}

// optional uint32 utilization = 2;
bool Utilization::has_utilization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Utilization::set_has_utilization() {
  _has_bits_[0] |= 0x00000002u;
}
void Utilization::clear_has_utilization() {
  _has_bits_[0] &= ~0x00000002u;
}
void Utilization::clear_utilization() {
  utilization_ = 0u;
  clear_has_utilization();
}
 ::google::protobuf::uint32 Utilization::utilization() const {
  // @@protoc_insertion_point(field_get:Utilization.utilization)
  return utilization_;
}
 void Utilization::set_utilization(::google::protobuf::uint32 value) {
  set_has_utilization();
  utilization_ = value;
  // @@protoc_insertion_point(field_set:Utilization.utilization)
}

// repeated .PacketLoad packets = 3;
int Utilization::packets_size() const {
  return packets_.size();
}
void Utilization::clear_packets() {
  packets_.Clear();
}
const ::PacketLoad& Utilization::packets(int index) const {
  // @@protoc_insertion_point(field_get:Utilization.packets)
  return packets_.Get(index);
}
::PacketLoad* Utilization::mutable_packets(int index) {
  // @@protoc_insertion_point(field_mutable:Utilization.packets)
  return packets_.Mutable(index);
}
::PacketLoad* Utilization::add_packets() {
  // @@protoc_insertion_point(field_add:Utilization.packets)
  return packets_.Add();
}
::google::protobuf::RepeatedPtrField< ::PacketLoad >*
Utilization::mutable_packets() {
  // @@protoc_insertion_point(field_mutable_list:Utilization.packets)
  return &packets_;
}
const ::google::protobuf::RepeatedPtrField< ::PacketLoad >&
Utilization::packets() const {
  // @@protoc_insertion_point(field_list:Utilization.packets)
  return packets_;
}

// repeated .MemoryLoad memory = 4;
int Utilization::memory_size() const {
  return memory_.size();
}
void Utilization::clear_memory() {
  memory_.Clear();
}
const ::MemoryLoad& Utilization::memory(int index) const {
  // @@protoc_insertion_point(field_get:Utilization.memory)
  return memory_.Get(index);
}
::MemoryLoad* Utilization::mutable_memory(int index) {
  // @@protoc_insertion_point(field_mutable:Utilization.memory)
  return memory_.Mutable(index);
}
::MemoryLoad* Utilization::add_memory() {
  // @@protoc_insertion_point(field_add:Utilization.memory)
  return memory_.Add();
}
::google::protobuf::RepeatedPtrField< ::MemoryLoad >*
Utilization::mutable_memory() {
  // @@protoc_insertion_point(field_mutable_list:Utilization.memory)
  return &memory_;
}
const ::google::protobuf::RepeatedPtrField< ::MemoryLoad >&
Utilization::memory() const {
  // @@protoc_insertion_point(field_list:Utilization.memory)
  return memory_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MemoryLoad::kNameFieldNumber;
const int MemoryLoad::kAverageUtilFieldNumber;
const int MemoryLoad::kHighestUtilFieldNumber;
const int MemoryLoad::kLowestUtilFieldNumber;
const int MemoryLoad::kAverageCacheHitRateFieldNumber;
const int MemoryLoad::kHighestCacheHitRateFieldNumber;
const int MemoryLoad::kLowestCacheHitRateFieldNumber;
#endif  // !_MSC_VER

MemoryLoad::MemoryLoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MemoryLoad)
}

void MemoryLoad::InitAsDefaultInstance() {
}

MemoryLoad::MemoryLoad(const MemoryLoad& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MemoryLoad)
}

void MemoryLoad::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  average_util_ = 0u;
  highest_util_ = 0u;
  lowest_util_ = 0u;
  average_cache_hit_rate_ = 0u;
  highest_cache_hit_rate_ = 0u;
  lowest_cache_hit_rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryLoad::~MemoryLoad() {
  // @@protoc_insertion_point(destructor:MemoryLoad)
  SharedDtor();
}

void MemoryLoad::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MemoryLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryLoad_descriptor_;
}

const MemoryLoad& MemoryLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npu_5futilization_2eproto();
  return *default_instance_;
}

MemoryLoad* MemoryLoad::default_instance_ = NULL;

MemoryLoad* MemoryLoad::New(::google::protobuf::Arena* arena) const {
  MemoryLoad* n = new MemoryLoad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryLoad::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MemoryLoad*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(average_util_, lowest_cache_hit_rate_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MemoryLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MemoryLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MemoryLoad.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_average_util;
        break;
      }

      // optional uint32 average_util = 2;
      case 2: {
        if (tag == 16) {
         parse_average_util:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_util_)));
          set_has_average_util();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_highest_util;
        break;
      }

      // optional uint32 highest_util = 3;
      case 3: {
        if (tag == 24) {
         parse_highest_util:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_util_)));
          set_has_highest_util();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lowest_util;
        break;
      }

      // optional uint32 lowest_util = 4;
      case 4: {
        if (tag == 32) {
         parse_lowest_util:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowest_util_)));
          set_has_lowest_util();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_average_cache_hit_rate;
        break;
      }

      // optional uint32 average_cache_hit_rate = 5;
      case 5: {
        if (tag == 40) {
         parse_average_cache_hit_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_cache_hit_rate_)));
          set_has_average_cache_hit_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_highest_cache_hit_rate;
        break;
      }

      // optional uint32 highest_cache_hit_rate = 6;
      case 6: {
        if (tag == 48) {
         parse_highest_cache_hit_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_cache_hit_rate_)));
          set_has_highest_cache_hit_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lowest_cache_hit_rate;
        break;
      }

      // optional uint32 lowest_cache_hit_rate = 7;
      case 7: {
        if (tag == 56) {
         parse_lowest_cache_hit_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowest_cache_hit_rate_)));
          set_has_lowest_cache_hit_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MemoryLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MemoryLoad)
  return false;
#undef DO_
}

void MemoryLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MemoryLoad)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MemoryLoad.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 average_util = 2;
  if (has_average_util()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->average_util(), output);
  }

  // optional uint32 highest_util = 3;
  if (has_highest_util()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->highest_util(), output);
  }

  // optional uint32 lowest_util = 4;
  if (has_lowest_util()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lowest_util(), output);
  }

  // optional uint32 average_cache_hit_rate = 5;
  if (has_average_cache_hit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->average_cache_hit_rate(), output);
  }

  // optional uint32 highest_cache_hit_rate = 6;
  if (has_highest_cache_hit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->highest_cache_hit_rate(), output);
  }

  // optional uint32 lowest_cache_hit_rate = 7;
  if (has_lowest_cache_hit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lowest_cache_hit_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MemoryLoad)
}

::google::protobuf::uint8* MemoryLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemoryLoad)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MemoryLoad.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 average_util = 2;
  if (has_average_util()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->average_util(), target);
  }

  // optional uint32 highest_util = 3;
  if (has_highest_util()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->highest_util(), target);
  }

  // optional uint32 lowest_util = 4;
  if (has_lowest_util()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lowest_util(), target);
  }

  // optional uint32 average_cache_hit_rate = 5;
  if (has_average_cache_hit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->average_cache_hit_rate(), target);
  }

  // optional uint32 highest_cache_hit_rate = 6;
  if (has_highest_cache_hit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->highest_cache_hit_rate(), target);
  }

  // optional uint32 lowest_cache_hit_rate = 7;
  if (has_lowest_cache_hit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lowest_cache_hit_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemoryLoad)
  return target;
}

int MemoryLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 average_util = 2;
    if (has_average_util()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_util());
    }

    // optional uint32 highest_util = 3;
    if (has_highest_util()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_util());
    }

    // optional uint32 lowest_util = 4;
    if (has_lowest_util()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowest_util());
    }

    // optional uint32 average_cache_hit_rate = 5;
    if (has_average_cache_hit_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_cache_hit_rate());
    }

    // optional uint32 highest_cache_hit_rate = 6;
    if (has_highest_cache_hit_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_cache_hit_rate());
    }

    // optional uint32 lowest_cache_hit_rate = 7;
    if (has_lowest_cache_hit_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowest_cache_hit_rate());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryLoad::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MemoryLoad* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryLoad>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoryLoad::MergeFrom(const MemoryLoad& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_average_util()) {
      set_average_util(from.average_util());
    }
    if (from.has_highest_util()) {
      set_highest_util(from.highest_util());
    }
    if (from.has_lowest_util()) {
      set_lowest_util(from.lowest_util());
    }
    if (from.has_average_cache_hit_rate()) {
      set_average_cache_hit_rate(from.average_cache_hit_rate());
    }
    if (from.has_highest_cache_hit_rate()) {
      set_highest_cache_hit_rate(from.highest_cache_hit_rate());
    }
    if (from.has_lowest_cache_hit_rate()) {
      set_lowest_cache_hit_rate(from.lowest_cache_hit_rate());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MemoryLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryLoad::CopyFrom(const MemoryLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryLoad::IsInitialized() const {

  return true;
}

void MemoryLoad::Swap(MemoryLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryLoad::InternalSwap(MemoryLoad* other) {
  name_.Swap(&other->name_);
  std::swap(average_util_, other->average_util_);
  std::swap(highest_util_, other->highest_util_);
  std::swap(lowest_util_, other->lowest_util_);
  std::swap(average_cache_hit_rate_, other->average_cache_hit_rate_);
  std::swap(highest_cache_hit_rate_, other->highest_cache_hit_rate_);
  std::swap(lowest_cache_hit_rate_, other->lowest_cache_hit_rate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryLoad_descriptor_;
  metadata.reflection = MemoryLoad_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryLoad

// optional string name = 1;
bool MemoryLoad::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MemoryLoad::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MemoryLoad::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MemoryLoad::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MemoryLoad::name() const {
  // @@protoc_insertion_point(field_get:MemoryLoad.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MemoryLoad::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MemoryLoad.name)
}
 void MemoryLoad::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MemoryLoad.name)
}
 void MemoryLoad::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MemoryLoad.name)
}
 ::std::string* MemoryLoad::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:MemoryLoad.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MemoryLoad::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MemoryLoad::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MemoryLoad.name)
}

// optional uint32 average_util = 2;
bool MemoryLoad::has_average_util() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MemoryLoad::set_has_average_util() {
  _has_bits_[0] |= 0x00000002u;
}
void MemoryLoad::clear_has_average_util() {
  _has_bits_[0] &= ~0x00000002u;
}
void MemoryLoad::clear_average_util() {
  average_util_ = 0u;
  clear_has_average_util();
}
 ::google::protobuf::uint32 MemoryLoad::average_util() const {
  // @@protoc_insertion_point(field_get:MemoryLoad.average_util)
  return average_util_;
}
 void MemoryLoad::set_average_util(::google::protobuf::uint32 value) {
  set_has_average_util();
  average_util_ = value;
  // @@protoc_insertion_point(field_set:MemoryLoad.average_util)
}

// optional uint32 highest_util = 3;
bool MemoryLoad::has_highest_util() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MemoryLoad::set_has_highest_util() {
  _has_bits_[0] |= 0x00000004u;
}
void MemoryLoad::clear_has_highest_util() {
  _has_bits_[0] &= ~0x00000004u;
}
void MemoryLoad::clear_highest_util() {
  highest_util_ = 0u;
  clear_has_highest_util();
}
 ::google::protobuf::uint32 MemoryLoad::highest_util() const {
  // @@protoc_insertion_point(field_get:MemoryLoad.highest_util)
  return highest_util_;
}
 void MemoryLoad::set_highest_util(::google::protobuf::uint32 value) {
  set_has_highest_util();
  highest_util_ = value;
  // @@protoc_insertion_point(field_set:MemoryLoad.highest_util)
}

// optional uint32 lowest_util = 4;
bool MemoryLoad::has_lowest_util() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MemoryLoad::set_has_lowest_util() {
  _has_bits_[0] |= 0x00000008u;
}
void MemoryLoad::clear_has_lowest_util() {
  _has_bits_[0] &= ~0x00000008u;
}
void MemoryLoad::clear_lowest_util() {
  lowest_util_ = 0u;
  clear_has_lowest_util();
}
 ::google::protobuf::uint32 MemoryLoad::lowest_util() const {
  // @@protoc_insertion_point(field_get:MemoryLoad.lowest_util)
  return lowest_util_;
}
 void MemoryLoad::set_lowest_util(::google::protobuf::uint32 value) {
  set_has_lowest_util();
  lowest_util_ = value;
  // @@protoc_insertion_point(field_set:MemoryLoad.lowest_util)
}

// optional uint32 average_cache_hit_rate = 5;
bool MemoryLoad::has_average_cache_hit_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MemoryLoad::set_has_average_cache_hit_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void MemoryLoad::clear_has_average_cache_hit_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void MemoryLoad::clear_average_cache_hit_rate() {
  average_cache_hit_rate_ = 0u;
  clear_has_average_cache_hit_rate();
}
 ::google::protobuf::uint32 MemoryLoad::average_cache_hit_rate() const {
  // @@protoc_insertion_point(field_get:MemoryLoad.average_cache_hit_rate)
  return average_cache_hit_rate_;
}
 void MemoryLoad::set_average_cache_hit_rate(::google::protobuf::uint32 value) {
  set_has_average_cache_hit_rate();
  average_cache_hit_rate_ = value;
  // @@protoc_insertion_point(field_set:MemoryLoad.average_cache_hit_rate)
}

// optional uint32 highest_cache_hit_rate = 6;
bool MemoryLoad::has_highest_cache_hit_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MemoryLoad::set_has_highest_cache_hit_rate() {
  _has_bits_[0] |= 0x00000020u;
}
void MemoryLoad::clear_has_highest_cache_hit_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
void MemoryLoad::clear_highest_cache_hit_rate() {
  highest_cache_hit_rate_ = 0u;
  clear_has_highest_cache_hit_rate();
}
 ::google::protobuf::uint32 MemoryLoad::highest_cache_hit_rate() const {
  // @@protoc_insertion_point(field_get:MemoryLoad.highest_cache_hit_rate)
  return highest_cache_hit_rate_;
}
 void MemoryLoad::set_highest_cache_hit_rate(::google::protobuf::uint32 value) {
  set_has_highest_cache_hit_rate();
  highest_cache_hit_rate_ = value;
  // @@protoc_insertion_point(field_set:MemoryLoad.highest_cache_hit_rate)
}

// optional uint32 lowest_cache_hit_rate = 7;
bool MemoryLoad::has_lowest_cache_hit_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MemoryLoad::set_has_lowest_cache_hit_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void MemoryLoad::clear_has_lowest_cache_hit_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void MemoryLoad::clear_lowest_cache_hit_rate() {
  lowest_cache_hit_rate_ = 0u;
  clear_has_lowest_cache_hit_rate();
}
 ::google::protobuf::uint32 MemoryLoad::lowest_cache_hit_rate() const {
  // @@protoc_insertion_point(field_get:MemoryLoad.lowest_cache_hit_rate)
  return lowest_cache_hit_rate_;
}
 void MemoryLoad::set_lowest_cache_hit_rate(::google::protobuf::uint32 value) {
  set_has_lowest_cache_hit_rate();
  lowest_cache_hit_rate_ = value;
  // @@protoc_insertion_point(field_set:MemoryLoad.lowest_cache_hit_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PacketLoad::kIdentifierFieldNumber;
const int PacketLoad::kRateFieldNumber;
const int PacketLoad::kAverageInstructionsPerPacketFieldNumber;
const int PacketLoad::kAverageWaitCyclesPerPacketFieldNumber;
const int PacketLoad::kAverageCyclesPerPacketFieldNumber;
#endif  // !_MSC_VER

PacketLoad::PacketLoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PacketLoad)
}

void PacketLoad::InitAsDefaultInstance() {
}

PacketLoad::PacketLoad(const PacketLoad& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PacketLoad)
}

void PacketLoad::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rate_ = GOOGLE_ULONGLONG(0);
  average_instructions_per_packet_ = 0u;
  average_wait_cycles_per_packet_ = 0u;
  average_cycles_per_packet_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketLoad::~PacketLoad() {
  // @@protoc_insertion_point(destructor:PacketLoad)
  SharedDtor();
}

void PacketLoad::SharedDtor() {
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PacketLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketLoad_descriptor_;
}

const PacketLoad& PacketLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npu_5futilization_2eproto();
  return *default_instance_;
}

PacketLoad* PacketLoad::default_instance_ = NULL;

PacketLoad* PacketLoad::New(::google::protobuf::Arena* arena) const {
  PacketLoad* n = new PacketLoad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketLoad::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PacketLoad*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(rate_, average_cycles_per_packet_);
    if (has_identifier()) {
      identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PacketLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PacketLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "PacketLoad.identifier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // optional uint64 rate = 2;
      case 2: {
        if (tag == 16) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_average_instructions_per_packet;
        break;
      }

      // optional uint32 average_instructions_per_packet = 3;
      case 3: {
        if (tag == 24) {
         parse_average_instructions_per_packet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_instructions_per_packet_)));
          set_has_average_instructions_per_packet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_average_wait_cycles_per_packet;
        break;
      }

      // optional uint32 average_wait_cycles_per_packet = 4;
      case 4: {
        if (tag == 32) {
         parse_average_wait_cycles_per_packet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_wait_cycles_per_packet_)));
          set_has_average_wait_cycles_per_packet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_average_cycles_per_packet;
        break;
      }

      // optional uint32 average_cycles_per_packet = 5;
      case 5: {
        if (tag == 40) {
         parse_average_cycles_per_packet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_cycles_per_packet_)));
          set_has_average_cycles_per_packet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PacketLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PacketLoad)
  return false;
#undef DO_
}

void PacketLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PacketLoad)
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PacketLoad.identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identifier(), output);
  }

  // optional uint64 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rate(), output);
  }

  // optional uint32 average_instructions_per_packet = 3;
  if (has_average_instructions_per_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->average_instructions_per_packet(), output);
  }

  // optional uint32 average_wait_cycles_per_packet = 4;
  if (has_average_wait_cycles_per_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->average_wait_cycles_per_packet(), output);
  }

  // optional uint32 average_cycles_per_packet = 5;
  if (has_average_cycles_per_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->average_cycles_per_packet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PacketLoad)
}

::google::protobuf::uint8* PacketLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PacketLoad)
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "PacketLoad.identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }

  // optional uint64 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rate(), target);
  }

  // optional uint32 average_instructions_per_packet = 3;
  if (has_average_instructions_per_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->average_instructions_per_packet(), target);
  }

  // optional uint32 average_wait_cycles_per_packet = 4;
  if (has_average_wait_cycles_per_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->average_wait_cycles_per_packet(), target);
  }

  // optional uint32 average_cycles_per_packet = 5;
  if (has_average_cycles_per_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->average_cycles_per_packet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PacketLoad)
  return target;
}

int PacketLoad::ByteSize() const {
  int total_size = 0;

  // required string identifier = 1;
  if (has_identifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifier());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional uint64 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rate());
    }

    // optional uint32 average_instructions_per_packet = 3;
    if (has_average_instructions_per_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_instructions_per_packet());
    }

    // optional uint32 average_wait_cycles_per_packet = 4;
    if (has_average_wait_cycles_per_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_wait_cycles_per_packet());
    }

    // optional uint32 average_cycles_per_packet = 5;
    if (has_average_cycles_per_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_cycles_per_packet());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketLoad::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PacketLoad* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketLoad>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PacketLoad::MergeFrom(const PacketLoad& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_has_identifier();
      identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_average_instructions_per_packet()) {
      set_average_instructions_per_packet(from.average_instructions_per_packet());
    }
    if (from.has_average_wait_cycles_per_packet()) {
      set_average_wait_cycles_per_packet(from.average_wait_cycles_per_packet());
    }
    if (from.has_average_cycles_per_packet()) {
      set_average_cycles_per_packet(from.average_cycles_per_packet());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PacketLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketLoad::CopyFrom(const PacketLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketLoad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PacketLoad::Swap(PacketLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketLoad::InternalSwap(PacketLoad* other) {
  identifier_.Swap(&other->identifier_);
  std::swap(rate_, other->rate_);
  std::swap(average_instructions_per_packet_, other->average_instructions_per_packet_);
  std::swap(average_wait_cycles_per_packet_, other->average_wait_cycles_per_packet_);
  std::swap(average_cycles_per_packet_, other->average_cycles_per_packet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketLoad_descriptor_;
  metadata.reflection = PacketLoad_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketLoad

// required string identifier = 1;
bool PacketLoad::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PacketLoad::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
void PacketLoad::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
void PacketLoad::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
 const ::std::string& PacketLoad::identifier() const {
  // @@protoc_insertion_point(field_get:PacketLoad.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketLoad::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PacketLoad.identifier)
}
 void PacketLoad::set_identifier(const char* value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PacketLoad.identifier)
}
 void PacketLoad::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PacketLoad.identifier)
}
 ::std::string* PacketLoad::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:PacketLoad.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PacketLoad::release_identifier() {
  clear_has_identifier();
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PacketLoad::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:PacketLoad.identifier)
}

// optional uint64 rate = 2;
bool PacketLoad::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PacketLoad::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
void PacketLoad::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
void PacketLoad::clear_rate() {
  rate_ = GOOGLE_ULONGLONG(0);
  clear_has_rate();
}
 ::google::protobuf::uint64 PacketLoad::rate() const {
  // @@protoc_insertion_point(field_get:PacketLoad.rate)
  return rate_;
}
 void PacketLoad::set_rate(::google::protobuf::uint64 value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:PacketLoad.rate)
}

// optional uint32 average_instructions_per_packet = 3;
bool PacketLoad::has_average_instructions_per_packet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PacketLoad::set_has_average_instructions_per_packet() {
  _has_bits_[0] |= 0x00000004u;
}
void PacketLoad::clear_has_average_instructions_per_packet() {
  _has_bits_[0] &= ~0x00000004u;
}
void PacketLoad::clear_average_instructions_per_packet() {
  average_instructions_per_packet_ = 0u;
  clear_has_average_instructions_per_packet();
}
 ::google::protobuf::uint32 PacketLoad::average_instructions_per_packet() const {
  // @@protoc_insertion_point(field_get:PacketLoad.average_instructions_per_packet)
  return average_instructions_per_packet_;
}
 void PacketLoad::set_average_instructions_per_packet(::google::protobuf::uint32 value) {
  set_has_average_instructions_per_packet();
  average_instructions_per_packet_ = value;
  // @@protoc_insertion_point(field_set:PacketLoad.average_instructions_per_packet)
}

// optional uint32 average_wait_cycles_per_packet = 4;
bool PacketLoad::has_average_wait_cycles_per_packet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PacketLoad::set_has_average_wait_cycles_per_packet() {
  _has_bits_[0] |= 0x00000008u;
}
void PacketLoad::clear_has_average_wait_cycles_per_packet() {
  _has_bits_[0] &= ~0x00000008u;
}
void PacketLoad::clear_average_wait_cycles_per_packet() {
  average_wait_cycles_per_packet_ = 0u;
  clear_has_average_wait_cycles_per_packet();
}
 ::google::protobuf::uint32 PacketLoad::average_wait_cycles_per_packet() const {
  // @@protoc_insertion_point(field_get:PacketLoad.average_wait_cycles_per_packet)
  return average_wait_cycles_per_packet_;
}
 void PacketLoad::set_average_wait_cycles_per_packet(::google::protobuf::uint32 value) {
  set_has_average_wait_cycles_per_packet();
  average_wait_cycles_per_packet_ = value;
  // @@protoc_insertion_point(field_set:PacketLoad.average_wait_cycles_per_packet)
}

// optional uint32 average_cycles_per_packet = 5;
bool PacketLoad::has_average_cycles_per_packet() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PacketLoad::set_has_average_cycles_per_packet() {
  _has_bits_[0] |= 0x00000010u;
}
void PacketLoad::clear_has_average_cycles_per_packet() {
  _has_bits_[0] &= ~0x00000010u;
}
void PacketLoad::clear_average_cycles_per_packet() {
  average_cycles_per_packet_ = 0u;
  clear_has_average_cycles_per_packet();
}
 ::google::protobuf::uint32 PacketLoad::average_cycles_per_packet() const {
  // @@protoc_insertion_point(field_get:PacketLoad.average_cycles_per_packet)
  return average_cycles_per_packet_;
}
 void PacketLoad::set_average_cycles_per_packet(::google::protobuf::uint32 value) {
  set_has_average_cycles_per_packet();
  average_cycles_per_packet_ = value;
  // @@protoc_insertion_point(field_set:PacketLoad.average_cycles_per_packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::JuniperNetworksSensors,
    ::google::protobuf::internal::MessageTypeTraits< ::NetworkProcessorUtilization >, 11, false >
  jnpr_npu_utilization_ext(kJnprNpuUtilizationExtFieldNumber, ::NetworkProcessorUtilization::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
