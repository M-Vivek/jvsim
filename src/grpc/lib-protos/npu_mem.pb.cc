// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npu_mem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "npu_mem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NetworkProcessorMemoryUtilization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkProcessorMemoryUtilization_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpuMemory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpuMemory_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpuMemorySummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpuMemorySummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpuMemoryPartition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpuMemoryPartition_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_npu_5fmem_2eproto() {
  protobuf_AddDesc_npu_5fmem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "npu_mem.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkProcessorMemoryUtilization_descriptor_ = file->message_type(0);
  static const int NetworkProcessorMemoryUtilization_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkProcessorMemoryUtilization, memory_stats_),
  };
  NetworkProcessorMemoryUtilization_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetworkProcessorMemoryUtilization_descriptor_,
      NetworkProcessorMemoryUtilization::default_instance_,
      NetworkProcessorMemoryUtilization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkProcessorMemoryUtilization, _has_bits_[0]),
      -1,
      -1,
      sizeof(NetworkProcessorMemoryUtilization),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkProcessorMemoryUtilization, _internal_metadata_),
      -1);
  NpuMemory_descriptor_ = file->message_type(1);
  static const int NpuMemory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemory, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemory, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemory, partition_),
  };
  NpuMemory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NpuMemory_descriptor_,
      NpuMemory::default_instance_,
      NpuMemory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemory, _has_bits_[0]),
      -1,
      -1,
      sizeof(NpuMemory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemory, _internal_metadata_),
      -1);
  NpuMemorySummary_descriptor_ = file->message_type(2);
  static const int NpuMemorySummary_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemorySummary, resource_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemorySummary, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemorySummary, allocated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemorySummary, utilization_),
  };
  NpuMemorySummary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NpuMemorySummary_descriptor_,
      NpuMemorySummary::default_instance_,
      NpuMemorySummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemorySummary, _has_bits_[0]),
      -1,
      -1,
      sizeof(NpuMemorySummary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemorySummary, _internal_metadata_),
      -1);
  NpuMemoryPartition_descriptor_ = file->message_type(3);
  static const int NpuMemoryPartition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemoryPartition, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemoryPartition, application_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemoryPartition, bytes_allocated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemoryPartition, allocation_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemoryPartition, free_count_),
  };
  NpuMemoryPartition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NpuMemoryPartition_descriptor_,
      NpuMemoryPartition::default_instance_,
      NpuMemoryPartition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemoryPartition, _has_bits_[0]),
      -1,
      -1,
      sizeof(NpuMemoryPartition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpuMemoryPartition, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_npu_5fmem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetworkProcessorMemoryUtilization_descriptor_, &NetworkProcessorMemoryUtilization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NpuMemory_descriptor_, &NpuMemory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NpuMemorySummary_descriptor_, &NpuMemorySummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NpuMemoryPartition_descriptor_, &NpuMemoryPartition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_npu_5fmem_2eproto() {
  delete NetworkProcessorMemoryUtilization::default_instance_;
  delete NetworkProcessorMemoryUtilization_reflection_;
  delete NpuMemory::default_instance_;
  delete NpuMemory_reflection_;
  delete NpuMemorySummary::default_instance_;
  delete NpuMemorySummary_reflection_;
  delete NpuMemoryPartition::default_instance_;
  delete NpuMemoryPartition_reflection_;
}

void protobuf_AddDesc_npu_5fmem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_telemetry_5ftop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnpu_mem.proto\032\023telemetry_top.proto\"E\n!"
    "NetworkProcessorMemoryUtilization\022 \n\014mem"
    "ory_stats\030\001 \003(\0132\n.NpuMemory\"k\n\tNpuMemory"
    "\022\022\n\nidentifier\030\001 \002(\t\022\"\n\007summary\030\002 \003(\0132\021."
    "NpuMemorySummary\022&\n\tpartition\030\003 \003(\0132\023.Np"
    "uMemoryPartition\"_\n\020NpuMemorySummary\022\025\n\r"
    "resource_name\030\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\021\n\tall"
    "ocated\030\003 \001(\004\022\023\n\013utilization\030\004 \001(\005\"\203\001\n\022Np"
    "uMemoryPartition\022\014\n\004name\030\001 \001(\t\022\030\n\020applic"
    "ation_name\030\002 \001(\t\022\027\n\017bytes_allocated\030\003 \001("
    "\r\022\030\n\020allocation_count\030\004 \001(\r\022\022\n\nfree_coun"
    "t\030\005 \001(\r:S\n\016npu_memory_ext\022\027.JuniperNetwo"
    "rksSensors\030\013 \001(\0132\".NetworkProcessorMemor"
    "yUtilization", 532);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "npu_mem.proto", &protobuf_RegisterTypes);
  NetworkProcessorMemoryUtilization::default_instance_ = new NetworkProcessorMemoryUtilization();
  NpuMemory::default_instance_ = new NpuMemory();
  NpuMemorySummary::default_instance_ = new NpuMemorySummary();
  NpuMemoryPartition::default_instance_ = new NpuMemoryPartition();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::JuniperNetworksSensors::default_instance(),
    11, 11, false, false,
    &::NetworkProcessorMemoryUtilization::default_instance());
  NetworkProcessorMemoryUtilization::default_instance_->InitAsDefaultInstance();
  NpuMemory::default_instance_->InitAsDefaultInstance();
  NpuMemorySummary::default_instance_->InitAsDefaultInstance();
  NpuMemoryPartition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_npu_5fmem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_npu_5fmem_2eproto {
  StaticDescriptorInitializer_npu_5fmem_2eproto() {
    protobuf_AddDesc_npu_5fmem_2eproto();
  }
} static_descriptor_initializer_npu_5fmem_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int NetworkProcessorMemoryUtilization::kMemoryStatsFieldNumber;
#endif  // !_MSC_VER

NetworkProcessorMemoryUtilization::NetworkProcessorMemoryUtilization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetworkProcessorMemoryUtilization)
}

void NetworkProcessorMemoryUtilization::InitAsDefaultInstance() {
}

NetworkProcessorMemoryUtilization::NetworkProcessorMemoryUtilization(const NetworkProcessorMemoryUtilization& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetworkProcessorMemoryUtilization)
}

void NetworkProcessorMemoryUtilization::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkProcessorMemoryUtilization::~NetworkProcessorMemoryUtilization() {
  // @@protoc_insertion_point(destructor:NetworkProcessorMemoryUtilization)
  SharedDtor();
}

void NetworkProcessorMemoryUtilization::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkProcessorMemoryUtilization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkProcessorMemoryUtilization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkProcessorMemoryUtilization_descriptor_;
}

const NetworkProcessorMemoryUtilization& NetworkProcessorMemoryUtilization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npu_5fmem_2eproto();
  return *default_instance_;
}

NetworkProcessorMemoryUtilization* NetworkProcessorMemoryUtilization::default_instance_ = NULL;

NetworkProcessorMemoryUtilization* NetworkProcessorMemoryUtilization::New(::google::protobuf::Arena* arena) const {
  NetworkProcessorMemoryUtilization* n = new NetworkProcessorMemoryUtilization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkProcessorMemoryUtilization::Clear() {
  memory_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NetworkProcessorMemoryUtilization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetworkProcessorMemoryUtilization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NpuMemory memory_stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_memory_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_memory_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_memory_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetworkProcessorMemoryUtilization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetworkProcessorMemoryUtilization)
  return false;
#undef DO_
}

void NetworkProcessorMemoryUtilization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetworkProcessorMemoryUtilization)
  // repeated .NpuMemory memory_stats = 1;
  for (unsigned int i = 0, n = this->memory_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->memory_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetworkProcessorMemoryUtilization)
}

::google::protobuf::uint8* NetworkProcessorMemoryUtilization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetworkProcessorMemoryUtilization)
  // repeated .NpuMemory memory_stats = 1;
  for (unsigned int i = 0, n = this->memory_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->memory_stats(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkProcessorMemoryUtilization)
  return target;
}

int NetworkProcessorMemoryUtilization::ByteSize() const {
  int total_size = 0;

  // repeated .NpuMemory memory_stats = 1;
  total_size += 1 * this->memory_stats_size();
  for (int i = 0; i < this->memory_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memory_stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkProcessorMemoryUtilization::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NetworkProcessorMemoryUtilization* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkProcessorMemoryUtilization>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkProcessorMemoryUtilization::MergeFrom(const NetworkProcessorMemoryUtilization& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  memory_stats_.MergeFrom(from.memory_stats_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NetworkProcessorMemoryUtilization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkProcessorMemoryUtilization::CopyFrom(const NetworkProcessorMemoryUtilization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkProcessorMemoryUtilization::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->memory_stats())) return false;
  return true;
}

void NetworkProcessorMemoryUtilization::Swap(NetworkProcessorMemoryUtilization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkProcessorMemoryUtilization::InternalSwap(NetworkProcessorMemoryUtilization* other) {
  memory_stats_.UnsafeArenaSwap(&other->memory_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkProcessorMemoryUtilization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkProcessorMemoryUtilization_descriptor_;
  metadata.reflection = NetworkProcessorMemoryUtilization_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkProcessorMemoryUtilization

// repeated .NpuMemory memory_stats = 1;
int NetworkProcessorMemoryUtilization::memory_stats_size() const {
  return memory_stats_.size();
}
void NetworkProcessorMemoryUtilization::clear_memory_stats() {
  memory_stats_.Clear();
}
const ::NpuMemory& NetworkProcessorMemoryUtilization::memory_stats(int index) const {
  // @@protoc_insertion_point(field_get:NetworkProcessorMemoryUtilization.memory_stats)
  return memory_stats_.Get(index);
}
::NpuMemory* NetworkProcessorMemoryUtilization::mutable_memory_stats(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkProcessorMemoryUtilization.memory_stats)
  return memory_stats_.Mutable(index);
}
::NpuMemory* NetworkProcessorMemoryUtilization::add_memory_stats() {
  // @@protoc_insertion_point(field_add:NetworkProcessorMemoryUtilization.memory_stats)
  return memory_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::NpuMemory >*
NetworkProcessorMemoryUtilization::mutable_memory_stats() {
  // @@protoc_insertion_point(field_mutable_list:NetworkProcessorMemoryUtilization.memory_stats)
  return &memory_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::NpuMemory >&
NetworkProcessorMemoryUtilization::memory_stats() const {
  // @@protoc_insertion_point(field_list:NetworkProcessorMemoryUtilization.memory_stats)
  return memory_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NpuMemory::kIdentifierFieldNumber;
const int NpuMemory::kSummaryFieldNumber;
const int NpuMemory::kPartitionFieldNumber;
#endif  // !_MSC_VER

NpuMemory::NpuMemory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NpuMemory)
}

void NpuMemory::InitAsDefaultInstance() {
}

NpuMemory::NpuMemory(const NpuMemory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NpuMemory)
}

void NpuMemory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  identifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpuMemory::~NpuMemory() {
  // @@protoc_insertion_point(destructor:NpuMemory)
  SharedDtor();
}

void NpuMemory::SharedDtor() {
  identifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NpuMemory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpuMemory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpuMemory_descriptor_;
}

const NpuMemory& NpuMemory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npu_5fmem_2eproto();
  return *default_instance_;
}

NpuMemory* NpuMemory::default_instance_ = NULL;

NpuMemory* NpuMemory::New(::google::protobuf::Arena* arena) const {
  NpuMemory* n = new NpuMemory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NpuMemory::Clear() {
  if (has_identifier()) {
    identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  summary_.Clear();
  partition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NpuMemory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NpuMemory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NpuMemory.identifier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_summary;
        break;
      }

      // repeated .NpuMemorySummary summary = 2;
      case 2: {
        if (tag == 18) {
         parse_summary:
          DO_(input->IncrementRecursionDepth());
         parse_loop_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_summary;
        if (input->ExpectTag(26)) goto parse_loop_partition;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .NpuMemoryPartition partition = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_partition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_partition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_partition;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NpuMemory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NpuMemory)
  return false;
#undef DO_
}

void NpuMemory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NpuMemory)
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NpuMemory.identifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->identifier(), output);
  }

  // repeated .NpuMemorySummary summary = 2;
  for (unsigned int i = 0, n = this->summary_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->summary(i), output);
  }

  // repeated .NpuMemoryPartition partition = 3;
  for (unsigned int i = 0, n = this->partition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->partition(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NpuMemory)
}

::google::protobuf::uint8* NpuMemory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NpuMemory)
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NpuMemory.identifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }

  // repeated .NpuMemorySummary summary = 2;
  for (unsigned int i = 0, n = this->summary_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->summary(i), target);
  }

  // repeated .NpuMemoryPartition partition = 3;
  for (unsigned int i = 0, n = this->partition_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->partition(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NpuMemory)
  return target;
}

int NpuMemory::ByteSize() const {
  int total_size = 0;

  // required string identifier = 1;
  if (has_identifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identifier());
  }
  // repeated .NpuMemorySummary summary = 2;
  total_size += 1 * this->summary_size();
  for (int i = 0; i < this->summary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->summary(i));
  }

  // repeated .NpuMemoryPartition partition = 3;
  total_size += 1 * this->partition_size();
  for (int i = 0; i < this->partition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partition(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpuMemory::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NpuMemory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NpuMemory>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpuMemory::MergeFrom(const NpuMemory& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  summary_.MergeFrom(from.summary_);
  partition_.MergeFrom(from.partition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_has_identifier();
      identifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identifier_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NpuMemory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpuMemory::CopyFrom(const NpuMemory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpuMemory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NpuMemory::Swap(NpuMemory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NpuMemory::InternalSwap(NpuMemory* other) {
  identifier_.Swap(&other->identifier_);
  summary_.UnsafeArenaSwap(&other->summary_);
  partition_.UnsafeArenaSwap(&other->partition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NpuMemory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpuMemory_descriptor_;
  metadata.reflection = NpuMemory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NpuMemory

// required string identifier = 1;
bool NpuMemory::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NpuMemory::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
void NpuMemory::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
void NpuMemory::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identifier();
}
 const ::std::string& NpuMemory::identifier() const {
  // @@protoc_insertion_point(field_get:NpuMemory.identifier)
  return identifier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NpuMemory::set_identifier(const ::std::string& value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NpuMemory.identifier)
}
 void NpuMemory::set_identifier(const char* value) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NpuMemory.identifier)
}
 void NpuMemory::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NpuMemory.identifier)
}
 ::std::string* NpuMemory::mutable_identifier() {
  set_has_identifier();
  // @@protoc_insertion_point(field_mutable:NpuMemory.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NpuMemory::release_identifier() {
  clear_has_identifier();
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NpuMemory::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    set_has_identifier();
  } else {
    clear_has_identifier();
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:NpuMemory.identifier)
}

// repeated .NpuMemorySummary summary = 2;
int NpuMemory::summary_size() const {
  return summary_.size();
}
void NpuMemory::clear_summary() {
  summary_.Clear();
}
const ::NpuMemorySummary& NpuMemory::summary(int index) const {
  // @@protoc_insertion_point(field_get:NpuMemory.summary)
  return summary_.Get(index);
}
::NpuMemorySummary* NpuMemory::mutable_summary(int index) {
  // @@protoc_insertion_point(field_mutable:NpuMemory.summary)
  return summary_.Mutable(index);
}
::NpuMemorySummary* NpuMemory::add_summary() {
  // @@protoc_insertion_point(field_add:NpuMemory.summary)
  return summary_.Add();
}
::google::protobuf::RepeatedPtrField< ::NpuMemorySummary >*
NpuMemory::mutable_summary() {
  // @@protoc_insertion_point(field_mutable_list:NpuMemory.summary)
  return &summary_;
}
const ::google::protobuf::RepeatedPtrField< ::NpuMemorySummary >&
NpuMemory::summary() const {
  // @@protoc_insertion_point(field_list:NpuMemory.summary)
  return summary_;
}

// repeated .NpuMemoryPartition partition = 3;
int NpuMemory::partition_size() const {
  return partition_.size();
}
void NpuMemory::clear_partition() {
  partition_.Clear();
}
const ::NpuMemoryPartition& NpuMemory::partition(int index) const {
  // @@protoc_insertion_point(field_get:NpuMemory.partition)
  return partition_.Get(index);
}
::NpuMemoryPartition* NpuMemory::mutable_partition(int index) {
  // @@protoc_insertion_point(field_mutable:NpuMemory.partition)
  return partition_.Mutable(index);
}
::NpuMemoryPartition* NpuMemory::add_partition() {
  // @@protoc_insertion_point(field_add:NpuMemory.partition)
  return partition_.Add();
}
::google::protobuf::RepeatedPtrField< ::NpuMemoryPartition >*
NpuMemory::mutable_partition() {
  // @@protoc_insertion_point(field_mutable_list:NpuMemory.partition)
  return &partition_;
}
const ::google::protobuf::RepeatedPtrField< ::NpuMemoryPartition >&
NpuMemory::partition() const {
  // @@protoc_insertion_point(field_list:NpuMemory.partition)
  return partition_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NpuMemorySummary::kResourceNameFieldNumber;
const int NpuMemorySummary::kSizeFieldNumber;
const int NpuMemorySummary::kAllocatedFieldNumber;
const int NpuMemorySummary::kUtilizationFieldNumber;
#endif  // !_MSC_VER

NpuMemorySummary::NpuMemorySummary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NpuMemorySummary)
}

void NpuMemorySummary::InitAsDefaultInstance() {
}

NpuMemorySummary::NpuMemorySummary(const NpuMemorySummary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NpuMemorySummary)
}

void NpuMemorySummary::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resource_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
  allocated_ = GOOGLE_ULONGLONG(0);
  utilization_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpuMemorySummary::~NpuMemorySummary() {
  // @@protoc_insertion_point(destructor:NpuMemorySummary)
  SharedDtor();
}

void NpuMemorySummary::SharedDtor() {
  resource_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NpuMemorySummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpuMemorySummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpuMemorySummary_descriptor_;
}

const NpuMemorySummary& NpuMemorySummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npu_5fmem_2eproto();
  return *default_instance_;
}

NpuMemorySummary* NpuMemorySummary::default_instance_ = NULL;

NpuMemorySummary* NpuMemorySummary::New(::google::protobuf::Arena* arena) const {
  NpuMemorySummary* n = new NpuMemorySummary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NpuMemorySummary::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NpuMemorySummary*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(size_, utilization_);
    if (has_resource_name()) {
      resource_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NpuMemorySummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NpuMemorySummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string resource_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource_name().data(), this->resource_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NpuMemorySummary.resource_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_allocated;
        break;
      }

      // optional uint64 allocated = 3;
      case 3: {
        if (tag == 24) {
         parse_allocated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allocated_)));
          set_has_allocated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_utilization;
        break;
      }

      // optional int32 utilization = 4;
      case 4: {
        if (tag == 32) {
         parse_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utilization_)));
          set_has_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NpuMemorySummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NpuMemorySummary)
  return false;
#undef DO_
}

void NpuMemorySummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NpuMemorySummary)
  // optional string resource_name = 1;
  if (has_resource_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource_name().data(), this->resource_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NpuMemorySummary.resource_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resource_name(), output);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // optional uint64 allocated = 3;
  if (has_allocated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->allocated(), output);
  }

  // optional int32 utilization = 4;
  if (has_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->utilization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NpuMemorySummary)
}

::google::protobuf::uint8* NpuMemorySummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NpuMemorySummary)
  // optional string resource_name = 1;
  if (has_resource_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource_name().data(), this->resource_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NpuMemorySummary.resource_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resource_name(), target);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // optional uint64 allocated = 3;
  if (has_allocated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->allocated(), target);
  }

  // optional int32 utilization = 4;
  if (has_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->utilization(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NpuMemorySummary)
  return target;
}

int NpuMemorySummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string resource_name = 1;
    if (has_resource_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_name());
    }

    // optional uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint64 allocated = 3;
    if (has_allocated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allocated());
    }

    // optional int32 utilization = 4;
    if (has_utilization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utilization());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpuMemorySummary::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NpuMemorySummary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NpuMemorySummary>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpuMemorySummary::MergeFrom(const NpuMemorySummary& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource_name()) {
      set_has_resource_name();
      resource_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_name_);
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_allocated()) {
      set_allocated(from.allocated());
    }
    if (from.has_utilization()) {
      set_utilization(from.utilization());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NpuMemorySummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpuMemorySummary::CopyFrom(const NpuMemorySummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpuMemorySummary::IsInitialized() const {

  return true;
}

void NpuMemorySummary::Swap(NpuMemorySummary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NpuMemorySummary::InternalSwap(NpuMemorySummary* other) {
  resource_name_.Swap(&other->resource_name_);
  std::swap(size_, other->size_);
  std::swap(allocated_, other->allocated_);
  std::swap(utilization_, other->utilization_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NpuMemorySummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpuMemorySummary_descriptor_;
  metadata.reflection = NpuMemorySummary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NpuMemorySummary

// optional string resource_name = 1;
bool NpuMemorySummary::has_resource_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NpuMemorySummary::set_has_resource_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NpuMemorySummary::clear_has_resource_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NpuMemorySummary::clear_resource_name() {
  resource_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource_name();
}
 const ::std::string& NpuMemorySummary::resource_name() const {
  // @@protoc_insertion_point(field_get:NpuMemorySummary.resource_name)
  return resource_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NpuMemorySummary::set_resource_name(const ::std::string& value) {
  set_has_resource_name();
  resource_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NpuMemorySummary.resource_name)
}
 void NpuMemorySummary::set_resource_name(const char* value) {
  set_has_resource_name();
  resource_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NpuMemorySummary.resource_name)
}
 void NpuMemorySummary::set_resource_name(const char* value, size_t size) {
  set_has_resource_name();
  resource_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NpuMemorySummary.resource_name)
}
 ::std::string* NpuMemorySummary::mutable_resource_name() {
  set_has_resource_name();
  // @@protoc_insertion_point(field_mutable:NpuMemorySummary.resource_name)
  return resource_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NpuMemorySummary::release_resource_name() {
  clear_has_resource_name();
  return resource_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NpuMemorySummary::set_allocated_resource_name(::std::string* resource_name) {
  if (resource_name != NULL) {
    set_has_resource_name();
  } else {
    clear_has_resource_name();
  }
  resource_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_name);
  // @@protoc_insertion_point(field_set_allocated:NpuMemorySummary.resource_name)
}

// optional uint64 size = 2;
bool NpuMemorySummary::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NpuMemorySummary::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void NpuMemorySummary::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void NpuMemorySummary::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
 ::google::protobuf::uint64 NpuMemorySummary::size() const {
  // @@protoc_insertion_point(field_get:NpuMemorySummary.size)
  return size_;
}
 void NpuMemorySummary::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:NpuMemorySummary.size)
}

// optional uint64 allocated = 3;
bool NpuMemorySummary::has_allocated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NpuMemorySummary::set_has_allocated() {
  _has_bits_[0] |= 0x00000004u;
}
void NpuMemorySummary::clear_has_allocated() {
  _has_bits_[0] &= ~0x00000004u;
}
void NpuMemorySummary::clear_allocated() {
  allocated_ = GOOGLE_ULONGLONG(0);
  clear_has_allocated();
}
 ::google::protobuf::uint64 NpuMemorySummary::allocated() const {
  // @@protoc_insertion_point(field_get:NpuMemorySummary.allocated)
  return allocated_;
}
 void NpuMemorySummary::set_allocated(::google::protobuf::uint64 value) {
  set_has_allocated();
  allocated_ = value;
  // @@protoc_insertion_point(field_set:NpuMemorySummary.allocated)
}

// optional int32 utilization = 4;
bool NpuMemorySummary::has_utilization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NpuMemorySummary::set_has_utilization() {
  _has_bits_[0] |= 0x00000008u;
}
void NpuMemorySummary::clear_has_utilization() {
  _has_bits_[0] &= ~0x00000008u;
}
void NpuMemorySummary::clear_utilization() {
  utilization_ = 0;
  clear_has_utilization();
}
 ::google::protobuf::int32 NpuMemorySummary::utilization() const {
  // @@protoc_insertion_point(field_get:NpuMemorySummary.utilization)
  return utilization_;
}
 void NpuMemorySummary::set_utilization(::google::protobuf::int32 value) {
  set_has_utilization();
  utilization_ = value;
  // @@protoc_insertion_point(field_set:NpuMemorySummary.utilization)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NpuMemoryPartition::kNameFieldNumber;
const int NpuMemoryPartition::kApplicationNameFieldNumber;
const int NpuMemoryPartition::kBytesAllocatedFieldNumber;
const int NpuMemoryPartition::kAllocationCountFieldNumber;
const int NpuMemoryPartition::kFreeCountFieldNumber;
#endif  // !_MSC_VER

NpuMemoryPartition::NpuMemoryPartition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NpuMemoryPartition)
}

void NpuMemoryPartition::InitAsDefaultInstance() {
}

NpuMemoryPartition::NpuMemoryPartition(const NpuMemoryPartition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NpuMemoryPartition)
}

void NpuMemoryPartition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_allocated_ = 0u;
  allocation_count_ = 0u;
  free_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpuMemoryPartition::~NpuMemoryPartition() {
  // @@protoc_insertion_point(destructor:NpuMemoryPartition)
  SharedDtor();
}

void NpuMemoryPartition::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NpuMemoryPartition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpuMemoryPartition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpuMemoryPartition_descriptor_;
}

const NpuMemoryPartition& NpuMemoryPartition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_npu_5fmem_2eproto();
  return *default_instance_;
}

NpuMemoryPartition* NpuMemoryPartition::default_instance_ = NULL;

NpuMemoryPartition* NpuMemoryPartition::New(::google::protobuf::Arena* arena) const {
  NpuMemoryPartition* n = new NpuMemoryPartition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NpuMemoryPartition::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NpuMemoryPartition*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(bytes_allocated_, free_count_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_application_name()) {
      application_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NpuMemoryPartition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NpuMemoryPartition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NpuMemoryPartition.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_application_name;
        break;
      }

      // optional string application_name = 2;
      case 2: {
        if (tag == 18) {
         parse_application_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->application_name().data(), this->application_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NpuMemoryPartition.application_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bytes_allocated;
        break;
      }

      // optional uint32 bytes_allocated = 3;
      case 3: {
        if (tag == 24) {
         parse_bytes_allocated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_allocated_)));
          set_has_bytes_allocated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allocation_count;
        break;
      }

      // optional uint32 allocation_count = 4;
      case 4: {
        if (tag == 32) {
         parse_allocation_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allocation_count_)));
          set_has_allocation_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_free_count;
        break;
      }

      // optional uint32 free_count = 5;
      case 5: {
        if (tag == 40) {
         parse_free_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_count_)));
          set_has_free_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NpuMemoryPartition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NpuMemoryPartition)
  return false;
#undef DO_
}

void NpuMemoryPartition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NpuMemoryPartition)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NpuMemoryPartition.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string application_name = 2;
  if (has_application_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->application_name().data(), this->application_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NpuMemoryPartition.application_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->application_name(), output);
  }

  // optional uint32 bytes_allocated = 3;
  if (has_bytes_allocated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bytes_allocated(), output);
  }

  // optional uint32 allocation_count = 4;
  if (has_allocation_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->allocation_count(), output);
  }

  // optional uint32 free_count = 5;
  if (has_free_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->free_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NpuMemoryPartition)
}

::google::protobuf::uint8* NpuMemoryPartition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NpuMemoryPartition)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NpuMemoryPartition.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string application_name = 2;
  if (has_application_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->application_name().data(), this->application_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NpuMemoryPartition.application_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->application_name(), target);
  }

  // optional uint32 bytes_allocated = 3;
  if (has_bytes_allocated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bytes_allocated(), target);
  }

  // optional uint32 allocation_count = 4;
  if (has_allocation_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->allocation_count(), target);
  }

  // optional uint32 free_count = 5;
  if (has_free_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->free_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NpuMemoryPartition)
  return target;
}

int NpuMemoryPartition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string application_name = 2;
    if (has_application_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application_name());
    }

    // optional uint32 bytes_allocated = 3;
    if (has_bytes_allocated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_allocated());
    }

    // optional uint32 allocation_count = 4;
    if (has_allocation_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allocation_count());
    }

    // optional uint32 free_count = 5;
    if (has_free_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpuMemoryPartition::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NpuMemoryPartition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NpuMemoryPartition>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpuMemoryPartition::MergeFrom(const NpuMemoryPartition& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_application_name()) {
      set_has_application_name();
      application_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.application_name_);
    }
    if (from.has_bytes_allocated()) {
      set_bytes_allocated(from.bytes_allocated());
    }
    if (from.has_allocation_count()) {
      set_allocation_count(from.allocation_count());
    }
    if (from.has_free_count()) {
      set_free_count(from.free_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NpuMemoryPartition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpuMemoryPartition::CopyFrom(const NpuMemoryPartition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpuMemoryPartition::IsInitialized() const {

  return true;
}

void NpuMemoryPartition::Swap(NpuMemoryPartition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NpuMemoryPartition::InternalSwap(NpuMemoryPartition* other) {
  name_.Swap(&other->name_);
  application_name_.Swap(&other->application_name_);
  std::swap(bytes_allocated_, other->bytes_allocated_);
  std::swap(allocation_count_, other->allocation_count_);
  std::swap(free_count_, other->free_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NpuMemoryPartition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpuMemoryPartition_descriptor_;
  metadata.reflection = NpuMemoryPartition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NpuMemoryPartition

// optional string name = 1;
bool NpuMemoryPartition::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NpuMemoryPartition::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NpuMemoryPartition::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NpuMemoryPartition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& NpuMemoryPartition::name() const {
  // @@protoc_insertion_point(field_get:NpuMemoryPartition.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NpuMemoryPartition::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NpuMemoryPartition.name)
}
 void NpuMemoryPartition::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NpuMemoryPartition.name)
}
 void NpuMemoryPartition::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NpuMemoryPartition.name)
}
 ::std::string* NpuMemoryPartition::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:NpuMemoryPartition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NpuMemoryPartition::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NpuMemoryPartition::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NpuMemoryPartition.name)
}

// optional string application_name = 2;
bool NpuMemoryPartition::has_application_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NpuMemoryPartition::set_has_application_name() {
  _has_bits_[0] |= 0x00000002u;
}
void NpuMemoryPartition::clear_has_application_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void NpuMemoryPartition::clear_application_name() {
  application_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_application_name();
}
 const ::std::string& NpuMemoryPartition::application_name() const {
  // @@protoc_insertion_point(field_get:NpuMemoryPartition.application_name)
  return application_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NpuMemoryPartition::set_application_name(const ::std::string& value) {
  set_has_application_name();
  application_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NpuMemoryPartition.application_name)
}
 void NpuMemoryPartition::set_application_name(const char* value) {
  set_has_application_name();
  application_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NpuMemoryPartition.application_name)
}
 void NpuMemoryPartition::set_application_name(const char* value, size_t size) {
  set_has_application_name();
  application_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NpuMemoryPartition.application_name)
}
 ::std::string* NpuMemoryPartition::mutable_application_name() {
  set_has_application_name();
  // @@protoc_insertion_point(field_mutable:NpuMemoryPartition.application_name)
  return application_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NpuMemoryPartition::release_application_name() {
  clear_has_application_name();
  return application_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NpuMemoryPartition::set_allocated_application_name(::std::string* application_name) {
  if (application_name != NULL) {
    set_has_application_name();
  } else {
    clear_has_application_name();
  }
  application_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application_name);
  // @@protoc_insertion_point(field_set_allocated:NpuMemoryPartition.application_name)
}

// optional uint32 bytes_allocated = 3;
bool NpuMemoryPartition::has_bytes_allocated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NpuMemoryPartition::set_has_bytes_allocated() {
  _has_bits_[0] |= 0x00000004u;
}
void NpuMemoryPartition::clear_has_bytes_allocated() {
  _has_bits_[0] &= ~0x00000004u;
}
void NpuMemoryPartition::clear_bytes_allocated() {
  bytes_allocated_ = 0u;
  clear_has_bytes_allocated();
}
 ::google::protobuf::uint32 NpuMemoryPartition::bytes_allocated() const {
  // @@protoc_insertion_point(field_get:NpuMemoryPartition.bytes_allocated)
  return bytes_allocated_;
}
 void NpuMemoryPartition::set_bytes_allocated(::google::protobuf::uint32 value) {
  set_has_bytes_allocated();
  bytes_allocated_ = value;
  // @@protoc_insertion_point(field_set:NpuMemoryPartition.bytes_allocated)
}

// optional uint32 allocation_count = 4;
bool NpuMemoryPartition::has_allocation_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NpuMemoryPartition::set_has_allocation_count() {
  _has_bits_[0] |= 0x00000008u;
}
void NpuMemoryPartition::clear_has_allocation_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void NpuMemoryPartition::clear_allocation_count() {
  allocation_count_ = 0u;
  clear_has_allocation_count();
}
 ::google::protobuf::uint32 NpuMemoryPartition::allocation_count() const {
  // @@protoc_insertion_point(field_get:NpuMemoryPartition.allocation_count)
  return allocation_count_;
}
 void NpuMemoryPartition::set_allocation_count(::google::protobuf::uint32 value) {
  set_has_allocation_count();
  allocation_count_ = value;
  // @@protoc_insertion_point(field_set:NpuMemoryPartition.allocation_count)
}

// optional uint32 free_count = 5;
bool NpuMemoryPartition::has_free_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NpuMemoryPartition::set_has_free_count() {
  _has_bits_[0] |= 0x00000010u;
}
void NpuMemoryPartition::clear_has_free_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void NpuMemoryPartition::clear_free_count() {
  free_count_ = 0u;
  clear_has_free_count();
}
 ::google::protobuf::uint32 NpuMemoryPartition::free_count() const {
  // @@protoc_insertion_point(field_get:NpuMemoryPartition.free_count)
  return free_count_;
}
 void NpuMemoryPartition::set_free_count(::google::protobuf::uint32 value) {
  set_has_free_count();
  free_count_ = value;
  // @@protoc_insertion_point(field_set:NpuMemoryPartition.free_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::JuniperNetworksSensors,
    ::google::protobuf::internal::MessageTypeTraits< ::NetworkProcessorMemoryUtilization >, 11, false >
  npu_memory_ext(kNpuMemoryExtFieldNumber, ::NetworkProcessorMemoryUtilization::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
