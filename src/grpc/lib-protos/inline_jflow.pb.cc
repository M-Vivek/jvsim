// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inline_jflow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inline_jflow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* InlineJflow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InlineJflow_reflection_ = NULL;
const ::google::protobuf::Descriptor* InlineJflowNpuStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InlineJflowNpuStats_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inline_5fjflow_2eproto() {
  protobuf_AddDesc_inline_5fjflow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inline_jflow.proto");
  GOOGLE_CHECK(file != NULL);
  InlineJflow_descriptor_ = file->message_type(0);
  static const int InlineJflow_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, ipv4_flows_export_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, ipv6_flows_export_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, vpls_flows_export_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, mpls_flows_export_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, ipv4_route_record_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, ipv6_route_record_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, mpls_route_record_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, autonomous_system_record_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, ipv4_max_flows_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, ipv6_max_flows_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, vpls_max_flows_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, mpls_max_flows_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, memory_alloc_fail_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, ipv4_configured_observation_domain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, ipv6_configured_observation_domain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, vpls_configured_observation_domain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, mpls_configured_observation_domain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, last_clear_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, ipv6_extended_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, flexible_flow_sizing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, use_extended_flow_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, npu_stats_),
  };
  InlineJflow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InlineJflow_descriptor_,
      InlineJflow::default_instance_,
      InlineJflow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, _has_bits_[0]),
      -1,
      -1,
      sizeof(InlineJflow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflow, _internal_metadata_),
      -1);
  InlineJflowNpuStats_descriptor_ = file->message_type(1);
  static const int InlineJflowNpuStats_offsets_[57] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, npu_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_flow_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_flow_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_total_flows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_active_flows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_flows_exported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_packets_exported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_flows_inactive_timed_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_flows_active_timed_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_flow_create_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_route_lookup_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_autonomous_system_lookup_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_flow_packet_export_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_flow_table_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv4_flow_insert_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_flow_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_flow_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_total_flows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_active_flows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_flows_exported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_packets_exported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_flows_inactive_timed_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_flows_active_timed_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_flow_create_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_route_lookup_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_autonomous_system_lookup_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_flow_packet_export_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_flow_table_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, ipv6_flow_insert_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_flow_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_flow_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_total_flows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_active_flows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_flows_exported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_packets_exported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_flows_inactive_timed_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_flows_active_timed_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_flow_create_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_route_lookup_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_autonomous_system_lookup_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_flow_packet_export_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_flow_table_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, vpls_flow_insert_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_flow_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_flow_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_total_flows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_active_flows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_flows_exported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_packets_exported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_flows_inactive_timed_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_flows_active_timed_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_flow_create_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_route_lookup_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_autonomous_system_lookup_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_flow_packet_export_failure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_flow_table_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, mpls_flow_insert_count_),
  };
  InlineJflowNpuStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InlineJflowNpuStats_descriptor_,
      InlineJflowNpuStats::default_instance_,
      InlineJflowNpuStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(InlineJflowNpuStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InlineJflowNpuStats, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inline_5fjflow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InlineJflow_descriptor_, &InlineJflow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InlineJflowNpuStats_descriptor_, &InlineJflowNpuStats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inline_5fjflow_2eproto() {
  delete InlineJflow::default_instance_;
  delete InlineJflow_reflection_;
  delete InlineJflowNpuStats::default_instance_;
  delete InlineJflowNpuStats_reflection_;
}

void protobuf_AddDesc_inline_5fjflow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_telemetry_5ftop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022inline_jflow.proto\032\023telemetry_top.prot"
    "o\"\232\006\n\013InlineJflow\022 \n\030ipv4_flows_export_f"
    "ormat\030\002 \001(\t\022 \n\030ipv6_flows_export_format\030"
    "\003 \001(\t\022 \n\030vpls_flows_export_format\030\004 \001(\t\022"
    " \n\030mpls_flows_export_format\030\005 \001(\t\022\035\n\025ipv"
    "4_route_record_cnt\030\006 \001(\r\022\035\n\025ipv6_route_r"
    "ecord_cnt\030\007 \001(\r\022\035\n\025mpls_route_record_cnt"
    "\030\010 \001(\r\022$\n\034autonomous_system_record_cnt\030\t"
    " \001(\r\022\034\n\024ipv4_max_flows_count\030\n \001(\004\022\034\n\024ip"
    "v6_max_flows_count\030\013 \001(\004\022\034\n\024vpls_max_flo"
    "ws_count\030\014 \001(\004\022\034\n\024mpls_max_flows_count\030\r"
    " \001(\004\022$\n\025memory_alloc_fail_cnt\030\016 \001(\rB\005\202@\002"
    "\030\001\022-\n%ipv4_configured_observation_domain"
    "_id\030\017 \001(\r\022-\n%ipv6_configured_observation"
    "_domain_id\030\020 \001(\r\022-\n%vpls_configured_obse"
    "rvation_domain_id\030\021 \001(\r\022-\n%mpls_configur"
    "ed_observation_domain_id\030\022 \001(\r\022\034\n\024last_c"
    "lear_timestamp\030\023 \001(\r\022\037\n\027ipv6_extended_at"
    "tribute\030\024 \001(\010\022\034\n\024flexible_flow_sizing\030\025 "
    "\001(\010\022 \n\030use_extended_flow_memory\030\026 \001(\010\022\'\n"
    "\tnpu_stats\0302 \003(\0132\024.InlineJflowNpuStats\"\235"
    "\022\n\023InlineJflowNpuStats\022\026\n\016npu_identifier"
    "\030\001 \002(\r\022 \n\021ipv4_flow_packets\0303 \001(\004B\005\202@\002\030\001"
    "\022\036\n\017ipv4_flow_bytes\0304 \001(\004B\005\202@\002\030\001\022\037\n\020ipv4"
    "_total_flows\0305 \001(\004B\005\202@\002\030\001\022 \n\021ipv4_active"
    "_flows\0306 \001(\004B\005\202@\002\030\001\022\"\n\023ipv4_flows_export"
    "ed\0307 \001(\004B\005\202@\002\030\001\022$\n\025ipv4_packets_exported"
    "\0308 \001(\004B\005\202@\002\030\001\022,\n\035ipv4_flows_inactive_tim"
    "ed_out\0309 \001(\004B\005\202@\002\030\001\022*\n\033ipv4_flows_active"
    "_timed_out\030: \001(\004B\005\202@\002\030\001\022\'\n\030ipv4_flow_cre"
    "ate_failure\030; \001(\004B\005\202@\002\030\001\022(\n\031ipv4_route_l"
    "ookup_failure\030< \001(\004B\005\202@\002\030\001\0224\n%ipv4_auton"
    "omous_system_lookup_failure\030= \001(\004B\005\202@\002\030\001"
    "\022.\n\037ipv4_flow_packet_export_failure\030> \001("
    "\004B\005\202@\002\030\001\022*\n\033ipv4_flow_table_utilization\030"
    "\? \001(\002B\005\202@\002 \001\022%\n\026ipv4_flow_insert_count\030@"
    " \001(\004B\005\202@\002\030\001\022 \n\021ipv6_flow_packets\030e \001(\004B\005"
    "\202@\002\030\001\022\036\n\017ipv6_flow_bytes\030f \001(\004B\005\202@\002\030\001\022\037\n"
    "\020ipv6_total_flows\030g \001(\004B\005\202@\002\030\001\022 \n\021ipv6_a"
    "ctive_flows\030h \001(\004B\005\202@\002\030\001\022\"\n\023ipv6_flows_e"
    "xported\030i \001(\004B\005\202@\002\030\001\022$\n\025ipv6_packets_exp"
    "orted\030j \001(\004B\005\202@\002\030\001\022,\n\035ipv6_flows_inactiv"
    "e_timed_out\030k \001(\004B\005\202@\002\030\001\022*\n\033ipv6_flows_a"
    "ctive_timed_out\030l \001(\004B\005\202@\002\030\001\022\'\n\030ipv6_flo"
    "w_create_failure\030m \001(\004B\005\202@\002\030\001\022(\n\031ipv6_ro"
    "ute_lookup_failure\030n \001(\004B\005\202@\002\030\001\0224\n%ipv6_"
    "autonomous_system_lookup_failure\030o \001(\004B\005"
    "\202@\002\030\001\022.\n\037ipv6_flow_packet_export_failure"
    "\030p \001(\004B\005\202@\002\030\001\022*\n\033ipv6_flow_table_utiliza"
    "tion\030q \001(\002B\005\202@\002 \001\022%\n\026ipv6_flow_insert_co"
    "unt\030r \001(\004B\005\202@\002\030\001\022!\n\021vpls_flow_packets\030\227\001"
    " \001(\004B\005\202@\002\030\001\022\037\n\017vpls_flow_bytes\030\230\001 \001(\004B\005\202"
    "@\002\030\001\022 \n\020vpls_total_flows\030\231\001 \001(\004B\005\202@\002\030\001\022!"
    "\n\021vpls_active_flows\030\232\001 \001(\004B\005\202@\002\030\001\022#\n\023vpl"
    "s_flows_exported\030\233\001 \001(\004B\005\202@\002\030\001\022%\n\025vpls_p"
    "ackets_exported\030\234\001 \001(\004B\005\202@\002\030\001\022-\n\035vpls_fl"
    "ows_inactive_timed_out\030\235\001 \001(\004B\005\202@\002\030\001\022+\n\033"
    "vpls_flows_active_timed_out\030\236\001 \001(\004B\005\202@\002\030"
    "\001\022(\n\030vpls_flow_create_failure\030\237\001 \001(\004B\005\202@"
    "\002\030\001\022)\n\031vpls_route_lookup_failure\030\240\001 \001(\004B"
    "\005\202@\002\030\001\0225\n%vpls_autonomous_system_lookup_"
    "failure\030\241\001 \001(\004B\005\202@\002\030\001\022/\n\037vpls_flow_packe"
    "t_export_failure\030\242\001 \001(\004B\005\202@\002\030\001\022+\n\033vpls_f"
    "low_table_utilization\030\243\001 \001(\002B\005\202@\002 \001\022&\n\026v"
    "pls_flow_insert_count\030\244\001 \001(\004B\005\202@\002\030\001\022!\n\021m"
    "pls_flow_packets\030\311\001 \001(\004B\005\202@\002\030\001\022\037\n\017mpls_f"
    "low_bytes\030\312\001 \001(\004B\005\202@\002\030\001\022 \n\020mpls_total_fl"
    "ows\030\313\001 \001(\004B\005\202@\002\030\001\022!\n\021mpls_active_flows\030\314"
    "\001 \001(\004B\005\202@\002\030\001\022#\n\023mpls_flows_exported\030\315\001 \001"
    "(\004B\005\202@\002\030\001\022%\n\025mpls_packets_exported\030\316\001 \001("
    "\004B\005\202@\002\030\001\022-\n\035mpls_flows_inactive_timed_ou"
    "t\030\317\001 \001(\004B\005\202@\002\030\001\022+\n\033mpls_flows_active_tim"
    "ed_out\030\320\001 \001(\004B\005\202@\002\030\001\022(\n\030mpls_flow_create"
    "_failure\030\321\001 \001(\004B\005\202@\002\030\001\022)\n\031mpls_route_loo"
    "kup_failure\030\322\001 \001(\004B\005\202@\002\030\001\0225\n%mpls_autono"
    "mous_system_lookup_failure\030\323\001 \001(\004B\005\202@\002\030\001"
    "\022/\n\037mpls_flow_packet_export_failure\030\324\001 \001"
    "(\004B\005\202@\002\030\001\022+\n\033mpls_flow_table_utilization"
    "\030\325\001 \001(\002B\005\202@\002 \001\022&\n\026mpls_flow_insert_count"
    "\030\326\001 \001(\004B\005\202@\002\030\001:E\n\026inline_jflow_stats_ext"
    "\022\027.JuniperNetworksSensors\030\t \001(\0132\014.Inline"
    "Jflow", 3245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inline_jflow.proto", &protobuf_RegisterTypes);
  InlineJflow::default_instance_ = new InlineJflow();
  InlineJflowNpuStats::default_instance_ = new InlineJflowNpuStats();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::JuniperNetworksSensors::default_instance(),
    9, 11, false, false,
    &::InlineJflow::default_instance());
  InlineJflow::default_instance_->InitAsDefaultInstance();
  InlineJflowNpuStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inline_5fjflow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inline_5fjflow_2eproto {
  StaticDescriptorInitializer_inline_5fjflow_2eproto() {
    protobuf_AddDesc_inline_5fjflow_2eproto();
  }
} static_descriptor_initializer_inline_5fjflow_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int InlineJflow::kIpv4FlowsExportFormatFieldNumber;
const int InlineJflow::kIpv6FlowsExportFormatFieldNumber;
const int InlineJflow::kVplsFlowsExportFormatFieldNumber;
const int InlineJflow::kMplsFlowsExportFormatFieldNumber;
const int InlineJflow::kIpv4RouteRecordCntFieldNumber;
const int InlineJflow::kIpv6RouteRecordCntFieldNumber;
const int InlineJflow::kMplsRouteRecordCntFieldNumber;
const int InlineJflow::kAutonomousSystemRecordCntFieldNumber;
const int InlineJflow::kIpv4MaxFlowsCountFieldNumber;
const int InlineJflow::kIpv6MaxFlowsCountFieldNumber;
const int InlineJflow::kVplsMaxFlowsCountFieldNumber;
const int InlineJflow::kMplsMaxFlowsCountFieldNumber;
const int InlineJflow::kMemoryAllocFailCntFieldNumber;
const int InlineJflow::kIpv4ConfiguredObservationDomainIdFieldNumber;
const int InlineJflow::kIpv6ConfiguredObservationDomainIdFieldNumber;
const int InlineJflow::kVplsConfiguredObservationDomainIdFieldNumber;
const int InlineJflow::kMplsConfiguredObservationDomainIdFieldNumber;
const int InlineJflow::kLastClearTimestampFieldNumber;
const int InlineJflow::kIpv6ExtendedAttributeFieldNumber;
const int InlineJflow::kFlexibleFlowSizingFieldNumber;
const int InlineJflow::kUseExtendedFlowMemoryFieldNumber;
const int InlineJflow::kNpuStatsFieldNumber;
#endif  // !_MSC_VER

InlineJflow::InlineJflow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InlineJflow)
}

void InlineJflow::InitAsDefaultInstance() {
}

InlineJflow::InlineJflow(const InlineJflow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InlineJflow)
}

void InlineJflow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ipv4_flows_export_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_flows_export_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vpls_flows_export_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mpls_flows_export_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv4_route_record_cnt_ = 0u;
  ipv6_route_record_cnt_ = 0u;
  mpls_route_record_cnt_ = 0u;
  autonomous_system_record_cnt_ = 0u;
  ipv4_max_flows_count_ = GOOGLE_ULONGLONG(0);
  ipv6_max_flows_count_ = GOOGLE_ULONGLONG(0);
  vpls_max_flows_count_ = GOOGLE_ULONGLONG(0);
  mpls_max_flows_count_ = GOOGLE_ULONGLONG(0);
  memory_alloc_fail_cnt_ = 0u;
  ipv4_configured_observation_domain_id_ = 0u;
  ipv6_configured_observation_domain_id_ = 0u;
  vpls_configured_observation_domain_id_ = 0u;
  mpls_configured_observation_domain_id_ = 0u;
  last_clear_timestamp_ = 0u;
  ipv6_extended_attribute_ = false;
  flexible_flow_sizing_ = false;
  use_extended_flow_memory_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InlineJflow::~InlineJflow() {
  // @@protoc_insertion_point(destructor:InlineJflow)
  SharedDtor();
}

void InlineJflow::SharedDtor() {
  ipv4_flows_export_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_flows_export_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vpls_flows_export_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mpls_flows_export_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InlineJflow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InlineJflow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InlineJflow_descriptor_;
}

const InlineJflow& InlineJflow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inline_5fjflow_2eproto();
  return *default_instance_;
}

InlineJflow* InlineJflow::default_instance_ = NULL;

InlineJflow* InlineJflow::New(::google::protobuf::Arena* arena) const {
  InlineJflow* n = new InlineJflow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InlineJflow::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InlineJflow*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ipv4_route_record_cnt_, autonomous_system_record_cnt_);
    if (has_ipv4_flows_export_format()) {
      ipv4_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ipv6_flows_export_format()) {
      ipv6_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vpls_flows_export_format()) {
      vpls_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mpls_flows_export_format()) {
      mpls_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(ipv4_max_flows_count_, vpls_configured_observation_domain_id_);
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ZR_(mpls_configured_observation_domain_id_, last_clear_timestamp_);
    ZR_(ipv6_extended_attribute_, use_extended_flow_memory_);
  }

#undef ZR_HELPER_
#undef ZR_

  npu_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InlineJflow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InlineJflow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ipv4_flows_export_format = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv4_flows_export_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipv4_flows_export_format().data(), this->ipv4_flows_export_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InlineJflow.ipv4_flows_export_format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ipv6_flows_export_format;
        break;
      }

      // optional string ipv6_flows_export_format = 3;
      case 3: {
        if (tag == 26) {
         parse_ipv6_flows_export_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6_flows_export_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipv6_flows_export_format().data(), this->ipv6_flows_export_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InlineJflow.ipv6_flows_export_format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vpls_flows_export_format;
        break;
      }

      // optional string vpls_flows_export_format = 4;
      case 4: {
        if (tag == 34) {
         parse_vpls_flows_export_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vpls_flows_export_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vpls_flows_export_format().data(), this->vpls_flows_export_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InlineJflow.vpls_flows_export_format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mpls_flows_export_format;
        break;
      }

      // optional string mpls_flows_export_format = 5;
      case 5: {
        if (tag == 42) {
         parse_mpls_flows_export_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpls_flows_export_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mpls_flows_export_format().data(), this->mpls_flows_export_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InlineJflow.mpls_flows_export_format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ipv4_route_record_cnt;
        break;
      }

      // optional uint32 ipv4_route_record_cnt = 6;
      case 6: {
        if (tag == 48) {
         parse_ipv4_route_record_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv4_route_record_cnt_)));
          set_has_ipv4_route_record_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ipv6_route_record_cnt;
        break;
      }

      // optional uint32 ipv6_route_record_cnt = 7;
      case 7: {
        if (tag == 56) {
         parse_ipv6_route_record_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv6_route_record_cnt_)));
          set_has_ipv6_route_record_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mpls_route_record_cnt;
        break;
      }

      // optional uint32 mpls_route_record_cnt = 8;
      case 8: {
        if (tag == 64) {
         parse_mpls_route_record_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpls_route_record_cnt_)));
          set_has_mpls_route_record_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_autonomous_system_record_cnt;
        break;
      }

      // optional uint32 autonomous_system_record_cnt = 9;
      case 9: {
        if (tag == 72) {
         parse_autonomous_system_record_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autonomous_system_record_cnt_)));
          set_has_autonomous_system_record_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ipv4_max_flows_count;
        break;
      }

      // optional uint64 ipv4_max_flows_count = 10;
      case 10: {
        if (tag == 80) {
         parse_ipv4_max_flows_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_max_flows_count_)));
          set_has_ipv4_max_flows_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ipv6_max_flows_count;
        break;
      }

      // optional uint64 ipv6_max_flows_count = 11;
      case 11: {
        if (tag == 88) {
         parse_ipv6_max_flows_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_max_flows_count_)));
          set_has_ipv6_max_flows_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_vpls_max_flows_count;
        break;
      }

      // optional uint64 vpls_max_flows_count = 12;
      case 12: {
        if (tag == 96) {
         parse_vpls_max_flows_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_max_flows_count_)));
          set_has_vpls_max_flows_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mpls_max_flows_count;
        break;
      }

      // optional uint64 mpls_max_flows_count = 13;
      case 13: {
        if (tag == 104) {
         parse_mpls_max_flows_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_max_flows_count_)));
          set_has_mpls_max_flows_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_memory_alloc_fail_cnt;
        break;
      }

      // optional uint32 memory_alloc_fail_cnt = 14;
      case 14: {
        if (tag == 112) {
         parse_memory_alloc_fail_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_alloc_fail_cnt_)));
          set_has_memory_alloc_fail_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ipv4_configured_observation_domain_id;
        break;
      }

      // optional uint32 ipv4_configured_observation_domain_id = 15;
      case 15: {
        if (tag == 120) {
         parse_ipv4_configured_observation_domain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv4_configured_observation_domain_id_)));
          set_has_ipv4_configured_observation_domain_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ipv6_configured_observation_domain_id;
        break;
      }

      // optional uint32 ipv6_configured_observation_domain_id = 16;
      case 16: {
        if (tag == 128) {
         parse_ipv6_configured_observation_domain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv6_configured_observation_domain_id_)));
          set_has_ipv6_configured_observation_domain_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_vpls_configured_observation_domain_id;
        break;
      }

      // optional uint32 vpls_configured_observation_domain_id = 17;
      case 17: {
        if (tag == 136) {
         parse_vpls_configured_observation_domain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vpls_configured_observation_domain_id_)));
          set_has_vpls_configured_observation_domain_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mpls_configured_observation_domain_id;
        break;
      }

      // optional uint32 mpls_configured_observation_domain_id = 18;
      case 18: {
        if (tag == 144) {
         parse_mpls_configured_observation_domain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mpls_configured_observation_domain_id_)));
          set_has_mpls_configured_observation_domain_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_last_clear_timestamp;
        break;
      }

      // optional uint32 last_clear_timestamp = 19;
      case 19: {
        if (tag == 152) {
         parse_last_clear_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_clear_timestamp_)));
          set_has_last_clear_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_ipv6_extended_attribute;
        break;
      }

      // optional bool ipv6_extended_attribute = 20;
      case 20: {
        if (tag == 160) {
         parse_ipv6_extended_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ipv6_extended_attribute_)));
          set_has_ipv6_extended_attribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_flexible_flow_sizing;
        break;
      }

      // optional bool flexible_flow_sizing = 21;
      case 21: {
        if (tag == 168) {
         parse_flexible_flow_sizing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flexible_flow_sizing_)));
          set_has_flexible_flow_sizing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_use_extended_flow_memory;
        break;
      }

      // optional bool use_extended_flow_memory = 22;
      case 22: {
        if (tag == 176) {
         parse_use_extended_flow_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_extended_flow_memory_)));
          set_has_use_extended_flow_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_npu_stats;
        break;
      }

      // repeated .InlineJflowNpuStats npu_stats = 50;
      case 50: {
        if (tag == 402) {
         parse_npu_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_npu_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_npu_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_loop_npu_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InlineJflow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InlineJflow)
  return false;
#undef DO_
}

void InlineJflow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InlineJflow)
  // optional string ipv4_flows_export_format = 2;
  if (has_ipv4_flows_export_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv4_flows_export_format().data(), this->ipv4_flows_export_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InlineJflow.ipv4_flows_export_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ipv4_flows_export_format(), output);
  }

  // optional string ipv6_flows_export_format = 3;
  if (has_ipv6_flows_export_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6_flows_export_format().data(), this->ipv6_flows_export_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InlineJflow.ipv6_flows_export_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ipv6_flows_export_format(), output);
  }

  // optional string vpls_flows_export_format = 4;
  if (has_vpls_flows_export_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vpls_flows_export_format().data(), this->vpls_flows_export_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InlineJflow.vpls_flows_export_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vpls_flows_export_format(), output);
  }

  // optional string mpls_flows_export_format = 5;
  if (has_mpls_flows_export_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mpls_flows_export_format().data(), this->mpls_flows_export_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InlineJflow.mpls_flows_export_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mpls_flows_export_format(), output);
  }

  // optional uint32 ipv4_route_record_cnt = 6;
  if (has_ipv4_route_record_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ipv4_route_record_cnt(), output);
  }

  // optional uint32 ipv6_route_record_cnt = 7;
  if (has_ipv6_route_record_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ipv6_route_record_cnt(), output);
  }

  // optional uint32 mpls_route_record_cnt = 8;
  if (has_mpls_route_record_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mpls_route_record_cnt(), output);
  }

  // optional uint32 autonomous_system_record_cnt = 9;
  if (has_autonomous_system_record_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->autonomous_system_record_cnt(), output);
  }

  // optional uint64 ipv4_max_flows_count = 10;
  if (has_ipv4_max_flows_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ipv4_max_flows_count(), output);
  }

  // optional uint64 ipv6_max_flows_count = 11;
  if (has_ipv6_max_flows_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->ipv6_max_flows_count(), output);
  }

  // optional uint64 vpls_max_flows_count = 12;
  if (has_vpls_max_flows_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->vpls_max_flows_count(), output);
  }

  // optional uint64 mpls_max_flows_count = 13;
  if (has_mpls_max_flows_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->mpls_max_flows_count(), output);
  }

  // optional uint32 memory_alloc_fail_cnt = 14;
  if (has_memory_alloc_fail_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->memory_alloc_fail_cnt(), output);
  }

  // optional uint32 ipv4_configured_observation_domain_id = 15;
  if (has_ipv4_configured_observation_domain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ipv4_configured_observation_domain_id(), output);
  }

  // optional uint32 ipv6_configured_observation_domain_id = 16;
  if (has_ipv6_configured_observation_domain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->ipv6_configured_observation_domain_id(), output);
  }

  // optional uint32 vpls_configured_observation_domain_id = 17;
  if (has_vpls_configured_observation_domain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->vpls_configured_observation_domain_id(), output);
  }

  // optional uint32 mpls_configured_observation_domain_id = 18;
  if (has_mpls_configured_observation_domain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->mpls_configured_observation_domain_id(), output);
  }

  // optional uint32 last_clear_timestamp = 19;
  if (has_last_clear_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->last_clear_timestamp(), output);
  }

  // optional bool ipv6_extended_attribute = 20;
  if (has_ipv6_extended_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->ipv6_extended_attribute(), output);
  }

  // optional bool flexible_flow_sizing = 21;
  if (has_flexible_flow_sizing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->flexible_flow_sizing(), output);
  }

  // optional bool use_extended_flow_memory = 22;
  if (has_use_extended_flow_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->use_extended_flow_memory(), output);
  }

  // repeated .InlineJflowNpuStats npu_stats = 50;
  for (unsigned int i = 0, n = this->npu_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->npu_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InlineJflow)
}

::google::protobuf::uint8* InlineJflow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InlineJflow)
  // optional string ipv4_flows_export_format = 2;
  if (has_ipv4_flows_export_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv4_flows_export_format().data(), this->ipv4_flows_export_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InlineJflow.ipv4_flows_export_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ipv4_flows_export_format(), target);
  }

  // optional string ipv6_flows_export_format = 3;
  if (has_ipv6_flows_export_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6_flows_export_format().data(), this->ipv6_flows_export_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InlineJflow.ipv6_flows_export_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ipv6_flows_export_format(), target);
  }

  // optional string vpls_flows_export_format = 4;
  if (has_vpls_flows_export_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vpls_flows_export_format().data(), this->vpls_flows_export_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InlineJflow.vpls_flows_export_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vpls_flows_export_format(), target);
  }

  // optional string mpls_flows_export_format = 5;
  if (has_mpls_flows_export_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mpls_flows_export_format().data(), this->mpls_flows_export_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InlineJflow.mpls_flows_export_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mpls_flows_export_format(), target);
  }

  // optional uint32 ipv4_route_record_cnt = 6;
  if (has_ipv4_route_record_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ipv4_route_record_cnt(), target);
  }

  // optional uint32 ipv6_route_record_cnt = 7;
  if (has_ipv6_route_record_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ipv6_route_record_cnt(), target);
  }

  // optional uint32 mpls_route_record_cnt = 8;
  if (has_mpls_route_record_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mpls_route_record_cnt(), target);
  }

  // optional uint32 autonomous_system_record_cnt = 9;
  if (has_autonomous_system_record_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->autonomous_system_record_cnt(), target);
  }

  // optional uint64 ipv4_max_flows_count = 10;
  if (has_ipv4_max_flows_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ipv4_max_flows_count(), target);
  }

  // optional uint64 ipv6_max_flows_count = 11;
  if (has_ipv6_max_flows_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->ipv6_max_flows_count(), target);
  }

  // optional uint64 vpls_max_flows_count = 12;
  if (has_vpls_max_flows_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->vpls_max_flows_count(), target);
  }

  // optional uint64 mpls_max_flows_count = 13;
  if (has_mpls_max_flows_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->mpls_max_flows_count(), target);
  }

  // optional uint32 memory_alloc_fail_cnt = 14;
  if (has_memory_alloc_fail_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->memory_alloc_fail_cnt(), target);
  }

  // optional uint32 ipv4_configured_observation_domain_id = 15;
  if (has_ipv4_configured_observation_domain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ipv4_configured_observation_domain_id(), target);
  }

  // optional uint32 ipv6_configured_observation_domain_id = 16;
  if (has_ipv6_configured_observation_domain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->ipv6_configured_observation_domain_id(), target);
  }

  // optional uint32 vpls_configured_observation_domain_id = 17;
  if (has_vpls_configured_observation_domain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->vpls_configured_observation_domain_id(), target);
  }

  // optional uint32 mpls_configured_observation_domain_id = 18;
  if (has_mpls_configured_observation_domain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->mpls_configured_observation_domain_id(), target);
  }

  // optional uint32 last_clear_timestamp = 19;
  if (has_last_clear_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->last_clear_timestamp(), target);
  }

  // optional bool ipv6_extended_attribute = 20;
  if (has_ipv6_extended_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->ipv6_extended_attribute(), target);
  }

  // optional bool flexible_flow_sizing = 21;
  if (has_flexible_flow_sizing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->flexible_flow_sizing(), target);
  }

  // optional bool use_extended_flow_memory = 22;
  if (has_use_extended_flow_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->use_extended_flow_memory(), target);
  }

  // repeated .InlineJflowNpuStats npu_stats = 50;
  for (unsigned int i = 0, n = this->npu_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->npu_stats(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InlineJflow)
  return target;
}

int InlineJflow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string ipv4_flows_export_format = 2;
    if (has_ipv4_flows_export_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipv4_flows_export_format());
    }

    // optional string ipv6_flows_export_format = 3;
    if (has_ipv6_flows_export_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipv6_flows_export_format());
    }

    // optional string vpls_flows_export_format = 4;
    if (has_vpls_flows_export_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vpls_flows_export_format());
    }

    // optional string mpls_flows_export_format = 5;
    if (has_mpls_flows_export_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpls_flows_export_format());
    }

    // optional uint32 ipv4_route_record_cnt = 6;
    if (has_ipv4_route_record_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipv4_route_record_cnt());
    }

    // optional uint32 ipv6_route_record_cnt = 7;
    if (has_ipv6_route_record_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipv6_route_record_cnt());
    }

    // optional uint32 mpls_route_record_cnt = 8;
    if (has_mpls_route_record_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpls_route_record_cnt());
    }

    // optional uint32 autonomous_system_record_cnt = 9;
    if (has_autonomous_system_record_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autonomous_system_record_cnt());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 ipv4_max_flows_count = 10;
    if (has_ipv4_max_flows_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_max_flows_count());
    }

    // optional uint64 ipv6_max_flows_count = 11;
    if (has_ipv6_max_flows_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_max_flows_count());
    }

    // optional uint64 vpls_max_flows_count = 12;
    if (has_vpls_max_flows_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_max_flows_count());
    }

    // optional uint64 mpls_max_flows_count = 13;
    if (has_mpls_max_flows_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_max_flows_count());
    }

    // optional uint32 memory_alloc_fail_cnt = 14;
    if (has_memory_alloc_fail_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memory_alloc_fail_cnt());
    }

    // optional uint32 ipv4_configured_observation_domain_id = 15;
    if (has_ipv4_configured_observation_domain_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipv4_configured_observation_domain_id());
    }

    // optional uint32 ipv6_configured_observation_domain_id = 16;
    if (has_ipv6_configured_observation_domain_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipv6_configured_observation_domain_id());
    }

    // optional uint32 vpls_configured_observation_domain_id = 17;
    if (has_vpls_configured_observation_domain_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vpls_configured_observation_domain_id());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional uint32 mpls_configured_observation_domain_id = 18;
    if (has_mpls_configured_observation_domain_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mpls_configured_observation_domain_id());
    }

    // optional uint32 last_clear_timestamp = 19;
    if (has_last_clear_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_clear_timestamp());
    }

    // optional bool ipv6_extended_attribute = 20;
    if (has_ipv6_extended_attribute()) {
      total_size += 2 + 1;
    }

    // optional bool flexible_flow_sizing = 21;
    if (has_flexible_flow_sizing()) {
      total_size += 2 + 1;
    }

    // optional bool use_extended_flow_memory = 22;
    if (has_use_extended_flow_memory()) {
      total_size += 2 + 1;
    }

  }
  // repeated .InlineJflowNpuStats npu_stats = 50;
  total_size += 2 * this->npu_stats_size();
  for (int i = 0; i < this->npu_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npu_stats(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InlineJflow::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InlineJflow* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InlineJflow>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InlineJflow::MergeFrom(const InlineJflow& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  npu_stats_.MergeFrom(from.npu_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipv4_flows_export_format()) {
      set_has_ipv4_flows_export_format();
      ipv4_flows_export_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv4_flows_export_format_);
    }
    if (from.has_ipv6_flows_export_format()) {
      set_has_ipv6_flows_export_format();
      ipv6_flows_export_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_flows_export_format_);
    }
    if (from.has_vpls_flows_export_format()) {
      set_has_vpls_flows_export_format();
      vpls_flows_export_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vpls_flows_export_format_);
    }
    if (from.has_mpls_flows_export_format()) {
      set_has_mpls_flows_export_format();
      mpls_flows_export_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mpls_flows_export_format_);
    }
    if (from.has_ipv4_route_record_cnt()) {
      set_ipv4_route_record_cnt(from.ipv4_route_record_cnt());
    }
    if (from.has_ipv6_route_record_cnt()) {
      set_ipv6_route_record_cnt(from.ipv6_route_record_cnt());
    }
    if (from.has_mpls_route_record_cnt()) {
      set_mpls_route_record_cnt(from.mpls_route_record_cnt());
    }
    if (from.has_autonomous_system_record_cnt()) {
      set_autonomous_system_record_cnt(from.autonomous_system_record_cnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ipv4_max_flows_count()) {
      set_ipv4_max_flows_count(from.ipv4_max_flows_count());
    }
    if (from.has_ipv6_max_flows_count()) {
      set_ipv6_max_flows_count(from.ipv6_max_flows_count());
    }
    if (from.has_vpls_max_flows_count()) {
      set_vpls_max_flows_count(from.vpls_max_flows_count());
    }
    if (from.has_mpls_max_flows_count()) {
      set_mpls_max_flows_count(from.mpls_max_flows_count());
    }
    if (from.has_memory_alloc_fail_cnt()) {
      set_memory_alloc_fail_cnt(from.memory_alloc_fail_cnt());
    }
    if (from.has_ipv4_configured_observation_domain_id()) {
      set_ipv4_configured_observation_domain_id(from.ipv4_configured_observation_domain_id());
    }
    if (from.has_ipv6_configured_observation_domain_id()) {
      set_ipv6_configured_observation_domain_id(from.ipv6_configured_observation_domain_id());
    }
    if (from.has_vpls_configured_observation_domain_id()) {
      set_vpls_configured_observation_domain_id(from.vpls_configured_observation_domain_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mpls_configured_observation_domain_id()) {
      set_mpls_configured_observation_domain_id(from.mpls_configured_observation_domain_id());
    }
    if (from.has_last_clear_timestamp()) {
      set_last_clear_timestamp(from.last_clear_timestamp());
    }
    if (from.has_ipv6_extended_attribute()) {
      set_ipv6_extended_attribute(from.ipv6_extended_attribute());
    }
    if (from.has_flexible_flow_sizing()) {
      set_flexible_flow_sizing(from.flexible_flow_sizing());
    }
    if (from.has_use_extended_flow_memory()) {
      set_use_extended_flow_memory(from.use_extended_flow_memory());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InlineJflow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InlineJflow::CopyFrom(const InlineJflow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InlineJflow::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->npu_stats())) return false;
  return true;
}

void InlineJflow::Swap(InlineJflow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InlineJflow::InternalSwap(InlineJflow* other) {
  ipv4_flows_export_format_.Swap(&other->ipv4_flows_export_format_);
  ipv6_flows_export_format_.Swap(&other->ipv6_flows_export_format_);
  vpls_flows_export_format_.Swap(&other->vpls_flows_export_format_);
  mpls_flows_export_format_.Swap(&other->mpls_flows_export_format_);
  std::swap(ipv4_route_record_cnt_, other->ipv4_route_record_cnt_);
  std::swap(ipv6_route_record_cnt_, other->ipv6_route_record_cnt_);
  std::swap(mpls_route_record_cnt_, other->mpls_route_record_cnt_);
  std::swap(autonomous_system_record_cnt_, other->autonomous_system_record_cnt_);
  std::swap(ipv4_max_flows_count_, other->ipv4_max_flows_count_);
  std::swap(ipv6_max_flows_count_, other->ipv6_max_flows_count_);
  std::swap(vpls_max_flows_count_, other->vpls_max_flows_count_);
  std::swap(mpls_max_flows_count_, other->mpls_max_flows_count_);
  std::swap(memory_alloc_fail_cnt_, other->memory_alloc_fail_cnt_);
  std::swap(ipv4_configured_observation_domain_id_, other->ipv4_configured_observation_domain_id_);
  std::swap(ipv6_configured_observation_domain_id_, other->ipv6_configured_observation_domain_id_);
  std::swap(vpls_configured_observation_domain_id_, other->vpls_configured_observation_domain_id_);
  std::swap(mpls_configured_observation_domain_id_, other->mpls_configured_observation_domain_id_);
  std::swap(last_clear_timestamp_, other->last_clear_timestamp_);
  std::swap(ipv6_extended_attribute_, other->ipv6_extended_attribute_);
  std::swap(flexible_flow_sizing_, other->flexible_flow_sizing_);
  std::swap(use_extended_flow_memory_, other->use_extended_flow_memory_);
  npu_stats_.UnsafeArenaSwap(&other->npu_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InlineJflow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InlineJflow_descriptor_;
  metadata.reflection = InlineJflow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InlineJflow

// optional string ipv4_flows_export_format = 2;
bool InlineJflow::has_ipv4_flows_export_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InlineJflow::set_has_ipv4_flows_export_format() {
  _has_bits_[0] |= 0x00000001u;
}
void InlineJflow::clear_has_ipv4_flows_export_format() {
  _has_bits_[0] &= ~0x00000001u;
}
void InlineJflow::clear_ipv4_flows_export_format() {
  ipv4_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipv4_flows_export_format();
}
 const ::std::string& InlineJflow::ipv4_flows_export_format() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv4_flows_export_format)
  return ipv4_flows_export_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InlineJflow::set_ipv4_flows_export_format(const ::std::string& value) {
  set_has_ipv4_flows_export_format();
  ipv4_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InlineJflow.ipv4_flows_export_format)
}
 void InlineJflow::set_ipv4_flows_export_format(const char* value) {
  set_has_ipv4_flows_export_format();
  ipv4_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InlineJflow.ipv4_flows_export_format)
}
 void InlineJflow::set_ipv4_flows_export_format(const char* value, size_t size) {
  set_has_ipv4_flows_export_format();
  ipv4_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InlineJflow.ipv4_flows_export_format)
}
 ::std::string* InlineJflow::mutable_ipv4_flows_export_format() {
  set_has_ipv4_flows_export_format();
  // @@protoc_insertion_point(field_mutable:InlineJflow.ipv4_flows_export_format)
  return ipv4_flows_export_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InlineJflow::release_ipv4_flows_export_format() {
  clear_has_ipv4_flows_export_format();
  return ipv4_flows_export_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InlineJflow::set_allocated_ipv4_flows_export_format(::std::string* ipv4_flows_export_format) {
  if (ipv4_flows_export_format != NULL) {
    set_has_ipv4_flows_export_format();
  } else {
    clear_has_ipv4_flows_export_format();
  }
  ipv4_flows_export_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv4_flows_export_format);
  // @@protoc_insertion_point(field_set_allocated:InlineJflow.ipv4_flows_export_format)
}

// optional string ipv6_flows_export_format = 3;
bool InlineJflow::has_ipv6_flows_export_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InlineJflow::set_has_ipv6_flows_export_format() {
  _has_bits_[0] |= 0x00000002u;
}
void InlineJflow::clear_has_ipv6_flows_export_format() {
  _has_bits_[0] &= ~0x00000002u;
}
void InlineJflow::clear_ipv6_flows_export_format() {
  ipv6_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipv6_flows_export_format();
}
 const ::std::string& InlineJflow::ipv6_flows_export_format() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv6_flows_export_format)
  return ipv6_flows_export_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InlineJflow::set_ipv6_flows_export_format(const ::std::string& value) {
  set_has_ipv6_flows_export_format();
  ipv6_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InlineJflow.ipv6_flows_export_format)
}
 void InlineJflow::set_ipv6_flows_export_format(const char* value) {
  set_has_ipv6_flows_export_format();
  ipv6_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InlineJflow.ipv6_flows_export_format)
}
 void InlineJflow::set_ipv6_flows_export_format(const char* value, size_t size) {
  set_has_ipv6_flows_export_format();
  ipv6_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InlineJflow.ipv6_flows_export_format)
}
 ::std::string* InlineJflow::mutable_ipv6_flows_export_format() {
  set_has_ipv6_flows_export_format();
  // @@protoc_insertion_point(field_mutable:InlineJflow.ipv6_flows_export_format)
  return ipv6_flows_export_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InlineJflow::release_ipv6_flows_export_format() {
  clear_has_ipv6_flows_export_format();
  return ipv6_flows_export_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InlineJflow::set_allocated_ipv6_flows_export_format(::std::string* ipv6_flows_export_format) {
  if (ipv6_flows_export_format != NULL) {
    set_has_ipv6_flows_export_format();
  } else {
    clear_has_ipv6_flows_export_format();
  }
  ipv6_flows_export_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6_flows_export_format);
  // @@protoc_insertion_point(field_set_allocated:InlineJflow.ipv6_flows_export_format)
}

// optional string vpls_flows_export_format = 4;
bool InlineJflow::has_vpls_flows_export_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InlineJflow::set_has_vpls_flows_export_format() {
  _has_bits_[0] |= 0x00000004u;
}
void InlineJflow::clear_has_vpls_flows_export_format() {
  _has_bits_[0] &= ~0x00000004u;
}
void InlineJflow::clear_vpls_flows_export_format() {
  vpls_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vpls_flows_export_format();
}
 const ::std::string& InlineJflow::vpls_flows_export_format() const {
  // @@protoc_insertion_point(field_get:InlineJflow.vpls_flows_export_format)
  return vpls_flows_export_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InlineJflow::set_vpls_flows_export_format(const ::std::string& value) {
  set_has_vpls_flows_export_format();
  vpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InlineJflow.vpls_flows_export_format)
}
 void InlineJflow::set_vpls_flows_export_format(const char* value) {
  set_has_vpls_flows_export_format();
  vpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InlineJflow.vpls_flows_export_format)
}
 void InlineJflow::set_vpls_flows_export_format(const char* value, size_t size) {
  set_has_vpls_flows_export_format();
  vpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InlineJflow.vpls_flows_export_format)
}
 ::std::string* InlineJflow::mutable_vpls_flows_export_format() {
  set_has_vpls_flows_export_format();
  // @@protoc_insertion_point(field_mutable:InlineJflow.vpls_flows_export_format)
  return vpls_flows_export_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InlineJflow::release_vpls_flows_export_format() {
  clear_has_vpls_flows_export_format();
  return vpls_flows_export_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InlineJflow::set_allocated_vpls_flows_export_format(::std::string* vpls_flows_export_format) {
  if (vpls_flows_export_format != NULL) {
    set_has_vpls_flows_export_format();
  } else {
    clear_has_vpls_flows_export_format();
  }
  vpls_flows_export_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vpls_flows_export_format);
  // @@protoc_insertion_point(field_set_allocated:InlineJflow.vpls_flows_export_format)
}

// optional string mpls_flows_export_format = 5;
bool InlineJflow::has_mpls_flows_export_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InlineJflow::set_has_mpls_flows_export_format() {
  _has_bits_[0] |= 0x00000008u;
}
void InlineJflow::clear_has_mpls_flows_export_format() {
  _has_bits_[0] &= ~0x00000008u;
}
void InlineJflow::clear_mpls_flows_export_format() {
  mpls_flows_export_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mpls_flows_export_format();
}
 const ::std::string& InlineJflow::mpls_flows_export_format() const {
  // @@protoc_insertion_point(field_get:InlineJflow.mpls_flows_export_format)
  return mpls_flows_export_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InlineJflow::set_mpls_flows_export_format(const ::std::string& value) {
  set_has_mpls_flows_export_format();
  mpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InlineJflow.mpls_flows_export_format)
}
 void InlineJflow::set_mpls_flows_export_format(const char* value) {
  set_has_mpls_flows_export_format();
  mpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InlineJflow.mpls_flows_export_format)
}
 void InlineJflow::set_mpls_flows_export_format(const char* value, size_t size) {
  set_has_mpls_flows_export_format();
  mpls_flows_export_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InlineJflow.mpls_flows_export_format)
}
 ::std::string* InlineJflow::mutable_mpls_flows_export_format() {
  set_has_mpls_flows_export_format();
  // @@protoc_insertion_point(field_mutable:InlineJflow.mpls_flows_export_format)
  return mpls_flows_export_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InlineJflow::release_mpls_flows_export_format() {
  clear_has_mpls_flows_export_format();
  return mpls_flows_export_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InlineJflow::set_allocated_mpls_flows_export_format(::std::string* mpls_flows_export_format) {
  if (mpls_flows_export_format != NULL) {
    set_has_mpls_flows_export_format();
  } else {
    clear_has_mpls_flows_export_format();
  }
  mpls_flows_export_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mpls_flows_export_format);
  // @@protoc_insertion_point(field_set_allocated:InlineJflow.mpls_flows_export_format)
}

// optional uint32 ipv4_route_record_cnt = 6;
bool InlineJflow::has_ipv4_route_record_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InlineJflow::set_has_ipv4_route_record_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
void InlineJflow::clear_has_ipv4_route_record_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
void InlineJflow::clear_ipv4_route_record_cnt() {
  ipv4_route_record_cnt_ = 0u;
  clear_has_ipv4_route_record_cnt();
}
 ::google::protobuf::uint32 InlineJflow::ipv4_route_record_cnt() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv4_route_record_cnt)
  return ipv4_route_record_cnt_;
}
 void InlineJflow::set_ipv4_route_record_cnt(::google::protobuf::uint32 value) {
  set_has_ipv4_route_record_cnt();
  ipv4_route_record_cnt_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv4_route_record_cnt)
}

// optional uint32 ipv6_route_record_cnt = 7;
bool InlineJflow::has_ipv6_route_record_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InlineJflow::set_has_ipv6_route_record_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
void InlineJflow::clear_has_ipv6_route_record_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
void InlineJflow::clear_ipv6_route_record_cnt() {
  ipv6_route_record_cnt_ = 0u;
  clear_has_ipv6_route_record_cnt();
}
 ::google::protobuf::uint32 InlineJflow::ipv6_route_record_cnt() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv6_route_record_cnt)
  return ipv6_route_record_cnt_;
}
 void InlineJflow::set_ipv6_route_record_cnt(::google::protobuf::uint32 value) {
  set_has_ipv6_route_record_cnt();
  ipv6_route_record_cnt_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv6_route_record_cnt)
}

// optional uint32 mpls_route_record_cnt = 8;
bool InlineJflow::has_mpls_route_record_cnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InlineJflow::set_has_mpls_route_record_cnt() {
  _has_bits_[0] |= 0x00000040u;
}
void InlineJflow::clear_has_mpls_route_record_cnt() {
  _has_bits_[0] &= ~0x00000040u;
}
void InlineJflow::clear_mpls_route_record_cnt() {
  mpls_route_record_cnt_ = 0u;
  clear_has_mpls_route_record_cnt();
}
 ::google::protobuf::uint32 InlineJflow::mpls_route_record_cnt() const {
  // @@protoc_insertion_point(field_get:InlineJflow.mpls_route_record_cnt)
  return mpls_route_record_cnt_;
}
 void InlineJflow::set_mpls_route_record_cnt(::google::protobuf::uint32 value) {
  set_has_mpls_route_record_cnt();
  mpls_route_record_cnt_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.mpls_route_record_cnt)
}

// optional uint32 autonomous_system_record_cnt = 9;
bool InlineJflow::has_autonomous_system_record_cnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InlineJflow::set_has_autonomous_system_record_cnt() {
  _has_bits_[0] |= 0x00000080u;
}
void InlineJflow::clear_has_autonomous_system_record_cnt() {
  _has_bits_[0] &= ~0x00000080u;
}
void InlineJflow::clear_autonomous_system_record_cnt() {
  autonomous_system_record_cnt_ = 0u;
  clear_has_autonomous_system_record_cnt();
}
 ::google::protobuf::uint32 InlineJflow::autonomous_system_record_cnt() const {
  // @@protoc_insertion_point(field_get:InlineJflow.autonomous_system_record_cnt)
  return autonomous_system_record_cnt_;
}
 void InlineJflow::set_autonomous_system_record_cnt(::google::protobuf::uint32 value) {
  set_has_autonomous_system_record_cnt();
  autonomous_system_record_cnt_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.autonomous_system_record_cnt)
}

// optional uint64 ipv4_max_flows_count = 10;
bool InlineJflow::has_ipv4_max_flows_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InlineJflow::set_has_ipv4_max_flows_count() {
  _has_bits_[0] |= 0x00000100u;
}
void InlineJflow::clear_has_ipv4_max_flows_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void InlineJflow::clear_ipv4_max_flows_count() {
  ipv4_max_flows_count_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_max_flows_count();
}
 ::google::protobuf::uint64 InlineJflow::ipv4_max_flows_count() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv4_max_flows_count)
  return ipv4_max_flows_count_;
}
 void InlineJflow::set_ipv4_max_flows_count(::google::protobuf::uint64 value) {
  set_has_ipv4_max_flows_count();
  ipv4_max_flows_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv4_max_flows_count)
}

// optional uint64 ipv6_max_flows_count = 11;
bool InlineJflow::has_ipv6_max_flows_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void InlineJflow::set_has_ipv6_max_flows_count() {
  _has_bits_[0] |= 0x00000200u;
}
void InlineJflow::clear_has_ipv6_max_flows_count() {
  _has_bits_[0] &= ~0x00000200u;
}
void InlineJflow::clear_ipv6_max_flows_count() {
  ipv6_max_flows_count_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_max_flows_count();
}
 ::google::protobuf::uint64 InlineJflow::ipv6_max_flows_count() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv6_max_flows_count)
  return ipv6_max_flows_count_;
}
 void InlineJflow::set_ipv6_max_flows_count(::google::protobuf::uint64 value) {
  set_has_ipv6_max_flows_count();
  ipv6_max_flows_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv6_max_flows_count)
}

// optional uint64 vpls_max_flows_count = 12;
bool InlineJflow::has_vpls_max_flows_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void InlineJflow::set_has_vpls_max_flows_count() {
  _has_bits_[0] |= 0x00000400u;
}
void InlineJflow::clear_has_vpls_max_flows_count() {
  _has_bits_[0] &= ~0x00000400u;
}
void InlineJflow::clear_vpls_max_flows_count() {
  vpls_max_flows_count_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_max_flows_count();
}
 ::google::protobuf::uint64 InlineJflow::vpls_max_flows_count() const {
  // @@protoc_insertion_point(field_get:InlineJflow.vpls_max_flows_count)
  return vpls_max_flows_count_;
}
 void InlineJflow::set_vpls_max_flows_count(::google::protobuf::uint64 value) {
  set_has_vpls_max_flows_count();
  vpls_max_flows_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.vpls_max_flows_count)
}

// optional uint64 mpls_max_flows_count = 13;
bool InlineJflow::has_mpls_max_flows_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void InlineJflow::set_has_mpls_max_flows_count() {
  _has_bits_[0] |= 0x00000800u;
}
void InlineJflow::clear_has_mpls_max_flows_count() {
  _has_bits_[0] &= ~0x00000800u;
}
void InlineJflow::clear_mpls_max_flows_count() {
  mpls_max_flows_count_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_max_flows_count();
}
 ::google::protobuf::uint64 InlineJflow::mpls_max_flows_count() const {
  // @@protoc_insertion_point(field_get:InlineJflow.mpls_max_flows_count)
  return mpls_max_flows_count_;
}
 void InlineJflow::set_mpls_max_flows_count(::google::protobuf::uint64 value) {
  set_has_mpls_max_flows_count();
  mpls_max_flows_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.mpls_max_flows_count)
}

// optional uint32 memory_alloc_fail_cnt = 14;
bool InlineJflow::has_memory_alloc_fail_cnt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void InlineJflow::set_has_memory_alloc_fail_cnt() {
  _has_bits_[0] |= 0x00001000u;
}
void InlineJflow::clear_has_memory_alloc_fail_cnt() {
  _has_bits_[0] &= ~0x00001000u;
}
void InlineJflow::clear_memory_alloc_fail_cnt() {
  memory_alloc_fail_cnt_ = 0u;
  clear_has_memory_alloc_fail_cnt();
}
 ::google::protobuf::uint32 InlineJflow::memory_alloc_fail_cnt() const {
  // @@protoc_insertion_point(field_get:InlineJflow.memory_alloc_fail_cnt)
  return memory_alloc_fail_cnt_;
}
 void InlineJflow::set_memory_alloc_fail_cnt(::google::protobuf::uint32 value) {
  set_has_memory_alloc_fail_cnt();
  memory_alloc_fail_cnt_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.memory_alloc_fail_cnt)
}

// optional uint32 ipv4_configured_observation_domain_id = 15;
bool InlineJflow::has_ipv4_configured_observation_domain_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void InlineJflow::set_has_ipv4_configured_observation_domain_id() {
  _has_bits_[0] |= 0x00002000u;
}
void InlineJflow::clear_has_ipv4_configured_observation_domain_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void InlineJflow::clear_ipv4_configured_observation_domain_id() {
  ipv4_configured_observation_domain_id_ = 0u;
  clear_has_ipv4_configured_observation_domain_id();
}
 ::google::protobuf::uint32 InlineJflow::ipv4_configured_observation_domain_id() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv4_configured_observation_domain_id)
  return ipv4_configured_observation_domain_id_;
}
 void InlineJflow::set_ipv4_configured_observation_domain_id(::google::protobuf::uint32 value) {
  set_has_ipv4_configured_observation_domain_id();
  ipv4_configured_observation_domain_id_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv4_configured_observation_domain_id)
}

// optional uint32 ipv6_configured_observation_domain_id = 16;
bool InlineJflow::has_ipv6_configured_observation_domain_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void InlineJflow::set_has_ipv6_configured_observation_domain_id() {
  _has_bits_[0] |= 0x00004000u;
}
void InlineJflow::clear_has_ipv6_configured_observation_domain_id() {
  _has_bits_[0] &= ~0x00004000u;
}
void InlineJflow::clear_ipv6_configured_observation_domain_id() {
  ipv6_configured_observation_domain_id_ = 0u;
  clear_has_ipv6_configured_observation_domain_id();
}
 ::google::protobuf::uint32 InlineJflow::ipv6_configured_observation_domain_id() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv6_configured_observation_domain_id)
  return ipv6_configured_observation_domain_id_;
}
 void InlineJflow::set_ipv6_configured_observation_domain_id(::google::protobuf::uint32 value) {
  set_has_ipv6_configured_observation_domain_id();
  ipv6_configured_observation_domain_id_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv6_configured_observation_domain_id)
}

// optional uint32 vpls_configured_observation_domain_id = 17;
bool InlineJflow::has_vpls_configured_observation_domain_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void InlineJflow::set_has_vpls_configured_observation_domain_id() {
  _has_bits_[0] |= 0x00008000u;
}
void InlineJflow::clear_has_vpls_configured_observation_domain_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void InlineJflow::clear_vpls_configured_observation_domain_id() {
  vpls_configured_observation_domain_id_ = 0u;
  clear_has_vpls_configured_observation_domain_id();
}
 ::google::protobuf::uint32 InlineJflow::vpls_configured_observation_domain_id() const {
  // @@protoc_insertion_point(field_get:InlineJflow.vpls_configured_observation_domain_id)
  return vpls_configured_observation_domain_id_;
}
 void InlineJflow::set_vpls_configured_observation_domain_id(::google::protobuf::uint32 value) {
  set_has_vpls_configured_observation_domain_id();
  vpls_configured_observation_domain_id_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.vpls_configured_observation_domain_id)
}

// optional uint32 mpls_configured_observation_domain_id = 18;
bool InlineJflow::has_mpls_configured_observation_domain_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void InlineJflow::set_has_mpls_configured_observation_domain_id() {
  _has_bits_[0] |= 0x00010000u;
}
void InlineJflow::clear_has_mpls_configured_observation_domain_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void InlineJflow::clear_mpls_configured_observation_domain_id() {
  mpls_configured_observation_domain_id_ = 0u;
  clear_has_mpls_configured_observation_domain_id();
}
 ::google::protobuf::uint32 InlineJflow::mpls_configured_observation_domain_id() const {
  // @@protoc_insertion_point(field_get:InlineJflow.mpls_configured_observation_domain_id)
  return mpls_configured_observation_domain_id_;
}
 void InlineJflow::set_mpls_configured_observation_domain_id(::google::protobuf::uint32 value) {
  set_has_mpls_configured_observation_domain_id();
  mpls_configured_observation_domain_id_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.mpls_configured_observation_domain_id)
}

// optional uint32 last_clear_timestamp = 19;
bool InlineJflow::has_last_clear_timestamp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void InlineJflow::set_has_last_clear_timestamp() {
  _has_bits_[0] |= 0x00020000u;
}
void InlineJflow::clear_has_last_clear_timestamp() {
  _has_bits_[0] &= ~0x00020000u;
}
void InlineJflow::clear_last_clear_timestamp() {
  last_clear_timestamp_ = 0u;
  clear_has_last_clear_timestamp();
}
 ::google::protobuf::uint32 InlineJflow::last_clear_timestamp() const {
  // @@protoc_insertion_point(field_get:InlineJflow.last_clear_timestamp)
  return last_clear_timestamp_;
}
 void InlineJflow::set_last_clear_timestamp(::google::protobuf::uint32 value) {
  set_has_last_clear_timestamp();
  last_clear_timestamp_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.last_clear_timestamp)
}

// optional bool ipv6_extended_attribute = 20;
bool InlineJflow::has_ipv6_extended_attribute() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void InlineJflow::set_has_ipv6_extended_attribute() {
  _has_bits_[0] |= 0x00040000u;
}
void InlineJflow::clear_has_ipv6_extended_attribute() {
  _has_bits_[0] &= ~0x00040000u;
}
void InlineJflow::clear_ipv6_extended_attribute() {
  ipv6_extended_attribute_ = false;
  clear_has_ipv6_extended_attribute();
}
 bool InlineJflow::ipv6_extended_attribute() const {
  // @@protoc_insertion_point(field_get:InlineJflow.ipv6_extended_attribute)
  return ipv6_extended_attribute_;
}
 void InlineJflow::set_ipv6_extended_attribute(bool value) {
  set_has_ipv6_extended_attribute();
  ipv6_extended_attribute_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.ipv6_extended_attribute)
}

// optional bool flexible_flow_sizing = 21;
bool InlineJflow::has_flexible_flow_sizing() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void InlineJflow::set_has_flexible_flow_sizing() {
  _has_bits_[0] |= 0x00080000u;
}
void InlineJflow::clear_has_flexible_flow_sizing() {
  _has_bits_[0] &= ~0x00080000u;
}
void InlineJflow::clear_flexible_flow_sizing() {
  flexible_flow_sizing_ = false;
  clear_has_flexible_flow_sizing();
}
 bool InlineJflow::flexible_flow_sizing() const {
  // @@protoc_insertion_point(field_get:InlineJflow.flexible_flow_sizing)
  return flexible_flow_sizing_;
}
 void InlineJflow::set_flexible_flow_sizing(bool value) {
  set_has_flexible_flow_sizing();
  flexible_flow_sizing_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.flexible_flow_sizing)
}

// optional bool use_extended_flow_memory = 22;
bool InlineJflow::has_use_extended_flow_memory() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void InlineJflow::set_has_use_extended_flow_memory() {
  _has_bits_[0] |= 0x00100000u;
}
void InlineJflow::clear_has_use_extended_flow_memory() {
  _has_bits_[0] &= ~0x00100000u;
}
void InlineJflow::clear_use_extended_flow_memory() {
  use_extended_flow_memory_ = false;
  clear_has_use_extended_flow_memory();
}
 bool InlineJflow::use_extended_flow_memory() const {
  // @@protoc_insertion_point(field_get:InlineJflow.use_extended_flow_memory)
  return use_extended_flow_memory_;
}
 void InlineJflow::set_use_extended_flow_memory(bool value) {
  set_has_use_extended_flow_memory();
  use_extended_flow_memory_ = value;
  // @@protoc_insertion_point(field_set:InlineJflow.use_extended_flow_memory)
}

// repeated .InlineJflowNpuStats npu_stats = 50;
int InlineJflow::npu_stats_size() const {
  return npu_stats_.size();
}
void InlineJflow::clear_npu_stats() {
  npu_stats_.Clear();
}
const ::InlineJflowNpuStats& InlineJflow::npu_stats(int index) const {
  // @@protoc_insertion_point(field_get:InlineJflow.npu_stats)
  return npu_stats_.Get(index);
}
::InlineJflowNpuStats* InlineJflow::mutable_npu_stats(int index) {
  // @@protoc_insertion_point(field_mutable:InlineJflow.npu_stats)
  return npu_stats_.Mutable(index);
}
::InlineJflowNpuStats* InlineJflow::add_npu_stats() {
  // @@protoc_insertion_point(field_add:InlineJflow.npu_stats)
  return npu_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::InlineJflowNpuStats >*
InlineJflow::mutable_npu_stats() {
  // @@protoc_insertion_point(field_mutable_list:InlineJflow.npu_stats)
  return &npu_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::InlineJflowNpuStats >&
InlineJflow::npu_stats() const {
  // @@protoc_insertion_point(field_list:InlineJflow.npu_stats)
  return npu_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InlineJflowNpuStats::kNpuIdentifierFieldNumber;
const int InlineJflowNpuStats::kIpv4FlowPacketsFieldNumber;
const int InlineJflowNpuStats::kIpv4FlowBytesFieldNumber;
const int InlineJflowNpuStats::kIpv4TotalFlowsFieldNumber;
const int InlineJflowNpuStats::kIpv4ActiveFlowsFieldNumber;
const int InlineJflowNpuStats::kIpv4FlowsExportedFieldNumber;
const int InlineJflowNpuStats::kIpv4PacketsExportedFieldNumber;
const int InlineJflowNpuStats::kIpv4FlowsInactiveTimedOutFieldNumber;
const int InlineJflowNpuStats::kIpv4FlowsActiveTimedOutFieldNumber;
const int InlineJflowNpuStats::kIpv4FlowCreateFailureFieldNumber;
const int InlineJflowNpuStats::kIpv4RouteLookupFailureFieldNumber;
const int InlineJflowNpuStats::kIpv4AutonomousSystemLookupFailureFieldNumber;
const int InlineJflowNpuStats::kIpv4FlowPacketExportFailureFieldNumber;
const int InlineJflowNpuStats::kIpv4FlowTableUtilizationFieldNumber;
const int InlineJflowNpuStats::kIpv4FlowInsertCountFieldNumber;
const int InlineJflowNpuStats::kIpv6FlowPacketsFieldNumber;
const int InlineJflowNpuStats::kIpv6FlowBytesFieldNumber;
const int InlineJflowNpuStats::kIpv6TotalFlowsFieldNumber;
const int InlineJflowNpuStats::kIpv6ActiveFlowsFieldNumber;
const int InlineJflowNpuStats::kIpv6FlowsExportedFieldNumber;
const int InlineJflowNpuStats::kIpv6PacketsExportedFieldNumber;
const int InlineJflowNpuStats::kIpv6FlowsInactiveTimedOutFieldNumber;
const int InlineJflowNpuStats::kIpv6FlowsActiveTimedOutFieldNumber;
const int InlineJflowNpuStats::kIpv6FlowCreateFailureFieldNumber;
const int InlineJflowNpuStats::kIpv6RouteLookupFailureFieldNumber;
const int InlineJflowNpuStats::kIpv6AutonomousSystemLookupFailureFieldNumber;
const int InlineJflowNpuStats::kIpv6FlowPacketExportFailureFieldNumber;
const int InlineJflowNpuStats::kIpv6FlowTableUtilizationFieldNumber;
const int InlineJflowNpuStats::kIpv6FlowInsertCountFieldNumber;
const int InlineJflowNpuStats::kVplsFlowPacketsFieldNumber;
const int InlineJflowNpuStats::kVplsFlowBytesFieldNumber;
const int InlineJflowNpuStats::kVplsTotalFlowsFieldNumber;
const int InlineJflowNpuStats::kVplsActiveFlowsFieldNumber;
const int InlineJflowNpuStats::kVplsFlowsExportedFieldNumber;
const int InlineJflowNpuStats::kVplsPacketsExportedFieldNumber;
const int InlineJflowNpuStats::kVplsFlowsInactiveTimedOutFieldNumber;
const int InlineJflowNpuStats::kVplsFlowsActiveTimedOutFieldNumber;
const int InlineJflowNpuStats::kVplsFlowCreateFailureFieldNumber;
const int InlineJflowNpuStats::kVplsRouteLookupFailureFieldNumber;
const int InlineJflowNpuStats::kVplsAutonomousSystemLookupFailureFieldNumber;
const int InlineJflowNpuStats::kVplsFlowPacketExportFailureFieldNumber;
const int InlineJflowNpuStats::kVplsFlowTableUtilizationFieldNumber;
const int InlineJflowNpuStats::kVplsFlowInsertCountFieldNumber;
const int InlineJflowNpuStats::kMplsFlowPacketsFieldNumber;
const int InlineJflowNpuStats::kMplsFlowBytesFieldNumber;
const int InlineJflowNpuStats::kMplsTotalFlowsFieldNumber;
const int InlineJflowNpuStats::kMplsActiveFlowsFieldNumber;
const int InlineJflowNpuStats::kMplsFlowsExportedFieldNumber;
const int InlineJflowNpuStats::kMplsPacketsExportedFieldNumber;
const int InlineJflowNpuStats::kMplsFlowsInactiveTimedOutFieldNumber;
const int InlineJflowNpuStats::kMplsFlowsActiveTimedOutFieldNumber;
const int InlineJflowNpuStats::kMplsFlowCreateFailureFieldNumber;
const int InlineJflowNpuStats::kMplsRouteLookupFailureFieldNumber;
const int InlineJflowNpuStats::kMplsAutonomousSystemLookupFailureFieldNumber;
const int InlineJflowNpuStats::kMplsFlowPacketExportFailureFieldNumber;
const int InlineJflowNpuStats::kMplsFlowTableUtilizationFieldNumber;
const int InlineJflowNpuStats::kMplsFlowInsertCountFieldNumber;
#endif  // !_MSC_VER

InlineJflowNpuStats::InlineJflowNpuStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InlineJflowNpuStats)
}

void InlineJflowNpuStats::InitAsDefaultInstance() {
}

InlineJflowNpuStats::InlineJflowNpuStats(const InlineJflowNpuStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InlineJflowNpuStats)
}

void InlineJflowNpuStats::SharedCtor() {
  _cached_size_ = 0;
  npu_identifier_ = 0u;
  ipv4_flow_packets_ = GOOGLE_ULONGLONG(0);
  ipv4_flow_bytes_ = GOOGLE_ULONGLONG(0);
  ipv4_total_flows_ = GOOGLE_ULONGLONG(0);
  ipv4_active_flows_ = GOOGLE_ULONGLONG(0);
  ipv4_flows_exported_ = GOOGLE_ULONGLONG(0);
  ipv4_packets_exported_ = GOOGLE_ULONGLONG(0);
  ipv4_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  ipv4_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  ipv4_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  ipv4_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  ipv4_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  ipv4_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  ipv4_flow_table_utilization_ = 0;
  ipv4_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  ipv6_flow_packets_ = GOOGLE_ULONGLONG(0);
  ipv6_flow_bytes_ = GOOGLE_ULONGLONG(0);
  ipv6_total_flows_ = GOOGLE_ULONGLONG(0);
  ipv6_active_flows_ = GOOGLE_ULONGLONG(0);
  ipv6_flows_exported_ = GOOGLE_ULONGLONG(0);
  ipv6_packets_exported_ = GOOGLE_ULONGLONG(0);
  ipv6_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  ipv6_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  ipv6_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  ipv6_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  ipv6_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  ipv6_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  ipv6_flow_table_utilization_ = 0;
  ipv6_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  vpls_flow_packets_ = GOOGLE_ULONGLONG(0);
  vpls_flow_bytes_ = GOOGLE_ULONGLONG(0);
  vpls_total_flows_ = GOOGLE_ULONGLONG(0);
  vpls_active_flows_ = GOOGLE_ULONGLONG(0);
  vpls_flows_exported_ = GOOGLE_ULONGLONG(0);
  vpls_packets_exported_ = GOOGLE_ULONGLONG(0);
  vpls_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  vpls_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  vpls_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  vpls_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  vpls_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  vpls_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  vpls_flow_table_utilization_ = 0;
  vpls_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  mpls_flow_packets_ = GOOGLE_ULONGLONG(0);
  mpls_flow_bytes_ = GOOGLE_ULONGLONG(0);
  mpls_total_flows_ = GOOGLE_ULONGLONG(0);
  mpls_active_flows_ = GOOGLE_ULONGLONG(0);
  mpls_flows_exported_ = GOOGLE_ULONGLONG(0);
  mpls_packets_exported_ = GOOGLE_ULONGLONG(0);
  mpls_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  mpls_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  mpls_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  mpls_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  mpls_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  mpls_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  mpls_flow_table_utilization_ = 0;
  mpls_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InlineJflowNpuStats::~InlineJflowNpuStats() {
  // @@protoc_insertion_point(destructor:InlineJflowNpuStats)
  SharedDtor();
}

void InlineJflowNpuStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InlineJflowNpuStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InlineJflowNpuStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InlineJflowNpuStats_descriptor_;
}

const InlineJflowNpuStats& InlineJflowNpuStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inline_5fjflow_2eproto();
  return *default_instance_;
}

InlineJflowNpuStats* InlineJflowNpuStats::default_instance_ = NULL;

InlineJflowNpuStats* InlineJflowNpuStats::New(::google::protobuf::Arena* arena) const {
  InlineJflowNpuStats* n = new InlineJflowNpuStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InlineJflowNpuStats::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InlineJflowNpuStats*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ipv4_flow_packets_, npu_identifier_);
    ipv4_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(ipv4_flows_active_timed_out_, ipv6_flow_packets_);
    ipv4_flow_table_utilization_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(ipv6_flow_bytes_, ipv6_flow_create_failure_);
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(ipv6_route_lookup_failure_, vpls_total_flows_);
    ipv6_flow_table_utilization_ = 0;
  }
  if (_has_bits_[32 / 32] & 255u) {
    ZR_(vpls_active_flows_, vpls_packets_exported_);
    ZR_(vpls_flows_inactive_timed_out_, vpls_autonomous_system_lookup_failure_);
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ZR_(vpls_flow_packet_export_failure_, mpls_flows_exported_);
    vpls_flow_table_utilization_ = 0;
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ZR_(mpls_packets_exported_, mpls_flow_packet_export_failure_);
    mpls_flow_table_utilization_ = 0;
  }
  mpls_flow_insert_count_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InlineJflowNpuStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InlineJflowNpuStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 npu_identifier = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npu_identifier_)));
          set_has_npu_identifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_ipv4_flow_packets;
        break;
      }

      // optional uint64 ipv4_flow_packets = 51;
      case 51: {
        if (tag == 408) {
         parse_ipv4_flow_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_flow_packets_)));
          set_has_ipv4_flow_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_ipv4_flow_bytes;
        break;
      }

      // optional uint64 ipv4_flow_bytes = 52;
      case 52: {
        if (tag == 416) {
         parse_ipv4_flow_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_flow_bytes_)));
          set_has_ipv4_flow_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_ipv4_total_flows;
        break;
      }

      // optional uint64 ipv4_total_flows = 53;
      case 53: {
        if (tag == 424) {
         parse_ipv4_total_flows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_total_flows_)));
          set_has_ipv4_total_flows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_ipv4_active_flows;
        break;
      }

      // optional uint64 ipv4_active_flows = 54;
      case 54: {
        if (tag == 432) {
         parse_ipv4_active_flows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_active_flows_)));
          set_has_ipv4_active_flows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_ipv4_flows_exported;
        break;
      }

      // optional uint64 ipv4_flows_exported = 55;
      case 55: {
        if (tag == 440) {
         parse_ipv4_flows_exported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_flows_exported_)));
          set_has_ipv4_flows_exported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_ipv4_packets_exported;
        break;
      }

      // optional uint64 ipv4_packets_exported = 56;
      case 56: {
        if (tag == 448) {
         parse_ipv4_packets_exported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_packets_exported_)));
          set_has_ipv4_packets_exported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_ipv4_flows_inactive_timed_out;
        break;
      }

      // optional uint64 ipv4_flows_inactive_timed_out = 57;
      case 57: {
        if (tag == 456) {
         parse_ipv4_flows_inactive_timed_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_flows_inactive_timed_out_)));
          set_has_ipv4_flows_inactive_timed_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_ipv4_flows_active_timed_out;
        break;
      }

      // optional uint64 ipv4_flows_active_timed_out = 58;
      case 58: {
        if (tag == 464) {
         parse_ipv4_flows_active_timed_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_flows_active_timed_out_)));
          set_has_ipv4_flows_active_timed_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_ipv4_flow_create_failure;
        break;
      }

      // optional uint64 ipv4_flow_create_failure = 59;
      case 59: {
        if (tag == 472) {
         parse_ipv4_flow_create_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_flow_create_failure_)));
          set_has_ipv4_flow_create_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_ipv4_route_lookup_failure;
        break;
      }

      // optional uint64 ipv4_route_lookup_failure = 60;
      case 60: {
        if (tag == 480) {
         parse_ipv4_route_lookup_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_route_lookup_failure_)));
          set_has_ipv4_route_lookup_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_ipv4_autonomous_system_lookup_failure;
        break;
      }

      // optional uint64 ipv4_autonomous_system_lookup_failure = 61;
      case 61: {
        if (tag == 488) {
         parse_ipv4_autonomous_system_lookup_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_autonomous_system_lookup_failure_)));
          set_has_ipv4_autonomous_system_lookup_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_ipv4_flow_packet_export_failure;
        break;
      }

      // optional uint64 ipv4_flow_packet_export_failure = 62;
      case 62: {
        if (tag == 496) {
         parse_ipv4_flow_packet_export_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_flow_packet_export_failure_)));
          set_has_ipv4_flow_packet_export_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(509)) goto parse_ipv4_flow_table_utilization;
        break;
      }

      // optional float ipv4_flow_table_utilization = 63;
      case 63: {
        if (tag == 509) {
         parse_ipv4_flow_table_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ipv4_flow_table_utilization_)));
          set_has_ipv4_flow_table_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_ipv4_flow_insert_count;
        break;
      }

      // optional uint64 ipv4_flow_insert_count = 64;
      case 64: {
        if (tag == 512) {
         parse_ipv4_flow_insert_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv4_flow_insert_count_)));
          set_has_ipv4_flow_insert_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_ipv6_flow_packets;
        break;
      }

      // optional uint64 ipv6_flow_packets = 101;
      case 101: {
        if (tag == 808) {
         parse_ipv6_flow_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_flow_packets_)));
          set_has_ipv6_flow_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_ipv6_flow_bytes;
        break;
      }

      // optional uint64 ipv6_flow_bytes = 102;
      case 102: {
        if (tag == 816) {
         parse_ipv6_flow_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_flow_bytes_)));
          set_has_ipv6_flow_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(824)) goto parse_ipv6_total_flows;
        break;
      }

      // optional uint64 ipv6_total_flows = 103;
      case 103: {
        if (tag == 824) {
         parse_ipv6_total_flows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_total_flows_)));
          set_has_ipv6_total_flows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_ipv6_active_flows;
        break;
      }

      // optional uint64 ipv6_active_flows = 104;
      case 104: {
        if (tag == 832) {
         parse_ipv6_active_flows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_active_flows_)));
          set_has_ipv6_active_flows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(840)) goto parse_ipv6_flows_exported;
        break;
      }

      // optional uint64 ipv6_flows_exported = 105;
      case 105: {
        if (tag == 840) {
         parse_ipv6_flows_exported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_flows_exported_)));
          set_has_ipv6_flows_exported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_ipv6_packets_exported;
        break;
      }

      // optional uint64 ipv6_packets_exported = 106;
      case 106: {
        if (tag == 848) {
         parse_ipv6_packets_exported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_packets_exported_)));
          set_has_ipv6_packets_exported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(856)) goto parse_ipv6_flows_inactive_timed_out;
        break;
      }

      // optional uint64 ipv6_flows_inactive_timed_out = 107;
      case 107: {
        if (tag == 856) {
         parse_ipv6_flows_inactive_timed_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_flows_inactive_timed_out_)));
          set_has_ipv6_flows_inactive_timed_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(864)) goto parse_ipv6_flows_active_timed_out;
        break;
      }

      // optional uint64 ipv6_flows_active_timed_out = 108;
      case 108: {
        if (tag == 864) {
         parse_ipv6_flows_active_timed_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_flows_active_timed_out_)));
          set_has_ipv6_flows_active_timed_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(872)) goto parse_ipv6_flow_create_failure;
        break;
      }

      // optional uint64 ipv6_flow_create_failure = 109;
      case 109: {
        if (tag == 872) {
         parse_ipv6_flow_create_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_flow_create_failure_)));
          set_has_ipv6_flow_create_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_ipv6_route_lookup_failure;
        break;
      }

      // optional uint64 ipv6_route_lookup_failure = 110;
      case 110: {
        if (tag == 880) {
         parse_ipv6_route_lookup_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_route_lookup_failure_)));
          set_has_ipv6_route_lookup_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(888)) goto parse_ipv6_autonomous_system_lookup_failure;
        break;
      }

      // optional uint64 ipv6_autonomous_system_lookup_failure = 111;
      case 111: {
        if (tag == 888) {
         parse_ipv6_autonomous_system_lookup_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_autonomous_system_lookup_failure_)));
          set_has_ipv6_autonomous_system_lookup_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(896)) goto parse_ipv6_flow_packet_export_failure;
        break;
      }

      // optional uint64 ipv6_flow_packet_export_failure = 112;
      case 112: {
        if (tag == 896) {
         parse_ipv6_flow_packet_export_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_flow_packet_export_failure_)));
          set_has_ipv6_flow_packet_export_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(909)) goto parse_ipv6_flow_table_utilization;
        break;
      }

      // optional float ipv6_flow_table_utilization = 113;
      case 113: {
        if (tag == 909) {
         parse_ipv6_flow_table_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ipv6_flow_table_utilization_)));
          set_has_ipv6_flow_table_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(912)) goto parse_ipv6_flow_insert_count;
        break;
      }

      // optional uint64 ipv6_flow_insert_count = 114;
      case 114: {
        if (tag == 912) {
         parse_ipv6_flow_insert_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipv6_flow_insert_count_)));
          set_has_ipv6_flow_insert_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1208)) goto parse_vpls_flow_packets;
        break;
      }

      // optional uint64 vpls_flow_packets = 151;
      case 151: {
        if (tag == 1208) {
         parse_vpls_flow_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_flow_packets_)));
          set_has_vpls_flow_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1216)) goto parse_vpls_flow_bytes;
        break;
      }

      // optional uint64 vpls_flow_bytes = 152;
      case 152: {
        if (tag == 1216) {
         parse_vpls_flow_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_flow_bytes_)));
          set_has_vpls_flow_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1224)) goto parse_vpls_total_flows;
        break;
      }

      // optional uint64 vpls_total_flows = 153;
      case 153: {
        if (tag == 1224) {
         parse_vpls_total_flows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_total_flows_)));
          set_has_vpls_total_flows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1232)) goto parse_vpls_active_flows;
        break;
      }

      // optional uint64 vpls_active_flows = 154;
      case 154: {
        if (tag == 1232) {
         parse_vpls_active_flows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_active_flows_)));
          set_has_vpls_active_flows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1240)) goto parse_vpls_flows_exported;
        break;
      }

      // optional uint64 vpls_flows_exported = 155;
      case 155: {
        if (tag == 1240) {
         parse_vpls_flows_exported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_flows_exported_)));
          set_has_vpls_flows_exported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1248)) goto parse_vpls_packets_exported;
        break;
      }

      // optional uint64 vpls_packets_exported = 156;
      case 156: {
        if (tag == 1248) {
         parse_vpls_packets_exported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_packets_exported_)));
          set_has_vpls_packets_exported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1256)) goto parse_vpls_flows_inactive_timed_out;
        break;
      }

      // optional uint64 vpls_flows_inactive_timed_out = 157;
      case 157: {
        if (tag == 1256) {
         parse_vpls_flows_inactive_timed_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_flows_inactive_timed_out_)));
          set_has_vpls_flows_inactive_timed_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1264)) goto parse_vpls_flows_active_timed_out;
        break;
      }

      // optional uint64 vpls_flows_active_timed_out = 158;
      case 158: {
        if (tag == 1264) {
         parse_vpls_flows_active_timed_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_flows_active_timed_out_)));
          set_has_vpls_flows_active_timed_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1272)) goto parse_vpls_flow_create_failure;
        break;
      }

      // optional uint64 vpls_flow_create_failure = 159;
      case 159: {
        if (tag == 1272) {
         parse_vpls_flow_create_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_flow_create_failure_)));
          set_has_vpls_flow_create_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1280)) goto parse_vpls_route_lookup_failure;
        break;
      }

      // optional uint64 vpls_route_lookup_failure = 160;
      case 160: {
        if (tag == 1280) {
         parse_vpls_route_lookup_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_route_lookup_failure_)));
          set_has_vpls_route_lookup_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1288)) goto parse_vpls_autonomous_system_lookup_failure;
        break;
      }

      // optional uint64 vpls_autonomous_system_lookup_failure = 161;
      case 161: {
        if (tag == 1288) {
         parse_vpls_autonomous_system_lookup_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_autonomous_system_lookup_failure_)));
          set_has_vpls_autonomous_system_lookup_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1296)) goto parse_vpls_flow_packet_export_failure;
        break;
      }

      // optional uint64 vpls_flow_packet_export_failure = 162;
      case 162: {
        if (tag == 1296) {
         parse_vpls_flow_packet_export_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_flow_packet_export_failure_)));
          set_has_vpls_flow_packet_export_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1309)) goto parse_vpls_flow_table_utilization;
        break;
      }

      // optional float vpls_flow_table_utilization = 163;
      case 163: {
        if (tag == 1309) {
         parse_vpls_flow_table_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vpls_flow_table_utilization_)));
          set_has_vpls_flow_table_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1312)) goto parse_vpls_flow_insert_count;
        break;
      }

      // optional uint64 vpls_flow_insert_count = 164;
      case 164: {
        if (tag == 1312) {
         parse_vpls_flow_insert_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vpls_flow_insert_count_)));
          set_has_vpls_flow_insert_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1608)) goto parse_mpls_flow_packets;
        break;
      }

      // optional uint64 mpls_flow_packets = 201;
      case 201: {
        if (tag == 1608) {
         parse_mpls_flow_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_flow_packets_)));
          set_has_mpls_flow_packets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1616)) goto parse_mpls_flow_bytes;
        break;
      }

      // optional uint64 mpls_flow_bytes = 202;
      case 202: {
        if (tag == 1616) {
         parse_mpls_flow_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_flow_bytes_)));
          set_has_mpls_flow_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1624)) goto parse_mpls_total_flows;
        break;
      }

      // optional uint64 mpls_total_flows = 203;
      case 203: {
        if (tag == 1624) {
         parse_mpls_total_flows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_total_flows_)));
          set_has_mpls_total_flows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1632)) goto parse_mpls_active_flows;
        break;
      }

      // optional uint64 mpls_active_flows = 204;
      case 204: {
        if (tag == 1632) {
         parse_mpls_active_flows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_active_flows_)));
          set_has_mpls_active_flows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1640)) goto parse_mpls_flows_exported;
        break;
      }

      // optional uint64 mpls_flows_exported = 205;
      case 205: {
        if (tag == 1640) {
         parse_mpls_flows_exported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_flows_exported_)));
          set_has_mpls_flows_exported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1648)) goto parse_mpls_packets_exported;
        break;
      }

      // optional uint64 mpls_packets_exported = 206;
      case 206: {
        if (tag == 1648) {
         parse_mpls_packets_exported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_packets_exported_)));
          set_has_mpls_packets_exported();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1656)) goto parse_mpls_flows_inactive_timed_out;
        break;
      }

      // optional uint64 mpls_flows_inactive_timed_out = 207;
      case 207: {
        if (tag == 1656) {
         parse_mpls_flows_inactive_timed_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_flows_inactive_timed_out_)));
          set_has_mpls_flows_inactive_timed_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1664)) goto parse_mpls_flows_active_timed_out;
        break;
      }

      // optional uint64 mpls_flows_active_timed_out = 208;
      case 208: {
        if (tag == 1664) {
         parse_mpls_flows_active_timed_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_flows_active_timed_out_)));
          set_has_mpls_flows_active_timed_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1672)) goto parse_mpls_flow_create_failure;
        break;
      }

      // optional uint64 mpls_flow_create_failure = 209;
      case 209: {
        if (tag == 1672) {
         parse_mpls_flow_create_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_flow_create_failure_)));
          set_has_mpls_flow_create_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1680)) goto parse_mpls_route_lookup_failure;
        break;
      }

      // optional uint64 mpls_route_lookup_failure = 210;
      case 210: {
        if (tag == 1680) {
         parse_mpls_route_lookup_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_route_lookup_failure_)));
          set_has_mpls_route_lookup_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1688)) goto parse_mpls_autonomous_system_lookup_failure;
        break;
      }

      // optional uint64 mpls_autonomous_system_lookup_failure = 211;
      case 211: {
        if (tag == 1688) {
         parse_mpls_autonomous_system_lookup_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_autonomous_system_lookup_failure_)));
          set_has_mpls_autonomous_system_lookup_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1696)) goto parse_mpls_flow_packet_export_failure;
        break;
      }

      // optional uint64 mpls_flow_packet_export_failure = 212;
      case 212: {
        if (tag == 1696) {
         parse_mpls_flow_packet_export_failure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_flow_packet_export_failure_)));
          set_has_mpls_flow_packet_export_failure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1709)) goto parse_mpls_flow_table_utilization;
        break;
      }

      // optional float mpls_flow_table_utilization = 213;
      case 213: {
        if (tag == 1709) {
         parse_mpls_flow_table_utilization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mpls_flow_table_utilization_)));
          set_has_mpls_flow_table_utilization();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1712)) goto parse_mpls_flow_insert_count;
        break;
      }

      // optional uint64 mpls_flow_insert_count = 214;
      case 214: {
        if (tag == 1712) {
         parse_mpls_flow_insert_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mpls_flow_insert_count_)));
          set_has_mpls_flow_insert_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InlineJflowNpuStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InlineJflowNpuStats)
  return false;
#undef DO_
}

void InlineJflowNpuStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InlineJflowNpuStats)
  // required uint32 npu_identifier = 1;
  if (has_npu_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npu_identifier(), output);
  }

  // optional uint64 ipv4_flow_packets = 51;
  if (has_ipv4_flow_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(51, this->ipv4_flow_packets(), output);
  }

  // optional uint64 ipv4_flow_bytes = 52;
  if (has_ipv4_flow_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->ipv4_flow_bytes(), output);
  }

  // optional uint64 ipv4_total_flows = 53;
  if (has_ipv4_total_flows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(53, this->ipv4_total_flows(), output);
  }

  // optional uint64 ipv4_active_flows = 54;
  if (has_ipv4_active_flows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(54, this->ipv4_active_flows(), output);
  }

  // optional uint64 ipv4_flows_exported = 55;
  if (has_ipv4_flows_exported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(55, this->ipv4_flows_exported(), output);
  }

  // optional uint64 ipv4_packets_exported = 56;
  if (has_ipv4_packets_exported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(56, this->ipv4_packets_exported(), output);
  }

  // optional uint64 ipv4_flows_inactive_timed_out = 57;
  if (has_ipv4_flows_inactive_timed_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(57, this->ipv4_flows_inactive_timed_out(), output);
  }

  // optional uint64 ipv4_flows_active_timed_out = 58;
  if (has_ipv4_flows_active_timed_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(58, this->ipv4_flows_active_timed_out(), output);
  }

  // optional uint64 ipv4_flow_create_failure = 59;
  if (has_ipv4_flow_create_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(59, this->ipv4_flow_create_failure(), output);
  }

  // optional uint64 ipv4_route_lookup_failure = 60;
  if (has_ipv4_route_lookup_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(60, this->ipv4_route_lookup_failure(), output);
  }

  // optional uint64 ipv4_autonomous_system_lookup_failure = 61;
  if (has_ipv4_autonomous_system_lookup_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(61, this->ipv4_autonomous_system_lookup_failure(), output);
  }

  // optional uint64 ipv4_flow_packet_export_failure = 62;
  if (has_ipv4_flow_packet_export_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(62, this->ipv4_flow_packet_export_failure(), output);
  }

  // optional float ipv4_flow_table_utilization = 63;
  if (has_ipv4_flow_table_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->ipv4_flow_table_utilization(), output);
  }

  // optional uint64 ipv4_flow_insert_count = 64;
  if (has_ipv4_flow_insert_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(64, this->ipv4_flow_insert_count(), output);
  }

  // optional uint64 ipv6_flow_packets = 101;
  if (has_ipv6_flow_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(101, this->ipv6_flow_packets(), output);
  }

  // optional uint64 ipv6_flow_bytes = 102;
  if (has_ipv6_flow_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(102, this->ipv6_flow_bytes(), output);
  }

  // optional uint64 ipv6_total_flows = 103;
  if (has_ipv6_total_flows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(103, this->ipv6_total_flows(), output);
  }

  // optional uint64 ipv6_active_flows = 104;
  if (has_ipv6_active_flows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(104, this->ipv6_active_flows(), output);
  }

  // optional uint64 ipv6_flows_exported = 105;
  if (has_ipv6_flows_exported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(105, this->ipv6_flows_exported(), output);
  }

  // optional uint64 ipv6_packets_exported = 106;
  if (has_ipv6_packets_exported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(106, this->ipv6_packets_exported(), output);
  }

  // optional uint64 ipv6_flows_inactive_timed_out = 107;
  if (has_ipv6_flows_inactive_timed_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(107, this->ipv6_flows_inactive_timed_out(), output);
  }

  // optional uint64 ipv6_flows_active_timed_out = 108;
  if (has_ipv6_flows_active_timed_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(108, this->ipv6_flows_active_timed_out(), output);
  }

  // optional uint64 ipv6_flow_create_failure = 109;
  if (has_ipv6_flow_create_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(109, this->ipv6_flow_create_failure(), output);
  }

  // optional uint64 ipv6_route_lookup_failure = 110;
  if (has_ipv6_route_lookup_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(110, this->ipv6_route_lookup_failure(), output);
  }

  // optional uint64 ipv6_autonomous_system_lookup_failure = 111;
  if (has_ipv6_autonomous_system_lookup_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(111, this->ipv6_autonomous_system_lookup_failure(), output);
  }

  // optional uint64 ipv6_flow_packet_export_failure = 112;
  if (has_ipv6_flow_packet_export_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(112, this->ipv6_flow_packet_export_failure(), output);
  }

  // optional float ipv6_flow_table_utilization = 113;
  if (has_ipv6_flow_table_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(113, this->ipv6_flow_table_utilization(), output);
  }

  // optional uint64 ipv6_flow_insert_count = 114;
  if (has_ipv6_flow_insert_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(114, this->ipv6_flow_insert_count(), output);
  }

  // optional uint64 vpls_flow_packets = 151;
  if (has_vpls_flow_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(151, this->vpls_flow_packets(), output);
  }

  // optional uint64 vpls_flow_bytes = 152;
  if (has_vpls_flow_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(152, this->vpls_flow_bytes(), output);
  }

  // optional uint64 vpls_total_flows = 153;
  if (has_vpls_total_flows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(153, this->vpls_total_flows(), output);
  }

  // optional uint64 vpls_active_flows = 154;
  if (has_vpls_active_flows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(154, this->vpls_active_flows(), output);
  }

  // optional uint64 vpls_flows_exported = 155;
  if (has_vpls_flows_exported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(155, this->vpls_flows_exported(), output);
  }

  // optional uint64 vpls_packets_exported = 156;
  if (has_vpls_packets_exported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(156, this->vpls_packets_exported(), output);
  }

  // optional uint64 vpls_flows_inactive_timed_out = 157;
  if (has_vpls_flows_inactive_timed_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(157, this->vpls_flows_inactive_timed_out(), output);
  }

  // optional uint64 vpls_flows_active_timed_out = 158;
  if (has_vpls_flows_active_timed_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(158, this->vpls_flows_active_timed_out(), output);
  }

  // optional uint64 vpls_flow_create_failure = 159;
  if (has_vpls_flow_create_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(159, this->vpls_flow_create_failure(), output);
  }

  // optional uint64 vpls_route_lookup_failure = 160;
  if (has_vpls_route_lookup_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(160, this->vpls_route_lookup_failure(), output);
  }

  // optional uint64 vpls_autonomous_system_lookup_failure = 161;
  if (has_vpls_autonomous_system_lookup_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(161, this->vpls_autonomous_system_lookup_failure(), output);
  }

  // optional uint64 vpls_flow_packet_export_failure = 162;
  if (has_vpls_flow_packet_export_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(162, this->vpls_flow_packet_export_failure(), output);
  }

  // optional float vpls_flow_table_utilization = 163;
  if (has_vpls_flow_table_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(163, this->vpls_flow_table_utilization(), output);
  }

  // optional uint64 vpls_flow_insert_count = 164;
  if (has_vpls_flow_insert_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(164, this->vpls_flow_insert_count(), output);
  }

  // optional uint64 mpls_flow_packets = 201;
  if (has_mpls_flow_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(201, this->mpls_flow_packets(), output);
  }

  // optional uint64 mpls_flow_bytes = 202;
  if (has_mpls_flow_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(202, this->mpls_flow_bytes(), output);
  }

  // optional uint64 mpls_total_flows = 203;
  if (has_mpls_total_flows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(203, this->mpls_total_flows(), output);
  }

  // optional uint64 mpls_active_flows = 204;
  if (has_mpls_active_flows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(204, this->mpls_active_flows(), output);
  }

  // optional uint64 mpls_flows_exported = 205;
  if (has_mpls_flows_exported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(205, this->mpls_flows_exported(), output);
  }

  // optional uint64 mpls_packets_exported = 206;
  if (has_mpls_packets_exported()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(206, this->mpls_packets_exported(), output);
  }

  // optional uint64 mpls_flows_inactive_timed_out = 207;
  if (has_mpls_flows_inactive_timed_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(207, this->mpls_flows_inactive_timed_out(), output);
  }

  // optional uint64 mpls_flows_active_timed_out = 208;
  if (has_mpls_flows_active_timed_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(208, this->mpls_flows_active_timed_out(), output);
  }

  // optional uint64 mpls_flow_create_failure = 209;
  if (has_mpls_flow_create_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(209, this->mpls_flow_create_failure(), output);
  }

  // optional uint64 mpls_route_lookup_failure = 210;
  if (has_mpls_route_lookup_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(210, this->mpls_route_lookup_failure(), output);
  }

  // optional uint64 mpls_autonomous_system_lookup_failure = 211;
  if (has_mpls_autonomous_system_lookup_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(211, this->mpls_autonomous_system_lookup_failure(), output);
  }

  // optional uint64 mpls_flow_packet_export_failure = 212;
  if (has_mpls_flow_packet_export_failure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(212, this->mpls_flow_packet_export_failure(), output);
  }

  // optional float mpls_flow_table_utilization = 213;
  if (has_mpls_flow_table_utilization()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(213, this->mpls_flow_table_utilization(), output);
  }

  // optional uint64 mpls_flow_insert_count = 214;
  if (has_mpls_flow_insert_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(214, this->mpls_flow_insert_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InlineJflowNpuStats)
}

::google::protobuf::uint8* InlineJflowNpuStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InlineJflowNpuStats)
  // required uint32 npu_identifier = 1;
  if (has_npu_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npu_identifier(), target);
  }

  // optional uint64 ipv4_flow_packets = 51;
  if (has_ipv4_flow_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(51, this->ipv4_flow_packets(), target);
  }

  // optional uint64 ipv4_flow_bytes = 52;
  if (has_ipv4_flow_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->ipv4_flow_bytes(), target);
  }

  // optional uint64 ipv4_total_flows = 53;
  if (has_ipv4_total_flows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(53, this->ipv4_total_flows(), target);
  }

  // optional uint64 ipv4_active_flows = 54;
  if (has_ipv4_active_flows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(54, this->ipv4_active_flows(), target);
  }

  // optional uint64 ipv4_flows_exported = 55;
  if (has_ipv4_flows_exported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(55, this->ipv4_flows_exported(), target);
  }

  // optional uint64 ipv4_packets_exported = 56;
  if (has_ipv4_packets_exported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(56, this->ipv4_packets_exported(), target);
  }

  // optional uint64 ipv4_flows_inactive_timed_out = 57;
  if (has_ipv4_flows_inactive_timed_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(57, this->ipv4_flows_inactive_timed_out(), target);
  }

  // optional uint64 ipv4_flows_active_timed_out = 58;
  if (has_ipv4_flows_active_timed_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(58, this->ipv4_flows_active_timed_out(), target);
  }

  // optional uint64 ipv4_flow_create_failure = 59;
  if (has_ipv4_flow_create_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(59, this->ipv4_flow_create_failure(), target);
  }

  // optional uint64 ipv4_route_lookup_failure = 60;
  if (has_ipv4_route_lookup_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(60, this->ipv4_route_lookup_failure(), target);
  }

  // optional uint64 ipv4_autonomous_system_lookup_failure = 61;
  if (has_ipv4_autonomous_system_lookup_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(61, this->ipv4_autonomous_system_lookup_failure(), target);
  }

  // optional uint64 ipv4_flow_packet_export_failure = 62;
  if (has_ipv4_flow_packet_export_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(62, this->ipv4_flow_packet_export_failure(), target);
  }

  // optional float ipv4_flow_table_utilization = 63;
  if (has_ipv4_flow_table_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(63, this->ipv4_flow_table_utilization(), target);
  }

  // optional uint64 ipv4_flow_insert_count = 64;
  if (has_ipv4_flow_insert_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(64, this->ipv4_flow_insert_count(), target);
  }

  // optional uint64 ipv6_flow_packets = 101;
  if (has_ipv6_flow_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(101, this->ipv6_flow_packets(), target);
  }

  // optional uint64 ipv6_flow_bytes = 102;
  if (has_ipv6_flow_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(102, this->ipv6_flow_bytes(), target);
  }

  // optional uint64 ipv6_total_flows = 103;
  if (has_ipv6_total_flows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(103, this->ipv6_total_flows(), target);
  }

  // optional uint64 ipv6_active_flows = 104;
  if (has_ipv6_active_flows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(104, this->ipv6_active_flows(), target);
  }

  // optional uint64 ipv6_flows_exported = 105;
  if (has_ipv6_flows_exported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(105, this->ipv6_flows_exported(), target);
  }

  // optional uint64 ipv6_packets_exported = 106;
  if (has_ipv6_packets_exported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(106, this->ipv6_packets_exported(), target);
  }

  // optional uint64 ipv6_flows_inactive_timed_out = 107;
  if (has_ipv6_flows_inactive_timed_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(107, this->ipv6_flows_inactive_timed_out(), target);
  }

  // optional uint64 ipv6_flows_active_timed_out = 108;
  if (has_ipv6_flows_active_timed_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(108, this->ipv6_flows_active_timed_out(), target);
  }

  // optional uint64 ipv6_flow_create_failure = 109;
  if (has_ipv6_flow_create_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(109, this->ipv6_flow_create_failure(), target);
  }

  // optional uint64 ipv6_route_lookup_failure = 110;
  if (has_ipv6_route_lookup_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(110, this->ipv6_route_lookup_failure(), target);
  }

  // optional uint64 ipv6_autonomous_system_lookup_failure = 111;
  if (has_ipv6_autonomous_system_lookup_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(111, this->ipv6_autonomous_system_lookup_failure(), target);
  }

  // optional uint64 ipv6_flow_packet_export_failure = 112;
  if (has_ipv6_flow_packet_export_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(112, this->ipv6_flow_packet_export_failure(), target);
  }

  // optional float ipv6_flow_table_utilization = 113;
  if (has_ipv6_flow_table_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(113, this->ipv6_flow_table_utilization(), target);
  }

  // optional uint64 ipv6_flow_insert_count = 114;
  if (has_ipv6_flow_insert_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(114, this->ipv6_flow_insert_count(), target);
  }

  // optional uint64 vpls_flow_packets = 151;
  if (has_vpls_flow_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(151, this->vpls_flow_packets(), target);
  }

  // optional uint64 vpls_flow_bytes = 152;
  if (has_vpls_flow_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(152, this->vpls_flow_bytes(), target);
  }

  // optional uint64 vpls_total_flows = 153;
  if (has_vpls_total_flows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(153, this->vpls_total_flows(), target);
  }

  // optional uint64 vpls_active_flows = 154;
  if (has_vpls_active_flows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(154, this->vpls_active_flows(), target);
  }

  // optional uint64 vpls_flows_exported = 155;
  if (has_vpls_flows_exported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(155, this->vpls_flows_exported(), target);
  }

  // optional uint64 vpls_packets_exported = 156;
  if (has_vpls_packets_exported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(156, this->vpls_packets_exported(), target);
  }

  // optional uint64 vpls_flows_inactive_timed_out = 157;
  if (has_vpls_flows_inactive_timed_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(157, this->vpls_flows_inactive_timed_out(), target);
  }

  // optional uint64 vpls_flows_active_timed_out = 158;
  if (has_vpls_flows_active_timed_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(158, this->vpls_flows_active_timed_out(), target);
  }

  // optional uint64 vpls_flow_create_failure = 159;
  if (has_vpls_flow_create_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(159, this->vpls_flow_create_failure(), target);
  }

  // optional uint64 vpls_route_lookup_failure = 160;
  if (has_vpls_route_lookup_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(160, this->vpls_route_lookup_failure(), target);
  }

  // optional uint64 vpls_autonomous_system_lookup_failure = 161;
  if (has_vpls_autonomous_system_lookup_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(161, this->vpls_autonomous_system_lookup_failure(), target);
  }

  // optional uint64 vpls_flow_packet_export_failure = 162;
  if (has_vpls_flow_packet_export_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(162, this->vpls_flow_packet_export_failure(), target);
  }

  // optional float vpls_flow_table_utilization = 163;
  if (has_vpls_flow_table_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(163, this->vpls_flow_table_utilization(), target);
  }

  // optional uint64 vpls_flow_insert_count = 164;
  if (has_vpls_flow_insert_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(164, this->vpls_flow_insert_count(), target);
  }

  // optional uint64 mpls_flow_packets = 201;
  if (has_mpls_flow_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(201, this->mpls_flow_packets(), target);
  }

  // optional uint64 mpls_flow_bytes = 202;
  if (has_mpls_flow_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(202, this->mpls_flow_bytes(), target);
  }

  // optional uint64 mpls_total_flows = 203;
  if (has_mpls_total_flows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(203, this->mpls_total_flows(), target);
  }

  // optional uint64 mpls_active_flows = 204;
  if (has_mpls_active_flows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(204, this->mpls_active_flows(), target);
  }

  // optional uint64 mpls_flows_exported = 205;
  if (has_mpls_flows_exported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(205, this->mpls_flows_exported(), target);
  }

  // optional uint64 mpls_packets_exported = 206;
  if (has_mpls_packets_exported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(206, this->mpls_packets_exported(), target);
  }

  // optional uint64 mpls_flows_inactive_timed_out = 207;
  if (has_mpls_flows_inactive_timed_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(207, this->mpls_flows_inactive_timed_out(), target);
  }

  // optional uint64 mpls_flows_active_timed_out = 208;
  if (has_mpls_flows_active_timed_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(208, this->mpls_flows_active_timed_out(), target);
  }

  // optional uint64 mpls_flow_create_failure = 209;
  if (has_mpls_flow_create_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(209, this->mpls_flow_create_failure(), target);
  }

  // optional uint64 mpls_route_lookup_failure = 210;
  if (has_mpls_route_lookup_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(210, this->mpls_route_lookup_failure(), target);
  }

  // optional uint64 mpls_autonomous_system_lookup_failure = 211;
  if (has_mpls_autonomous_system_lookup_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(211, this->mpls_autonomous_system_lookup_failure(), target);
  }

  // optional uint64 mpls_flow_packet_export_failure = 212;
  if (has_mpls_flow_packet_export_failure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(212, this->mpls_flow_packet_export_failure(), target);
  }

  // optional float mpls_flow_table_utilization = 213;
  if (has_mpls_flow_table_utilization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(213, this->mpls_flow_table_utilization(), target);
  }

  // optional uint64 mpls_flow_insert_count = 214;
  if (has_mpls_flow_insert_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(214, this->mpls_flow_insert_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InlineJflowNpuStats)
  return target;
}

int InlineJflowNpuStats::ByteSize() const {
  int total_size = 0;

  // required uint32 npu_identifier = 1;
  if (has_npu_identifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npu_identifier());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional uint64 ipv4_flow_packets = 51;
    if (has_ipv4_flow_packets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_flow_packets());
    }

    // optional uint64 ipv4_flow_bytes = 52;
    if (has_ipv4_flow_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_flow_bytes());
    }

    // optional uint64 ipv4_total_flows = 53;
    if (has_ipv4_total_flows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_total_flows());
    }

    // optional uint64 ipv4_active_flows = 54;
    if (has_ipv4_active_flows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_active_flows());
    }

    // optional uint64 ipv4_flows_exported = 55;
    if (has_ipv4_flows_exported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_flows_exported());
    }

    // optional uint64 ipv4_packets_exported = 56;
    if (has_ipv4_packets_exported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_packets_exported());
    }

    // optional uint64 ipv4_flows_inactive_timed_out = 57;
    if (has_ipv4_flows_inactive_timed_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_flows_inactive_timed_out());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 ipv4_flows_active_timed_out = 58;
    if (has_ipv4_flows_active_timed_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_flows_active_timed_out());
    }

    // optional uint64 ipv4_flow_create_failure = 59;
    if (has_ipv4_flow_create_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_flow_create_failure());
    }

    // optional uint64 ipv4_route_lookup_failure = 60;
    if (has_ipv4_route_lookup_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_route_lookup_failure());
    }

    // optional uint64 ipv4_autonomous_system_lookup_failure = 61;
    if (has_ipv4_autonomous_system_lookup_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_autonomous_system_lookup_failure());
    }

    // optional uint64 ipv4_flow_packet_export_failure = 62;
    if (has_ipv4_flow_packet_export_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_flow_packet_export_failure());
    }

    // optional float ipv4_flow_table_utilization = 63;
    if (has_ipv4_flow_table_utilization()) {
      total_size += 2 + 4;
    }

    // optional uint64 ipv4_flow_insert_count = 64;
    if (has_ipv4_flow_insert_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv4_flow_insert_count());
    }

    // optional uint64 ipv6_flow_packets = 101;
    if (has_ipv6_flow_packets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_flow_packets());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint64 ipv6_flow_bytes = 102;
    if (has_ipv6_flow_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_flow_bytes());
    }

    // optional uint64 ipv6_total_flows = 103;
    if (has_ipv6_total_flows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_total_flows());
    }

    // optional uint64 ipv6_active_flows = 104;
    if (has_ipv6_active_flows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_active_flows());
    }

    // optional uint64 ipv6_flows_exported = 105;
    if (has_ipv6_flows_exported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_flows_exported());
    }

    // optional uint64 ipv6_packets_exported = 106;
    if (has_ipv6_packets_exported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_packets_exported());
    }

    // optional uint64 ipv6_flows_inactive_timed_out = 107;
    if (has_ipv6_flows_inactive_timed_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_flows_inactive_timed_out());
    }

    // optional uint64 ipv6_flows_active_timed_out = 108;
    if (has_ipv6_flows_active_timed_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_flows_active_timed_out());
    }

    // optional uint64 ipv6_flow_create_failure = 109;
    if (has_ipv6_flow_create_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_flow_create_failure());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint64 ipv6_route_lookup_failure = 110;
    if (has_ipv6_route_lookup_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_route_lookup_failure());
    }

    // optional uint64 ipv6_autonomous_system_lookup_failure = 111;
    if (has_ipv6_autonomous_system_lookup_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_autonomous_system_lookup_failure());
    }

    // optional uint64 ipv6_flow_packet_export_failure = 112;
    if (has_ipv6_flow_packet_export_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_flow_packet_export_failure());
    }

    // optional float ipv6_flow_table_utilization = 113;
    if (has_ipv6_flow_table_utilization()) {
      total_size += 2 + 4;
    }

    // optional uint64 ipv6_flow_insert_count = 114;
    if (has_ipv6_flow_insert_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipv6_flow_insert_count());
    }

    // optional uint64 vpls_flow_packets = 151;
    if (has_vpls_flow_packets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_flow_packets());
    }

    // optional uint64 vpls_flow_bytes = 152;
    if (has_vpls_flow_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_flow_bytes());
    }

    // optional uint64 vpls_total_flows = 153;
    if (has_vpls_total_flows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_total_flows());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint64 vpls_active_flows = 154;
    if (has_vpls_active_flows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_active_flows());
    }

    // optional uint64 vpls_flows_exported = 155;
    if (has_vpls_flows_exported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_flows_exported());
    }

    // optional uint64 vpls_packets_exported = 156;
    if (has_vpls_packets_exported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_packets_exported());
    }

    // optional uint64 vpls_flows_inactive_timed_out = 157;
    if (has_vpls_flows_inactive_timed_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_flows_inactive_timed_out());
    }

    // optional uint64 vpls_flows_active_timed_out = 158;
    if (has_vpls_flows_active_timed_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_flows_active_timed_out());
    }

    // optional uint64 vpls_flow_create_failure = 159;
    if (has_vpls_flow_create_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_flow_create_failure());
    }

    // optional uint64 vpls_route_lookup_failure = 160;
    if (has_vpls_route_lookup_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_route_lookup_failure());
    }

    // optional uint64 vpls_autonomous_system_lookup_failure = 161;
    if (has_vpls_autonomous_system_lookup_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_autonomous_system_lookup_failure());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional uint64 vpls_flow_packet_export_failure = 162;
    if (has_vpls_flow_packet_export_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_flow_packet_export_failure());
    }

    // optional float vpls_flow_table_utilization = 163;
    if (has_vpls_flow_table_utilization()) {
      total_size += 2 + 4;
    }

    // optional uint64 vpls_flow_insert_count = 164;
    if (has_vpls_flow_insert_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vpls_flow_insert_count());
    }

    // optional uint64 mpls_flow_packets = 201;
    if (has_mpls_flow_packets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_flow_packets());
    }

    // optional uint64 mpls_flow_bytes = 202;
    if (has_mpls_flow_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_flow_bytes());
    }

    // optional uint64 mpls_total_flows = 203;
    if (has_mpls_total_flows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_total_flows());
    }

    // optional uint64 mpls_active_flows = 204;
    if (has_mpls_active_flows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_active_flows());
    }

    // optional uint64 mpls_flows_exported = 205;
    if (has_mpls_flows_exported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_flows_exported());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional uint64 mpls_packets_exported = 206;
    if (has_mpls_packets_exported()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_packets_exported());
    }

    // optional uint64 mpls_flows_inactive_timed_out = 207;
    if (has_mpls_flows_inactive_timed_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_flows_inactive_timed_out());
    }

    // optional uint64 mpls_flows_active_timed_out = 208;
    if (has_mpls_flows_active_timed_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_flows_active_timed_out());
    }

    // optional uint64 mpls_flow_create_failure = 209;
    if (has_mpls_flow_create_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_flow_create_failure());
    }

    // optional uint64 mpls_route_lookup_failure = 210;
    if (has_mpls_route_lookup_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_route_lookup_failure());
    }

    // optional uint64 mpls_autonomous_system_lookup_failure = 211;
    if (has_mpls_autonomous_system_lookup_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_autonomous_system_lookup_failure());
    }

    // optional uint64 mpls_flow_packet_export_failure = 212;
    if (has_mpls_flow_packet_export_failure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mpls_flow_packet_export_failure());
    }

    // optional float mpls_flow_table_utilization = 213;
    if (has_mpls_flow_table_utilization()) {
      total_size += 2 + 4;
    }

  }
  // optional uint64 mpls_flow_insert_count = 214;
  if (has_mpls_flow_insert_count()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mpls_flow_insert_count());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InlineJflowNpuStats::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InlineJflowNpuStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InlineJflowNpuStats>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InlineJflowNpuStats::MergeFrom(const InlineJflowNpuStats& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npu_identifier()) {
      set_npu_identifier(from.npu_identifier());
    }
    if (from.has_ipv4_flow_packets()) {
      set_ipv4_flow_packets(from.ipv4_flow_packets());
    }
    if (from.has_ipv4_flow_bytes()) {
      set_ipv4_flow_bytes(from.ipv4_flow_bytes());
    }
    if (from.has_ipv4_total_flows()) {
      set_ipv4_total_flows(from.ipv4_total_flows());
    }
    if (from.has_ipv4_active_flows()) {
      set_ipv4_active_flows(from.ipv4_active_flows());
    }
    if (from.has_ipv4_flows_exported()) {
      set_ipv4_flows_exported(from.ipv4_flows_exported());
    }
    if (from.has_ipv4_packets_exported()) {
      set_ipv4_packets_exported(from.ipv4_packets_exported());
    }
    if (from.has_ipv4_flows_inactive_timed_out()) {
      set_ipv4_flows_inactive_timed_out(from.ipv4_flows_inactive_timed_out());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ipv4_flows_active_timed_out()) {
      set_ipv4_flows_active_timed_out(from.ipv4_flows_active_timed_out());
    }
    if (from.has_ipv4_flow_create_failure()) {
      set_ipv4_flow_create_failure(from.ipv4_flow_create_failure());
    }
    if (from.has_ipv4_route_lookup_failure()) {
      set_ipv4_route_lookup_failure(from.ipv4_route_lookup_failure());
    }
    if (from.has_ipv4_autonomous_system_lookup_failure()) {
      set_ipv4_autonomous_system_lookup_failure(from.ipv4_autonomous_system_lookup_failure());
    }
    if (from.has_ipv4_flow_packet_export_failure()) {
      set_ipv4_flow_packet_export_failure(from.ipv4_flow_packet_export_failure());
    }
    if (from.has_ipv4_flow_table_utilization()) {
      set_ipv4_flow_table_utilization(from.ipv4_flow_table_utilization());
    }
    if (from.has_ipv4_flow_insert_count()) {
      set_ipv4_flow_insert_count(from.ipv4_flow_insert_count());
    }
    if (from.has_ipv6_flow_packets()) {
      set_ipv6_flow_packets(from.ipv6_flow_packets());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ipv6_flow_bytes()) {
      set_ipv6_flow_bytes(from.ipv6_flow_bytes());
    }
    if (from.has_ipv6_total_flows()) {
      set_ipv6_total_flows(from.ipv6_total_flows());
    }
    if (from.has_ipv6_active_flows()) {
      set_ipv6_active_flows(from.ipv6_active_flows());
    }
    if (from.has_ipv6_flows_exported()) {
      set_ipv6_flows_exported(from.ipv6_flows_exported());
    }
    if (from.has_ipv6_packets_exported()) {
      set_ipv6_packets_exported(from.ipv6_packets_exported());
    }
    if (from.has_ipv6_flows_inactive_timed_out()) {
      set_ipv6_flows_inactive_timed_out(from.ipv6_flows_inactive_timed_out());
    }
    if (from.has_ipv6_flows_active_timed_out()) {
      set_ipv6_flows_active_timed_out(from.ipv6_flows_active_timed_out());
    }
    if (from.has_ipv6_flow_create_failure()) {
      set_ipv6_flow_create_failure(from.ipv6_flow_create_failure());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ipv6_route_lookup_failure()) {
      set_ipv6_route_lookup_failure(from.ipv6_route_lookup_failure());
    }
    if (from.has_ipv6_autonomous_system_lookup_failure()) {
      set_ipv6_autonomous_system_lookup_failure(from.ipv6_autonomous_system_lookup_failure());
    }
    if (from.has_ipv6_flow_packet_export_failure()) {
      set_ipv6_flow_packet_export_failure(from.ipv6_flow_packet_export_failure());
    }
    if (from.has_ipv6_flow_table_utilization()) {
      set_ipv6_flow_table_utilization(from.ipv6_flow_table_utilization());
    }
    if (from.has_ipv6_flow_insert_count()) {
      set_ipv6_flow_insert_count(from.ipv6_flow_insert_count());
    }
    if (from.has_vpls_flow_packets()) {
      set_vpls_flow_packets(from.vpls_flow_packets());
    }
    if (from.has_vpls_flow_bytes()) {
      set_vpls_flow_bytes(from.vpls_flow_bytes());
    }
    if (from.has_vpls_total_flows()) {
      set_vpls_total_flows(from.vpls_total_flows());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_vpls_active_flows()) {
      set_vpls_active_flows(from.vpls_active_flows());
    }
    if (from.has_vpls_flows_exported()) {
      set_vpls_flows_exported(from.vpls_flows_exported());
    }
    if (from.has_vpls_packets_exported()) {
      set_vpls_packets_exported(from.vpls_packets_exported());
    }
    if (from.has_vpls_flows_inactive_timed_out()) {
      set_vpls_flows_inactive_timed_out(from.vpls_flows_inactive_timed_out());
    }
    if (from.has_vpls_flows_active_timed_out()) {
      set_vpls_flows_active_timed_out(from.vpls_flows_active_timed_out());
    }
    if (from.has_vpls_flow_create_failure()) {
      set_vpls_flow_create_failure(from.vpls_flow_create_failure());
    }
    if (from.has_vpls_route_lookup_failure()) {
      set_vpls_route_lookup_failure(from.vpls_route_lookup_failure());
    }
    if (from.has_vpls_autonomous_system_lookup_failure()) {
      set_vpls_autonomous_system_lookup_failure(from.vpls_autonomous_system_lookup_failure());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_vpls_flow_packet_export_failure()) {
      set_vpls_flow_packet_export_failure(from.vpls_flow_packet_export_failure());
    }
    if (from.has_vpls_flow_table_utilization()) {
      set_vpls_flow_table_utilization(from.vpls_flow_table_utilization());
    }
    if (from.has_vpls_flow_insert_count()) {
      set_vpls_flow_insert_count(from.vpls_flow_insert_count());
    }
    if (from.has_mpls_flow_packets()) {
      set_mpls_flow_packets(from.mpls_flow_packets());
    }
    if (from.has_mpls_flow_bytes()) {
      set_mpls_flow_bytes(from.mpls_flow_bytes());
    }
    if (from.has_mpls_total_flows()) {
      set_mpls_total_flows(from.mpls_total_flows());
    }
    if (from.has_mpls_active_flows()) {
      set_mpls_active_flows(from.mpls_active_flows());
    }
    if (from.has_mpls_flows_exported()) {
      set_mpls_flows_exported(from.mpls_flows_exported());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_mpls_packets_exported()) {
      set_mpls_packets_exported(from.mpls_packets_exported());
    }
    if (from.has_mpls_flows_inactive_timed_out()) {
      set_mpls_flows_inactive_timed_out(from.mpls_flows_inactive_timed_out());
    }
    if (from.has_mpls_flows_active_timed_out()) {
      set_mpls_flows_active_timed_out(from.mpls_flows_active_timed_out());
    }
    if (from.has_mpls_flow_create_failure()) {
      set_mpls_flow_create_failure(from.mpls_flow_create_failure());
    }
    if (from.has_mpls_route_lookup_failure()) {
      set_mpls_route_lookup_failure(from.mpls_route_lookup_failure());
    }
    if (from.has_mpls_autonomous_system_lookup_failure()) {
      set_mpls_autonomous_system_lookup_failure(from.mpls_autonomous_system_lookup_failure());
    }
    if (from.has_mpls_flow_packet_export_failure()) {
      set_mpls_flow_packet_export_failure(from.mpls_flow_packet_export_failure());
    }
    if (from.has_mpls_flow_table_utilization()) {
      set_mpls_flow_table_utilization(from.mpls_flow_table_utilization());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_mpls_flow_insert_count()) {
      set_mpls_flow_insert_count(from.mpls_flow_insert_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InlineJflowNpuStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InlineJflowNpuStats::CopyFrom(const InlineJflowNpuStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InlineJflowNpuStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InlineJflowNpuStats::Swap(InlineJflowNpuStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InlineJflowNpuStats::InternalSwap(InlineJflowNpuStats* other) {
  std::swap(npu_identifier_, other->npu_identifier_);
  std::swap(ipv4_flow_packets_, other->ipv4_flow_packets_);
  std::swap(ipv4_flow_bytes_, other->ipv4_flow_bytes_);
  std::swap(ipv4_total_flows_, other->ipv4_total_flows_);
  std::swap(ipv4_active_flows_, other->ipv4_active_flows_);
  std::swap(ipv4_flows_exported_, other->ipv4_flows_exported_);
  std::swap(ipv4_packets_exported_, other->ipv4_packets_exported_);
  std::swap(ipv4_flows_inactive_timed_out_, other->ipv4_flows_inactive_timed_out_);
  std::swap(ipv4_flows_active_timed_out_, other->ipv4_flows_active_timed_out_);
  std::swap(ipv4_flow_create_failure_, other->ipv4_flow_create_failure_);
  std::swap(ipv4_route_lookup_failure_, other->ipv4_route_lookup_failure_);
  std::swap(ipv4_autonomous_system_lookup_failure_, other->ipv4_autonomous_system_lookup_failure_);
  std::swap(ipv4_flow_packet_export_failure_, other->ipv4_flow_packet_export_failure_);
  std::swap(ipv4_flow_table_utilization_, other->ipv4_flow_table_utilization_);
  std::swap(ipv4_flow_insert_count_, other->ipv4_flow_insert_count_);
  std::swap(ipv6_flow_packets_, other->ipv6_flow_packets_);
  std::swap(ipv6_flow_bytes_, other->ipv6_flow_bytes_);
  std::swap(ipv6_total_flows_, other->ipv6_total_flows_);
  std::swap(ipv6_active_flows_, other->ipv6_active_flows_);
  std::swap(ipv6_flows_exported_, other->ipv6_flows_exported_);
  std::swap(ipv6_packets_exported_, other->ipv6_packets_exported_);
  std::swap(ipv6_flows_inactive_timed_out_, other->ipv6_flows_inactive_timed_out_);
  std::swap(ipv6_flows_active_timed_out_, other->ipv6_flows_active_timed_out_);
  std::swap(ipv6_flow_create_failure_, other->ipv6_flow_create_failure_);
  std::swap(ipv6_route_lookup_failure_, other->ipv6_route_lookup_failure_);
  std::swap(ipv6_autonomous_system_lookup_failure_, other->ipv6_autonomous_system_lookup_failure_);
  std::swap(ipv6_flow_packet_export_failure_, other->ipv6_flow_packet_export_failure_);
  std::swap(ipv6_flow_table_utilization_, other->ipv6_flow_table_utilization_);
  std::swap(ipv6_flow_insert_count_, other->ipv6_flow_insert_count_);
  std::swap(vpls_flow_packets_, other->vpls_flow_packets_);
  std::swap(vpls_flow_bytes_, other->vpls_flow_bytes_);
  std::swap(vpls_total_flows_, other->vpls_total_flows_);
  std::swap(vpls_active_flows_, other->vpls_active_flows_);
  std::swap(vpls_flows_exported_, other->vpls_flows_exported_);
  std::swap(vpls_packets_exported_, other->vpls_packets_exported_);
  std::swap(vpls_flows_inactive_timed_out_, other->vpls_flows_inactive_timed_out_);
  std::swap(vpls_flows_active_timed_out_, other->vpls_flows_active_timed_out_);
  std::swap(vpls_flow_create_failure_, other->vpls_flow_create_failure_);
  std::swap(vpls_route_lookup_failure_, other->vpls_route_lookup_failure_);
  std::swap(vpls_autonomous_system_lookup_failure_, other->vpls_autonomous_system_lookup_failure_);
  std::swap(vpls_flow_packet_export_failure_, other->vpls_flow_packet_export_failure_);
  std::swap(vpls_flow_table_utilization_, other->vpls_flow_table_utilization_);
  std::swap(vpls_flow_insert_count_, other->vpls_flow_insert_count_);
  std::swap(mpls_flow_packets_, other->mpls_flow_packets_);
  std::swap(mpls_flow_bytes_, other->mpls_flow_bytes_);
  std::swap(mpls_total_flows_, other->mpls_total_flows_);
  std::swap(mpls_active_flows_, other->mpls_active_flows_);
  std::swap(mpls_flows_exported_, other->mpls_flows_exported_);
  std::swap(mpls_packets_exported_, other->mpls_packets_exported_);
  std::swap(mpls_flows_inactive_timed_out_, other->mpls_flows_inactive_timed_out_);
  std::swap(mpls_flows_active_timed_out_, other->mpls_flows_active_timed_out_);
  std::swap(mpls_flow_create_failure_, other->mpls_flow_create_failure_);
  std::swap(mpls_route_lookup_failure_, other->mpls_route_lookup_failure_);
  std::swap(mpls_autonomous_system_lookup_failure_, other->mpls_autonomous_system_lookup_failure_);
  std::swap(mpls_flow_packet_export_failure_, other->mpls_flow_packet_export_failure_);
  std::swap(mpls_flow_table_utilization_, other->mpls_flow_table_utilization_);
  std::swap(mpls_flow_insert_count_, other->mpls_flow_insert_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InlineJflowNpuStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InlineJflowNpuStats_descriptor_;
  metadata.reflection = InlineJflowNpuStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InlineJflowNpuStats

// required uint32 npu_identifier = 1;
bool InlineJflowNpuStats::has_npu_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InlineJflowNpuStats::set_has_npu_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
void InlineJflowNpuStats::clear_has_npu_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
void InlineJflowNpuStats::clear_npu_identifier() {
  npu_identifier_ = 0u;
  clear_has_npu_identifier();
}
 ::google::protobuf::uint32 InlineJflowNpuStats::npu_identifier() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.npu_identifier)
  return npu_identifier_;
}
 void InlineJflowNpuStats::set_npu_identifier(::google::protobuf::uint32 value) {
  set_has_npu_identifier();
  npu_identifier_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.npu_identifier)
}

// optional uint64 ipv4_flow_packets = 51;
bool InlineJflowNpuStats::has_ipv4_flow_packets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_flow_packets() {
  _has_bits_[0] |= 0x00000002u;
}
void InlineJflowNpuStats::clear_has_ipv4_flow_packets() {
  _has_bits_[0] &= ~0x00000002u;
}
void InlineJflowNpuStats::clear_ipv4_flow_packets() {
  ipv4_flow_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flow_packets();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flow_packets() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_packets)
  return ipv4_flow_packets_;
}
 void InlineJflowNpuStats::set_ipv4_flow_packets(::google::protobuf::uint64 value) {
  set_has_ipv4_flow_packets();
  ipv4_flow_packets_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_packets)
}

// optional uint64 ipv4_flow_bytes = 52;
bool InlineJflowNpuStats::has_ipv4_flow_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_flow_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
void InlineJflowNpuStats::clear_has_ipv4_flow_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
void InlineJflowNpuStats::clear_ipv4_flow_bytes() {
  ipv4_flow_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flow_bytes();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flow_bytes() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_bytes)
  return ipv4_flow_bytes_;
}
 void InlineJflowNpuStats::set_ipv4_flow_bytes(::google::protobuf::uint64 value) {
  set_has_ipv4_flow_bytes();
  ipv4_flow_bytes_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_bytes)
}

// optional uint64 ipv4_total_flows = 53;
bool InlineJflowNpuStats::has_ipv4_total_flows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_total_flows() {
  _has_bits_[0] |= 0x00000008u;
}
void InlineJflowNpuStats::clear_has_ipv4_total_flows() {
  _has_bits_[0] &= ~0x00000008u;
}
void InlineJflowNpuStats::clear_ipv4_total_flows() {
  ipv4_total_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_total_flows();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_total_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_total_flows)
  return ipv4_total_flows_;
}
 void InlineJflowNpuStats::set_ipv4_total_flows(::google::protobuf::uint64 value) {
  set_has_ipv4_total_flows();
  ipv4_total_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_total_flows)
}

// optional uint64 ipv4_active_flows = 54;
bool InlineJflowNpuStats::has_ipv4_active_flows() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_active_flows() {
  _has_bits_[0] |= 0x00000010u;
}
void InlineJflowNpuStats::clear_has_ipv4_active_flows() {
  _has_bits_[0] &= ~0x00000010u;
}
void InlineJflowNpuStats::clear_ipv4_active_flows() {
  ipv4_active_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_active_flows();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_active_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_active_flows)
  return ipv4_active_flows_;
}
 void InlineJflowNpuStats::set_ipv4_active_flows(::google::protobuf::uint64 value) {
  set_has_ipv4_active_flows();
  ipv4_active_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_active_flows)
}

// optional uint64 ipv4_flows_exported = 55;
bool InlineJflowNpuStats::has_ipv4_flows_exported() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_flows_exported() {
  _has_bits_[0] |= 0x00000020u;
}
void InlineJflowNpuStats::clear_has_ipv4_flows_exported() {
  _has_bits_[0] &= ~0x00000020u;
}
void InlineJflowNpuStats::clear_ipv4_flows_exported() {
  ipv4_flows_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flows_exported();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flows_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flows_exported)
  return ipv4_flows_exported_;
}
 void InlineJflowNpuStats::set_ipv4_flows_exported(::google::protobuf::uint64 value) {
  set_has_ipv4_flows_exported();
  ipv4_flows_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flows_exported)
}

// optional uint64 ipv4_packets_exported = 56;
bool InlineJflowNpuStats::has_ipv4_packets_exported() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_packets_exported() {
  _has_bits_[0] |= 0x00000040u;
}
void InlineJflowNpuStats::clear_has_ipv4_packets_exported() {
  _has_bits_[0] &= ~0x00000040u;
}
void InlineJflowNpuStats::clear_ipv4_packets_exported() {
  ipv4_packets_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_packets_exported();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_packets_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_packets_exported)
  return ipv4_packets_exported_;
}
 void InlineJflowNpuStats::set_ipv4_packets_exported(::google::protobuf::uint64 value) {
  set_has_ipv4_packets_exported();
  ipv4_packets_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_packets_exported)
}

// optional uint64 ipv4_flows_inactive_timed_out = 57;
bool InlineJflowNpuStats::has_ipv4_flows_inactive_timed_out() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_flows_inactive_timed_out() {
  _has_bits_[0] |= 0x00000080u;
}
void InlineJflowNpuStats::clear_has_ipv4_flows_inactive_timed_out() {
  _has_bits_[0] &= ~0x00000080u;
}
void InlineJflowNpuStats::clear_ipv4_flows_inactive_timed_out() {
  ipv4_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flows_inactive_timed_out();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flows_inactive_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flows_inactive_timed_out)
  return ipv4_flows_inactive_timed_out_;
}
 void InlineJflowNpuStats::set_ipv4_flows_inactive_timed_out(::google::protobuf::uint64 value) {
  set_has_ipv4_flows_inactive_timed_out();
  ipv4_flows_inactive_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flows_inactive_timed_out)
}

// optional uint64 ipv4_flows_active_timed_out = 58;
bool InlineJflowNpuStats::has_ipv4_flows_active_timed_out() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_flows_active_timed_out() {
  _has_bits_[0] |= 0x00000100u;
}
void InlineJflowNpuStats::clear_has_ipv4_flows_active_timed_out() {
  _has_bits_[0] &= ~0x00000100u;
}
void InlineJflowNpuStats::clear_ipv4_flows_active_timed_out() {
  ipv4_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flows_active_timed_out();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flows_active_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flows_active_timed_out)
  return ipv4_flows_active_timed_out_;
}
 void InlineJflowNpuStats::set_ipv4_flows_active_timed_out(::google::protobuf::uint64 value) {
  set_has_ipv4_flows_active_timed_out();
  ipv4_flows_active_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flows_active_timed_out)
}

// optional uint64 ipv4_flow_create_failure = 59;
bool InlineJflowNpuStats::has_ipv4_flow_create_failure() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_flow_create_failure() {
  _has_bits_[0] |= 0x00000200u;
}
void InlineJflowNpuStats::clear_has_ipv4_flow_create_failure() {
  _has_bits_[0] &= ~0x00000200u;
}
void InlineJflowNpuStats::clear_ipv4_flow_create_failure() {
  ipv4_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flow_create_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flow_create_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_create_failure)
  return ipv4_flow_create_failure_;
}
 void InlineJflowNpuStats::set_ipv4_flow_create_failure(::google::protobuf::uint64 value) {
  set_has_ipv4_flow_create_failure();
  ipv4_flow_create_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_create_failure)
}

// optional uint64 ipv4_route_lookup_failure = 60;
bool InlineJflowNpuStats::has_ipv4_route_lookup_failure() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_route_lookup_failure() {
  _has_bits_[0] |= 0x00000400u;
}
void InlineJflowNpuStats::clear_has_ipv4_route_lookup_failure() {
  _has_bits_[0] &= ~0x00000400u;
}
void InlineJflowNpuStats::clear_ipv4_route_lookup_failure() {
  ipv4_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_route_lookup_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_route_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_route_lookup_failure)
  return ipv4_route_lookup_failure_;
}
 void InlineJflowNpuStats::set_ipv4_route_lookup_failure(::google::protobuf::uint64 value) {
  set_has_ipv4_route_lookup_failure();
  ipv4_route_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_route_lookup_failure)
}

// optional uint64 ipv4_autonomous_system_lookup_failure = 61;
bool InlineJflowNpuStats::has_ipv4_autonomous_system_lookup_failure() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_autonomous_system_lookup_failure() {
  _has_bits_[0] |= 0x00000800u;
}
void InlineJflowNpuStats::clear_has_ipv4_autonomous_system_lookup_failure() {
  _has_bits_[0] &= ~0x00000800u;
}
void InlineJflowNpuStats::clear_ipv4_autonomous_system_lookup_failure() {
  ipv4_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_autonomous_system_lookup_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_autonomous_system_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_autonomous_system_lookup_failure)
  return ipv4_autonomous_system_lookup_failure_;
}
 void InlineJflowNpuStats::set_ipv4_autonomous_system_lookup_failure(::google::protobuf::uint64 value) {
  set_has_ipv4_autonomous_system_lookup_failure();
  ipv4_autonomous_system_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_autonomous_system_lookup_failure)
}

// optional uint64 ipv4_flow_packet_export_failure = 62;
bool InlineJflowNpuStats::has_ipv4_flow_packet_export_failure() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_flow_packet_export_failure() {
  _has_bits_[0] |= 0x00001000u;
}
void InlineJflowNpuStats::clear_has_ipv4_flow_packet_export_failure() {
  _has_bits_[0] &= ~0x00001000u;
}
void InlineJflowNpuStats::clear_ipv4_flow_packet_export_failure() {
  ipv4_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flow_packet_export_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flow_packet_export_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_packet_export_failure)
  return ipv4_flow_packet_export_failure_;
}
 void InlineJflowNpuStats::set_ipv4_flow_packet_export_failure(::google::protobuf::uint64 value) {
  set_has_ipv4_flow_packet_export_failure();
  ipv4_flow_packet_export_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_packet_export_failure)
}

// optional float ipv4_flow_table_utilization = 63;
bool InlineJflowNpuStats::has_ipv4_flow_table_utilization() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_flow_table_utilization() {
  _has_bits_[0] |= 0x00002000u;
}
void InlineJflowNpuStats::clear_has_ipv4_flow_table_utilization() {
  _has_bits_[0] &= ~0x00002000u;
}
void InlineJflowNpuStats::clear_ipv4_flow_table_utilization() {
  ipv4_flow_table_utilization_ = 0;
  clear_has_ipv4_flow_table_utilization();
}
 float InlineJflowNpuStats::ipv4_flow_table_utilization() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_table_utilization)
  return ipv4_flow_table_utilization_;
}
 void InlineJflowNpuStats::set_ipv4_flow_table_utilization(float value) {
  set_has_ipv4_flow_table_utilization();
  ipv4_flow_table_utilization_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_table_utilization)
}

// optional uint64 ipv4_flow_insert_count = 64;
bool InlineJflowNpuStats::has_ipv4_flow_insert_count() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv4_flow_insert_count() {
  _has_bits_[0] |= 0x00004000u;
}
void InlineJflowNpuStats::clear_has_ipv4_flow_insert_count() {
  _has_bits_[0] &= ~0x00004000u;
}
void InlineJflowNpuStats::clear_ipv4_flow_insert_count() {
  ipv4_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv4_flow_insert_count();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv4_flow_insert_count() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv4_flow_insert_count)
  return ipv4_flow_insert_count_;
}
 void InlineJflowNpuStats::set_ipv4_flow_insert_count(::google::protobuf::uint64 value) {
  set_has_ipv4_flow_insert_count();
  ipv4_flow_insert_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv4_flow_insert_count)
}

// optional uint64 ipv6_flow_packets = 101;
bool InlineJflowNpuStats::has_ipv6_flow_packets() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_flow_packets() {
  _has_bits_[0] |= 0x00008000u;
}
void InlineJflowNpuStats::clear_has_ipv6_flow_packets() {
  _has_bits_[0] &= ~0x00008000u;
}
void InlineJflowNpuStats::clear_ipv6_flow_packets() {
  ipv6_flow_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flow_packets();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flow_packets() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_packets)
  return ipv6_flow_packets_;
}
 void InlineJflowNpuStats::set_ipv6_flow_packets(::google::protobuf::uint64 value) {
  set_has_ipv6_flow_packets();
  ipv6_flow_packets_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_packets)
}

// optional uint64 ipv6_flow_bytes = 102;
bool InlineJflowNpuStats::has_ipv6_flow_bytes() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_flow_bytes() {
  _has_bits_[0] |= 0x00010000u;
}
void InlineJflowNpuStats::clear_has_ipv6_flow_bytes() {
  _has_bits_[0] &= ~0x00010000u;
}
void InlineJflowNpuStats::clear_ipv6_flow_bytes() {
  ipv6_flow_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flow_bytes();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flow_bytes() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_bytes)
  return ipv6_flow_bytes_;
}
 void InlineJflowNpuStats::set_ipv6_flow_bytes(::google::protobuf::uint64 value) {
  set_has_ipv6_flow_bytes();
  ipv6_flow_bytes_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_bytes)
}

// optional uint64 ipv6_total_flows = 103;
bool InlineJflowNpuStats::has_ipv6_total_flows() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_total_flows() {
  _has_bits_[0] |= 0x00020000u;
}
void InlineJflowNpuStats::clear_has_ipv6_total_flows() {
  _has_bits_[0] &= ~0x00020000u;
}
void InlineJflowNpuStats::clear_ipv6_total_flows() {
  ipv6_total_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_total_flows();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_total_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_total_flows)
  return ipv6_total_flows_;
}
 void InlineJflowNpuStats::set_ipv6_total_flows(::google::protobuf::uint64 value) {
  set_has_ipv6_total_flows();
  ipv6_total_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_total_flows)
}

// optional uint64 ipv6_active_flows = 104;
bool InlineJflowNpuStats::has_ipv6_active_flows() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_active_flows() {
  _has_bits_[0] |= 0x00040000u;
}
void InlineJflowNpuStats::clear_has_ipv6_active_flows() {
  _has_bits_[0] &= ~0x00040000u;
}
void InlineJflowNpuStats::clear_ipv6_active_flows() {
  ipv6_active_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_active_flows();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_active_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_active_flows)
  return ipv6_active_flows_;
}
 void InlineJflowNpuStats::set_ipv6_active_flows(::google::protobuf::uint64 value) {
  set_has_ipv6_active_flows();
  ipv6_active_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_active_flows)
}

// optional uint64 ipv6_flows_exported = 105;
bool InlineJflowNpuStats::has_ipv6_flows_exported() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_flows_exported() {
  _has_bits_[0] |= 0x00080000u;
}
void InlineJflowNpuStats::clear_has_ipv6_flows_exported() {
  _has_bits_[0] &= ~0x00080000u;
}
void InlineJflowNpuStats::clear_ipv6_flows_exported() {
  ipv6_flows_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flows_exported();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flows_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flows_exported)
  return ipv6_flows_exported_;
}
 void InlineJflowNpuStats::set_ipv6_flows_exported(::google::protobuf::uint64 value) {
  set_has_ipv6_flows_exported();
  ipv6_flows_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flows_exported)
}

// optional uint64 ipv6_packets_exported = 106;
bool InlineJflowNpuStats::has_ipv6_packets_exported() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_packets_exported() {
  _has_bits_[0] |= 0x00100000u;
}
void InlineJflowNpuStats::clear_has_ipv6_packets_exported() {
  _has_bits_[0] &= ~0x00100000u;
}
void InlineJflowNpuStats::clear_ipv6_packets_exported() {
  ipv6_packets_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_packets_exported();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_packets_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_packets_exported)
  return ipv6_packets_exported_;
}
 void InlineJflowNpuStats::set_ipv6_packets_exported(::google::protobuf::uint64 value) {
  set_has_ipv6_packets_exported();
  ipv6_packets_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_packets_exported)
}

// optional uint64 ipv6_flows_inactive_timed_out = 107;
bool InlineJflowNpuStats::has_ipv6_flows_inactive_timed_out() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_flows_inactive_timed_out() {
  _has_bits_[0] |= 0x00200000u;
}
void InlineJflowNpuStats::clear_has_ipv6_flows_inactive_timed_out() {
  _has_bits_[0] &= ~0x00200000u;
}
void InlineJflowNpuStats::clear_ipv6_flows_inactive_timed_out() {
  ipv6_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flows_inactive_timed_out();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flows_inactive_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flows_inactive_timed_out)
  return ipv6_flows_inactive_timed_out_;
}
 void InlineJflowNpuStats::set_ipv6_flows_inactive_timed_out(::google::protobuf::uint64 value) {
  set_has_ipv6_flows_inactive_timed_out();
  ipv6_flows_inactive_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flows_inactive_timed_out)
}

// optional uint64 ipv6_flows_active_timed_out = 108;
bool InlineJflowNpuStats::has_ipv6_flows_active_timed_out() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_flows_active_timed_out() {
  _has_bits_[0] |= 0x00400000u;
}
void InlineJflowNpuStats::clear_has_ipv6_flows_active_timed_out() {
  _has_bits_[0] &= ~0x00400000u;
}
void InlineJflowNpuStats::clear_ipv6_flows_active_timed_out() {
  ipv6_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flows_active_timed_out();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flows_active_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flows_active_timed_out)
  return ipv6_flows_active_timed_out_;
}
 void InlineJflowNpuStats::set_ipv6_flows_active_timed_out(::google::protobuf::uint64 value) {
  set_has_ipv6_flows_active_timed_out();
  ipv6_flows_active_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flows_active_timed_out)
}

// optional uint64 ipv6_flow_create_failure = 109;
bool InlineJflowNpuStats::has_ipv6_flow_create_failure() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_flow_create_failure() {
  _has_bits_[0] |= 0x00800000u;
}
void InlineJflowNpuStats::clear_has_ipv6_flow_create_failure() {
  _has_bits_[0] &= ~0x00800000u;
}
void InlineJflowNpuStats::clear_ipv6_flow_create_failure() {
  ipv6_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flow_create_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flow_create_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_create_failure)
  return ipv6_flow_create_failure_;
}
 void InlineJflowNpuStats::set_ipv6_flow_create_failure(::google::protobuf::uint64 value) {
  set_has_ipv6_flow_create_failure();
  ipv6_flow_create_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_create_failure)
}

// optional uint64 ipv6_route_lookup_failure = 110;
bool InlineJflowNpuStats::has_ipv6_route_lookup_failure() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_route_lookup_failure() {
  _has_bits_[0] |= 0x01000000u;
}
void InlineJflowNpuStats::clear_has_ipv6_route_lookup_failure() {
  _has_bits_[0] &= ~0x01000000u;
}
void InlineJflowNpuStats::clear_ipv6_route_lookup_failure() {
  ipv6_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_route_lookup_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_route_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_route_lookup_failure)
  return ipv6_route_lookup_failure_;
}
 void InlineJflowNpuStats::set_ipv6_route_lookup_failure(::google::protobuf::uint64 value) {
  set_has_ipv6_route_lookup_failure();
  ipv6_route_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_route_lookup_failure)
}

// optional uint64 ipv6_autonomous_system_lookup_failure = 111;
bool InlineJflowNpuStats::has_ipv6_autonomous_system_lookup_failure() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_autonomous_system_lookup_failure() {
  _has_bits_[0] |= 0x02000000u;
}
void InlineJflowNpuStats::clear_has_ipv6_autonomous_system_lookup_failure() {
  _has_bits_[0] &= ~0x02000000u;
}
void InlineJflowNpuStats::clear_ipv6_autonomous_system_lookup_failure() {
  ipv6_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_autonomous_system_lookup_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_autonomous_system_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_autonomous_system_lookup_failure)
  return ipv6_autonomous_system_lookup_failure_;
}
 void InlineJflowNpuStats::set_ipv6_autonomous_system_lookup_failure(::google::protobuf::uint64 value) {
  set_has_ipv6_autonomous_system_lookup_failure();
  ipv6_autonomous_system_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_autonomous_system_lookup_failure)
}

// optional uint64 ipv6_flow_packet_export_failure = 112;
bool InlineJflowNpuStats::has_ipv6_flow_packet_export_failure() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_flow_packet_export_failure() {
  _has_bits_[0] |= 0x04000000u;
}
void InlineJflowNpuStats::clear_has_ipv6_flow_packet_export_failure() {
  _has_bits_[0] &= ~0x04000000u;
}
void InlineJflowNpuStats::clear_ipv6_flow_packet_export_failure() {
  ipv6_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flow_packet_export_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flow_packet_export_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_packet_export_failure)
  return ipv6_flow_packet_export_failure_;
}
 void InlineJflowNpuStats::set_ipv6_flow_packet_export_failure(::google::protobuf::uint64 value) {
  set_has_ipv6_flow_packet_export_failure();
  ipv6_flow_packet_export_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_packet_export_failure)
}

// optional float ipv6_flow_table_utilization = 113;
bool InlineJflowNpuStats::has_ipv6_flow_table_utilization() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_flow_table_utilization() {
  _has_bits_[0] |= 0x08000000u;
}
void InlineJflowNpuStats::clear_has_ipv6_flow_table_utilization() {
  _has_bits_[0] &= ~0x08000000u;
}
void InlineJflowNpuStats::clear_ipv6_flow_table_utilization() {
  ipv6_flow_table_utilization_ = 0;
  clear_has_ipv6_flow_table_utilization();
}
 float InlineJflowNpuStats::ipv6_flow_table_utilization() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_table_utilization)
  return ipv6_flow_table_utilization_;
}
 void InlineJflowNpuStats::set_ipv6_flow_table_utilization(float value) {
  set_has_ipv6_flow_table_utilization();
  ipv6_flow_table_utilization_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_table_utilization)
}

// optional uint64 ipv6_flow_insert_count = 114;
bool InlineJflowNpuStats::has_ipv6_flow_insert_count() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void InlineJflowNpuStats::set_has_ipv6_flow_insert_count() {
  _has_bits_[0] |= 0x10000000u;
}
void InlineJflowNpuStats::clear_has_ipv6_flow_insert_count() {
  _has_bits_[0] &= ~0x10000000u;
}
void InlineJflowNpuStats::clear_ipv6_flow_insert_count() {
  ipv6_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  clear_has_ipv6_flow_insert_count();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::ipv6_flow_insert_count() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.ipv6_flow_insert_count)
  return ipv6_flow_insert_count_;
}
 void InlineJflowNpuStats::set_ipv6_flow_insert_count(::google::protobuf::uint64 value) {
  set_has_ipv6_flow_insert_count();
  ipv6_flow_insert_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.ipv6_flow_insert_count)
}

// optional uint64 vpls_flow_packets = 151;
bool InlineJflowNpuStats::has_vpls_flow_packets() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_flow_packets() {
  _has_bits_[0] |= 0x20000000u;
}
void InlineJflowNpuStats::clear_has_vpls_flow_packets() {
  _has_bits_[0] &= ~0x20000000u;
}
void InlineJflowNpuStats::clear_vpls_flow_packets() {
  vpls_flow_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flow_packets();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flow_packets() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_packets)
  return vpls_flow_packets_;
}
 void InlineJflowNpuStats::set_vpls_flow_packets(::google::protobuf::uint64 value) {
  set_has_vpls_flow_packets();
  vpls_flow_packets_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_packets)
}

// optional uint64 vpls_flow_bytes = 152;
bool InlineJflowNpuStats::has_vpls_flow_bytes() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_flow_bytes() {
  _has_bits_[0] |= 0x40000000u;
}
void InlineJflowNpuStats::clear_has_vpls_flow_bytes() {
  _has_bits_[0] &= ~0x40000000u;
}
void InlineJflowNpuStats::clear_vpls_flow_bytes() {
  vpls_flow_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flow_bytes();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flow_bytes() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_bytes)
  return vpls_flow_bytes_;
}
 void InlineJflowNpuStats::set_vpls_flow_bytes(::google::protobuf::uint64 value) {
  set_has_vpls_flow_bytes();
  vpls_flow_bytes_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_bytes)
}

// optional uint64 vpls_total_flows = 153;
bool InlineJflowNpuStats::has_vpls_total_flows() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_total_flows() {
  _has_bits_[0] |= 0x80000000u;
}
void InlineJflowNpuStats::clear_has_vpls_total_flows() {
  _has_bits_[0] &= ~0x80000000u;
}
void InlineJflowNpuStats::clear_vpls_total_flows() {
  vpls_total_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_total_flows();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_total_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_total_flows)
  return vpls_total_flows_;
}
 void InlineJflowNpuStats::set_vpls_total_flows(::google::protobuf::uint64 value) {
  set_has_vpls_total_flows();
  vpls_total_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_total_flows)
}

// optional uint64 vpls_active_flows = 154;
bool InlineJflowNpuStats::has_vpls_active_flows() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_active_flows() {
  _has_bits_[1] |= 0x00000001u;
}
void InlineJflowNpuStats::clear_has_vpls_active_flows() {
  _has_bits_[1] &= ~0x00000001u;
}
void InlineJflowNpuStats::clear_vpls_active_flows() {
  vpls_active_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_active_flows();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_active_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_active_flows)
  return vpls_active_flows_;
}
 void InlineJflowNpuStats::set_vpls_active_flows(::google::protobuf::uint64 value) {
  set_has_vpls_active_flows();
  vpls_active_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_active_flows)
}

// optional uint64 vpls_flows_exported = 155;
bool InlineJflowNpuStats::has_vpls_flows_exported() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_flows_exported() {
  _has_bits_[1] |= 0x00000002u;
}
void InlineJflowNpuStats::clear_has_vpls_flows_exported() {
  _has_bits_[1] &= ~0x00000002u;
}
void InlineJflowNpuStats::clear_vpls_flows_exported() {
  vpls_flows_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flows_exported();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flows_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flows_exported)
  return vpls_flows_exported_;
}
 void InlineJflowNpuStats::set_vpls_flows_exported(::google::protobuf::uint64 value) {
  set_has_vpls_flows_exported();
  vpls_flows_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flows_exported)
}

// optional uint64 vpls_packets_exported = 156;
bool InlineJflowNpuStats::has_vpls_packets_exported() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_packets_exported() {
  _has_bits_[1] |= 0x00000004u;
}
void InlineJflowNpuStats::clear_has_vpls_packets_exported() {
  _has_bits_[1] &= ~0x00000004u;
}
void InlineJflowNpuStats::clear_vpls_packets_exported() {
  vpls_packets_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_packets_exported();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_packets_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_packets_exported)
  return vpls_packets_exported_;
}
 void InlineJflowNpuStats::set_vpls_packets_exported(::google::protobuf::uint64 value) {
  set_has_vpls_packets_exported();
  vpls_packets_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_packets_exported)
}

// optional uint64 vpls_flows_inactive_timed_out = 157;
bool InlineJflowNpuStats::has_vpls_flows_inactive_timed_out() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_flows_inactive_timed_out() {
  _has_bits_[1] |= 0x00000008u;
}
void InlineJflowNpuStats::clear_has_vpls_flows_inactive_timed_out() {
  _has_bits_[1] &= ~0x00000008u;
}
void InlineJflowNpuStats::clear_vpls_flows_inactive_timed_out() {
  vpls_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flows_inactive_timed_out();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flows_inactive_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flows_inactive_timed_out)
  return vpls_flows_inactive_timed_out_;
}
 void InlineJflowNpuStats::set_vpls_flows_inactive_timed_out(::google::protobuf::uint64 value) {
  set_has_vpls_flows_inactive_timed_out();
  vpls_flows_inactive_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flows_inactive_timed_out)
}

// optional uint64 vpls_flows_active_timed_out = 158;
bool InlineJflowNpuStats::has_vpls_flows_active_timed_out() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_flows_active_timed_out() {
  _has_bits_[1] |= 0x00000010u;
}
void InlineJflowNpuStats::clear_has_vpls_flows_active_timed_out() {
  _has_bits_[1] &= ~0x00000010u;
}
void InlineJflowNpuStats::clear_vpls_flows_active_timed_out() {
  vpls_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flows_active_timed_out();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flows_active_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flows_active_timed_out)
  return vpls_flows_active_timed_out_;
}
 void InlineJflowNpuStats::set_vpls_flows_active_timed_out(::google::protobuf::uint64 value) {
  set_has_vpls_flows_active_timed_out();
  vpls_flows_active_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flows_active_timed_out)
}

// optional uint64 vpls_flow_create_failure = 159;
bool InlineJflowNpuStats::has_vpls_flow_create_failure() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_flow_create_failure() {
  _has_bits_[1] |= 0x00000020u;
}
void InlineJflowNpuStats::clear_has_vpls_flow_create_failure() {
  _has_bits_[1] &= ~0x00000020u;
}
void InlineJflowNpuStats::clear_vpls_flow_create_failure() {
  vpls_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flow_create_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flow_create_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_create_failure)
  return vpls_flow_create_failure_;
}
 void InlineJflowNpuStats::set_vpls_flow_create_failure(::google::protobuf::uint64 value) {
  set_has_vpls_flow_create_failure();
  vpls_flow_create_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_create_failure)
}

// optional uint64 vpls_route_lookup_failure = 160;
bool InlineJflowNpuStats::has_vpls_route_lookup_failure() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_route_lookup_failure() {
  _has_bits_[1] |= 0x00000040u;
}
void InlineJflowNpuStats::clear_has_vpls_route_lookup_failure() {
  _has_bits_[1] &= ~0x00000040u;
}
void InlineJflowNpuStats::clear_vpls_route_lookup_failure() {
  vpls_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_route_lookup_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_route_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_route_lookup_failure)
  return vpls_route_lookup_failure_;
}
 void InlineJflowNpuStats::set_vpls_route_lookup_failure(::google::protobuf::uint64 value) {
  set_has_vpls_route_lookup_failure();
  vpls_route_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_route_lookup_failure)
}

// optional uint64 vpls_autonomous_system_lookup_failure = 161;
bool InlineJflowNpuStats::has_vpls_autonomous_system_lookup_failure() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_autonomous_system_lookup_failure() {
  _has_bits_[1] |= 0x00000080u;
}
void InlineJflowNpuStats::clear_has_vpls_autonomous_system_lookup_failure() {
  _has_bits_[1] &= ~0x00000080u;
}
void InlineJflowNpuStats::clear_vpls_autonomous_system_lookup_failure() {
  vpls_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_autonomous_system_lookup_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_autonomous_system_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_autonomous_system_lookup_failure)
  return vpls_autonomous_system_lookup_failure_;
}
 void InlineJflowNpuStats::set_vpls_autonomous_system_lookup_failure(::google::protobuf::uint64 value) {
  set_has_vpls_autonomous_system_lookup_failure();
  vpls_autonomous_system_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_autonomous_system_lookup_failure)
}

// optional uint64 vpls_flow_packet_export_failure = 162;
bool InlineJflowNpuStats::has_vpls_flow_packet_export_failure() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_flow_packet_export_failure() {
  _has_bits_[1] |= 0x00000100u;
}
void InlineJflowNpuStats::clear_has_vpls_flow_packet_export_failure() {
  _has_bits_[1] &= ~0x00000100u;
}
void InlineJflowNpuStats::clear_vpls_flow_packet_export_failure() {
  vpls_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flow_packet_export_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flow_packet_export_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_packet_export_failure)
  return vpls_flow_packet_export_failure_;
}
 void InlineJflowNpuStats::set_vpls_flow_packet_export_failure(::google::protobuf::uint64 value) {
  set_has_vpls_flow_packet_export_failure();
  vpls_flow_packet_export_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_packet_export_failure)
}

// optional float vpls_flow_table_utilization = 163;
bool InlineJflowNpuStats::has_vpls_flow_table_utilization() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_flow_table_utilization() {
  _has_bits_[1] |= 0x00000200u;
}
void InlineJflowNpuStats::clear_has_vpls_flow_table_utilization() {
  _has_bits_[1] &= ~0x00000200u;
}
void InlineJflowNpuStats::clear_vpls_flow_table_utilization() {
  vpls_flow_table_utilization_ = 0;
  clear_has_vpls_flow_table_utilization();
}
 float InlineJflowNpuStats::vpls_flow_table_utilization() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_table_utilization)
  return vpls_flow_table_utilization_;
}
 void InlineJflowNpuStats::set_vpls_flow_table_utilization(float value) {
  set_has_vpls_flow_table_utilization();
  vpls_flow_table_utilization_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_table_utilization)
}

// optional uint64 vpls_flow_insert_count = 164;
bool InlineJflowNpuStats::has_vpls_flow_insert_count() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void InlineJflowNpuStats::set_has_vpls_flow_insert_count() {
  _has_bits_[1] |= 0x00000400u;
}
void InlineJflowNpuStats::clear_has_vpls_flow_insert_count() {
  _has_bits_[1] &= ~0x00000400u;
}
void InlineJflowNpuStats::clear_vpls_flow_insert_count() {
  vpls_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  clear_has_vpls_flow_insert_count();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::vpls_flow_insert_count() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.vpls_flow_insert_count)
  return vpls_flow_insert_count_;
}
 void InlineJflowNpuStats::set_vpls_flow_insert_count(::google::protobuf::uint64 value) {
  set_has_vpls_flow_insert_count();
  vpls_flow_insert_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.vpls_flow_insert_count)
}

// optional uint64 mpls_flow_packets = 201;
bool InlineJflowNpuStats::has_mpls_flow_packets() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_flow_packets() {
  _has_bits_[1] |= 0x00000800u;
}
void InlineJflowNpuStats::clear_has_mpls_flow_packets() {
  _has_bits_[1] &= ~0x00000800u;
}
void InlineJflowNpuStats::clear_mpls_flow_packets() {
  mpls_flow_packets_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flow_packets();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flow_packets() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_packets)
  return mpls_flow_packets_;
}
 void InlineJflowNpuStats::set_mpls_flow_packets(::google::protobuf::uint64 value) {
  set_has_mpls_flow_packets();
  mpls_flow_packets_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_packets)
}

// optional uint64 mpls_flow_bytes = 202;
bool InlineJflowNpuStats::has_mpls_flow_bytes() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_flow_bytes() {
  _has_bits_[1] |= 0x00001000u;
}
void InlineJflowNpuStats::clear_has_mpls_flow_bytes() {
  _has_bits_[1] &= ~0x00001000u;
}
void InlineJflowNpuStats::clear_mpls_flow_bytes() {
  mpls_flow_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flow_bytes();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flow_bytes() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_bytes)
  return mpls_flow_bytes_;
}
 void InlineJflowNpuStats::set_mpls_flow_bytes(::google::protobuf::uint64 value) {
  set_has_mpls_flow_bytes();
  mpls_flow_bytes_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_bytes)
}

// optional uint64 mpls_total_flows = 203;
bool InlineJflowNpuStats::has_mpls_total_flows() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_total_flows() {
  _has_bits_[1] |= 0x00002000u;
}
void InlineJflowNpuStats::clear_has_mpls_total_flows() {
  _has_bits_[1] &= ~0x00002000u;
}
void InlineJflowNpuStats::clear_mpls_total_flows() {
  mpls_total_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_total_flows();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_total_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_total_flows)
  return mpls_total_flows_;
}
 void InlineJflowNpuStats::set_mpls_total_flows(::google::protobuf::uint64 value) {
  set_has_mpls_total_flows();
  mpls_total_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_total_flows)
}

// optional uint64 mpls_active_flows = 204;
bool InlineJflowNpuStats::has_mpls_active_flows() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_active_flows() {
  _has_bits_[1] |= 0x00004000u;
}
void InlineJflowNpuStats::clear_has_mpls_active_flows() {
  _has_bits_[1] &= ~0x00004000u;
}
void InlineJflowNpuStats::clear_mpls_active_flows() {
  mpls_active_flows_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_active_flows();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_active_flows() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_active_flows)
  return mpls_active_flows_;
}
 void InlineJflowNpuStats::set_mpls_active_flows(::google::protobuf::uint64 value) {
  set_has_mpls_active_flows();
  mpls_active_flows_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_active_flows)
}

// optional uint64 mpls_flows_exported = 205;
bool InlineJflowNpuStats::has_mpls_flows_exported() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_flows_exported() {
  _has_bits_[1] |= 0x00008000u;
}
void InlineJflowNpuStats::clear_has_mpls_flows_exported() {
  _has_bits_[1] &= ~0x00008000u;
}
void InlineJflowNpuStats::clear_mpls_flows_exported() {
  mpls_flows_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flows_exported();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flows_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flows_exported)
  return mpls_flows_exported_;
}
 void InlineJflowNpuStats::set_mpls_flows_exported(::google::protobuf::uint64 value) {
  set_has_mpls_flows_exported();
  mpls_flows_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flows_exported)
}

// optional uint64 mpls_packets_exported = 206;
bool InlineJflowNpuStats::has_mpls_packets_exported() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_packets_exported() {
  _has_bits_[1] |= 0x00010000u;
}
void InlineJflowNpuStats::clear_has_mpls_packets_exported() {
  _has_bits_[1] &= ~0x00010000u;
}
void InlineJflowNpuStats::clear_mpls_packets_exported() {
  mpls_packets_exported_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_packets_exported();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_packets_exported() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_packets_exported)
  return mpls_packets_exported_;
}
 void InlineJflowNpuStats::set_mpls_packets_exported(::google::protobuf::uint64 value) {
  set_has_mpls_packets_exported();
  mpls_packets_exported_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_packets_exported)
}

// optional uint64 mpls_flows_inactive_timed_out = 207;
bool InlineJflowNpuStats::has_mpls_flows_inactive_timed_out() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_flows_inactive_timed_out() {
  _has_bits_[1] |= 0x00020000u;
}
void InlineJflowNpuStats::clear_has_mpls_flows_inactive_timed_out() {
  _has_bits_[1] &= ~0x00020000u;
}
void InlineJflowNpuStats::clear_mpls_flows_inactive_timed_out() {
  mpls_flows_inactive_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flows_inactive_timed_out();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flows_inactive_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flows_inactive_timed_out)
  return mpls_flows_inactive_timed_out_;
}
 void InlineJflowNpuStats::set_mpls_flows_inactive_timed_out(::google::protobuf::uint64 value) {
  set_has_mpls_flows_inactive_timed_out();
  mpls_flows_inactive_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flows_inactive_timed_out)
}

// optional uint64 mpls_flows_active_timed_out = 208;
bool InlineJflowNpuStats::has_mpls_flows_active_timed_out() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_flows_active_timed_out() {
  _has_bits_[1] |= 0x00040000u;
}
void InlineJflowNpuStats::clear_has_mpls_flows_active_timed_out() {
  _has_bits_[1] &= ~0x00040000u;
}
void InlineJflowNpuStats::clear_mpls_flows_active_timed_out() {
  mpls_flows_active_timed_out_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flows_active_timed_out();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flows_active_timed_out() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flows_active_timed_out)
  return mpls_flows_active_timed_out_;
}
 void InlineJflowNpuStats::set_mpls_flows_active_timed_out(::google::protobuf::uint64 value) {
  set_has_mpls_flows_active_timed_out();
  mpls_flows_active_timed_out_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flows_active_timed_out)
}

// optional uint64 mpls_flow_create_failure = 209;
bool InlineJflowNpuStats::has_mpls_flow_create_failure() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_flow_create_failure() {
  _has_bits_[1] |= 0x00080000u;
}
void InlineJflowNpuStats::clear_has_mpls_flow_create_failure() {
  _has_bits_[1] &= ~0x00080000u;
}
void InlineJflowNpuStats::clear_mpls_flow_create_failure() {
  mpls_flow_create_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flow_create_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flow_create_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_create_failure)
  return mpls_flow_create_failure_;
}
 void InlineJflowNpuStats::set_mpls_flow_create_failure(::google::protobuf::uint64 value) {
  set_has_mpls_flow_create_failure();
  mpls_flow_create_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_create_failure)
}

// optional uint64 mpls_route_lookup_failure = 210;
bool InlineJflowNpuStats::has_mpls_route_lookup_failure() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_route_lookup_failure() {
  _has_bits_[1] |= 0x00100000u;
}
void InlineJflowNpuStats::clear_has_mpls_route_lookup_failure() {
  _has_bits_[1] &= ~0x00100000u;
}
void InlineJflowNpuStats::clear_mpls_route_lookup_failure() {
  mpls_route_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_route_lookup_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_route_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_route_lookup_failure)
  return mpls_route_lookup_failure_;
}
 void InlineJflowNpuStats::set_mpls_route_lookup_failure(::google::protobuf::uint64 value) {
  set_has_mpls_route_lookup_failure();
  mpls_route_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_route_lookup_failure)
}

// optional uint64 mpls_autonomous_system_lookup_failure = 211;
bool InlineJflowNpuStats::has_mpls_autonomous_system_lookup_failure() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_autonomous_system_lookup_failure() {
  _has_bits_[1] |= 0x00200000u;
}
void InlineJflowNpuStats::clear_has_mpls_autonomous_system_lookup_failure() {
  _has_bits_[1] &= ~0x00200000u;
}
void InlineJflowNpuStats::clear_mpls_autonomous_system_lookup_failure() {
  mpls_autonomous_system_lookup_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_autonomous_system_lookup_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_autonomous_system_lookup_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_autonomous_system_lookup_failure)
  return mpls_autonomous_system_lookup_failure_;
}
 void InlineJflowNpuStats::set_mpls_autonomous_system_lookup_failure(::google::protobuf::uint64 value) {
  set_has_mpls_autonomous_system_lookup_failure();
  mpls_autonomous_system_lookup_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_autonomous_system_lookup_failure)
}

// optional uint64 mpls_flow_packet_export_failure = 212;
bool InlineJflowNpuStats::has_mpls_flow_packet_export_failure() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_flow_packet_export_failure() {
  _has_bits_[1] |= 0x00400000u;
}
void InlineJflowNpuStats::clear_has_mpls_flow_packet_export_failure() {
  _has_bits_[1] &= ~0x00400000u;
}
void InlineJflowNpuStats::clear_mpls_flow_packet_export_failure() {
  mpls_flow_packet_export_failure_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flow_packet_export_failure();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flow_packet_export_failure() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_packet_export_failure)
  return mpls_flow_packet_export_failure_;
}
 void InlineJflowNpuStats::set_mpls_flow_packet_export_failure(::google::protobuf::uint64 value) {
  set_has_mpls_flow_packet_export_failure();
  mpls_flow_packet_export_failure_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_packet_export_failure)
}

// optional float mpls_flow_table_utilization = 213;
bool InlineJflowNpuStats::has_mpls_flow_table_utilization() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_flow_table_utilization() {
  _has_bits_[1] |= 0x00800000u;
}
void InlineJflowNpuStats::clear_has_mpls_flow_table_utilization() {
  _has_bits_[1] &= ~0x00800000u;
}
void InlineJflowNpuStats::clear_mpls_flow_table_utilization() {
  mpls_flow_table_utilization_ = 0;
  clear_has_mpls_flow_table_utilization();
}
 float InlineJflowNpuStats::mpls_flow_table_utilization() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_table_utilization)
  return mpls_flow_table_utilization_;
}
 void InlineJflowNpuStats::set_mpls_flow_table_utilization(float value) {
  set_has_mpls_flow_table_utilization();
  mpls_flow_table_utilization_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_table_utilization)
}

// optional uint64 mpls_flow_insert_count = 214;
bool InlineJflowNpuStats::has_mpls_flow_insert_count() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void InlineJflowNpuStats::set_has_mpls_flow_insert_count() {
  _has_bits_[1] |= 0x01000000u;
}
void InlineJflowNpuStats::clear_has_mpls_flow_insert_count() {
  _has_bits_[1] &= ~0x01000000u;
}
void InlineJflowNpuStats::clear_mpls_flow_insert_count() {
  mpls_flow_insert_count_ = GOOGLE_ULONGLONG(0);
  clear_has_mpls_flow_insert_count();
}
 ::google::protobuf::uint64 InlineJflowNpuStats::mpls_flow_insert_count() const {
  // @@protoc_insertion_point(field_get:InlineJflowNpuStats.mpls_flow_insert_count)
  return mpls_flow_insert_count_;
}
 void InlineJflowNpuStats::set_mpls_flow_insert_count(::google::protobuf::uint64 value) {
  set_has_mpls_flow_insert_count();
  mpls_flow_insert_count_ = value;
  // @@protoc_insertion_point(field_set:InlineJflowNpuStats.mpls_flow_insert_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::JuniperNetworksSensors,
    ::google::protobuf::internal::MessageTypeTraits< ::InlineJflow >, 11, false >
  inline_jflow_stats_ext(kInlineJflowStatsExtFieldNumber, ::InlineJflow::default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
