#!/bin/bash

# Change internal field separator
IFS='%'

#Util function to pause for user input
pause () {
    read -p "$*"
}

#Util function to display message
display () {
    message=$1
    echo '******'  $message  '******'
}

#Util function to restore mqtt log
restore_mqtt_log () {
    #restore default mqtt log
    MQTTLOG="\$ROOTPATH/logs/jv_test_mosquitto.log"
    echo "log_dest file $MQTTLOG" > $MQTTCONFIG
}

#Util function to cleanup any existing jvtest processes
kill_all_processes () {
    ps -ef | grep publish.py | grep -v "grep" | awk '{print $2}' | xargs kill > /dev/null 2>&1
    ps -ef | grep mosquitto | grep -v "grep" | awk '{print $2}' | xargs kill > /dev/null 2>&1
    ps -ef | grep agent_server | grep -v "grep" | awk '{print $2}' | xargs kill > /dev/null 2>&1
    ps -ef | grep mgd_server | grep -v "grep" | awk '{print $2}' | xargs kill > /dev/null 2>&1
}

run_sed () {
    #src and dst are find and replace strings
    src=$1
    dst=$2
    #file to apply sed and resulting file
    orig_file=$3
    final_file=$4

    # substitute command
    sub_cmd=s/$src/$dst/
    # echo $sub_cmd

    # Apply sed
    sed -e $sub_cmd <$orig_file >$final_file
}

#Start with killing previous running processes
kill_all_processes

#Default values
run_cleanup=0
run_server=0
run_client=0
run_usage=0
run_test=0
run_test_oc=0
run_mgd=0
run_data=0
run_container=0

#Parse out the arguments
while getopts "ucsktomdi" opt; do
  case $opt in
    u)
      run_usage=1
      ;;
    k)
      run_cleanup=1
      exit
      ;;
    m)
      display "Enable MGD simulator"
      run_mgd=1
      ;;
    s)
      display "Enable GRPC server"
      run_server=1
      ;;
    c)
      display "Enable GRPC client"
      run_client=1
      ;;
    t)
      display "Execute All testcases"
      run_test=1
      ;;
    o)
      display "Execute OpenConfig testcases"
      run_test_oc=1
      ;;
    d)
      display "Enable Data streamers simulator"
      run_data=1
      ;;
    i)
      display "Run in container mode (no daemon, no user input)"
      run_container=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

if [ $run_usage != 0 ]
then
    echo "usage: jvsim [-u] [-k] [-s] [-c] [-m] [-d] [-t] [-o] [-i]"
    echo " -k  : cleanup and exit"
    echo " -s  : run server"
    echo " -m  : run simulation management daemon server"
    echo " -c  : run interactive client"
    echo " -t  : run test harness"
    echo " -o  : run openconfig tests"
    echo " -d  : run data streamers"
    echo " -i  : run container mode"
    exit
fi

#Paths
#If the root path is not bail
: ${ROOTPATH?"Need to set ROOTPATH"}

display 'Current ROOTPATH: '${ROOTPATH}
echo ''
if [[ $run_container == 0 ]]; then
  pause 'Press [Enter] key to continue or [Ctrl+C] to modify any parameters ...'
fi

#What is the platform we are executing on
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
    platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
    platform='mac'
fi

#Derive all paths
CONFIG="$ROOTPATH/config"
LOGPATH="$ROOTPATH/logs"
MQTTLOG=$LOGPATH/"jv_test_mosquitto.log"
PYTHON_PATH="$ROOTPATH/src/sim/sensors:$ROOTPATH/src/sim/jvision_pb"
SYSTEM_FILE="$LOGPATH/system_file.output"

echo "---- Detected platform: $platform"
echo "---- Root path        : $ROOTPATH"
echo "---- Python path      : $PYTHON_PATH"

#Executables
MQTTBIN="$ROOTPATH/bin/$platform/mosquitto"
TESTPATH="$ROOTPATH/bin/$platform"
SERVERPATH="$ROOTPATH/bin/$platform"
SERVERLOG="$LOGPATH/agent_server.log"
CLIENTPATH="$ROOTPATH/bin/$platform"
CLIENTLOG="$LOGPATH/";
SENSORS="$ROOTPATH/src/sim/jvsim.py"
MGD="$ROOTPATH/bin/$platform/mgd_server"
MGDLOG="$LOGPATH/mgd_server.log"

#Setup the python path
export PYTHONPATH=$PYTHON_PATH

#Start the mosquitto broker
MQTTCONFIG="$CONFIG/mosquitto.conf"
echo "log_dest file $MQTTLOG" > $MQTTCONFIG
$MQTTBIN -v -c $MQTTCONFIG -d
echo "---- Mosquitto        : $MQTTBIN"
echo "---- Mosquitto Log    : $MQTTLOG"
sleep 1

#Start the data streamers
if [ $run_data != 0 ]
then
    echo "---- sensors          : $SENSORS"
    if [ $run_test_oc != 0 ]
    then
        SYSTEM_DESCRIPTION="$CONFIG/test_config/SimServerConfig/system.test_oc.json"
    else
        SYSTEM_DESCRIPTION="$CONFIG/test_config/SimServerConfig/system.json"
    fi
    SIM_SRCDIR="$ROOTPATH/src/sim"
    python3 $SENSORS $SYSTEM_DESCRIPTION $LOGPATH $SIM_SRCDIR
fi

#Do we start MGD ?
if [ $run_mgd != 0 ]
then
    echo "---- Mgd Server        : $MGD"
    $MGD $MGDLOG &
fi

#Start the gRPC server
if [ $run_server != 0 ]
then
    #INI file
    ini_file_path=$CONFIG/test_config/SimServerConfig
    ini_file=$ini_file_path/agent_server.ini
    test_ini_file=$ini_file_path/agent_server_test.ini
    test_ini_file_2=$ini_file_path/agent_server_test_2.ini

    #1.
    #Change the log file location
    #format the src to substitute
    src_str_original='grpc_log_file_path  = /tmp'
    src_str_corrected=${src_str_original//\//\\/}
    src_str=$src_str_corrected
    # echo $src_str

    #get the destination to substitute with
    dst_str_file=$LOGPATH
    dst_str_file_corrected=${dst_str_file//\//\\/}
    dst_str='grpc_log_file_path = '$dst_str_file_corrected
    # echo $dst_str

    #Run substitution
    run_sed $src_str $dst_str $ini_file $test_ini_file

    #2.
    #Change the PathValidator file location
    #format the src to substitute
    src_str_original='ocpath_file_path    = /tmp'
    src_str_corrected=${src_str_original//\//\\/}
    src_str=$src_str_corrected
    # echo $src_str

    #get the destination to substitute with
    dst_str_file=$ini_file_path
    dst_str_file_corrected=${dst_str_file//\//\\/}
    dst_str='ocpath_file_path = '$dst_str_file_corrected
    # echo $dst_str

    #Run substitution
    run_sed $src_str $dst_str $test_ini_file $test_ini_file_2

    #3.
    #Change the JSD registration agent.json file path
    #format the src to substitute
    src_str_original='json_file_path      = /tmp'
    src_str_corrected=${src_str_original//\//\\/}
    src_str=$src_str_corrected
    # echo $src_str

    #get the destination to substitute with
    dst_str_file=$ini_file_path
    dst_str_file_corrected=${dst_str_file//\//\\/}
    dst_str='json_file_path = '$dst_str_file_corrected
    # echo $dst_str

    #Run substitution
    run_sed $src_str $dst_str $test_ini_file_2 $test_ini_file

    #Note the file is renamed to desired $test_ini_file
    #Remove unwanted files
    rm -Rf $test_ini_file_2

    if [ $run_mgd == 0 ]
    then
        #1.
        #Change system_mode to file
        #format the src to substitute
        src_str_original='system_mode         = proc'
        src_str_corrected=${src_str_original//\//\\/}
        src_str=$src_str_corrected
        # echo $src_str

        #get the destination to substitute with
        dst_str_original='system_mode         = file'
        dst_str_corrected=${dst_str_original//\//\\/}
        dst_str=$dst_str_corrected
        # echo $dst_str

        #Run substitution
        run_sed $src_str $dst_str $test_ini_file $test_ini_file_2

        #2.
        #Change system_file_path
        #format the src to substitute
        src_str_original='system_file_path    = /tmp'
        src_str_corrected=${src_str_original//\//\\/}
        src_str=$src_str_corrected
        # echo $src_str

        #get the destination to substitute with
        dst_str_file=$LOGPATH
        dst_str_file_corrected=${dst_str_file//\//\\/}
        dst_str='system_file_path = '$dst_str_file_corrected
        # echo $dst_str

        #Run substitution
        run_sed $src_str $dst_str $test_ini_file_2 $test_ini_file
    fi

    ## If running in container mode we don't start the server in the background
    if [[ $run_container == 0 ]]; then
      $SERVERPATH/agent_server -c $test_ini_file &
    else
      $SERVERPATH/agent_server -c $test_ini_file
    fi

    if [ $run_mgd != 0 ]
    then
        echo "-------- Started Server Proc: $SERVERPATH/agent_server -c $test_ini_file"
    else
        echo "-------- Started Server File: $SERVERPATH/agent_server -c $test_ini_file"
    fi
fi
sleep 2

#Do we execute the unit tests
if [ $run_test != 0 ]
then
    $TESTPATH/agent_test
    kill_all_processes
    restore_mqtt_log
fi

#Do we execute openconfig specific tests
if [ $run_test_oc != 0 ]
then
    $TESTPATH/agent_test --gtest_filter=AgentClientOpenConfigTest*
    kill_all_processes
    restore_mqtt_log
fi

#Start the interactive client
if [ $run_client != 0 ]
then
    echo "-------- Started Client: $CLIENTPATH/agent_client $CLIENTLOG"
    $CLIENTPATH/agent_client $CLIENTLOG
fi
