//
// Copyrights (c) 2015, Juniper Networks, Inc.
// All rights reserved.
//

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

//
// Sunanda Kommula, 2016
//
// This file defines the messages in Protocol Buffers used by
// dynamic IP Tunnels to export their telemetry data
//

syntax = "proto2";
import "jvision_top.proto";

//
// This occupies branch 5 from JuniperNetworksSensors
//
extend JuniperNetworksSensors {
    optional IpTunnelStats jnpr_iptunnels_statistics_ext = 14;
}

//
// Top-level message
//
message IpTunnelStats {
    // List of statistics records
    repeated IpTunnelStatsRecord iptunnel_stats_records = 1;
}

//
// IP Tunnels statistics record
//
message IpTunnelStatsRecord {
    // Name of the IP Tunnel
    required string      name                 = 1;

    // Total number of packets received on the tunnel. Receive on 
    // a tunnel is defined as the process of terminating the tunnel
    // by decapsulating the outer IP header and processing the payload
    optional uint64      rx_packets           = 2;

    // The total number of bytes received on the tunnel
    optional uint64      rx_bytes             = 3;

    // Total number of packets transmitted on the tunnel. Transmit
    // on a tunnel is defined as the process of encapsulating packets
    // with the tunnel IP header and routing the resulting packets
    optional uint64      tx_packets           = 4;

    // The total number of bytes transmitted on the tunnel
    optional uint64      tx_bytes             = 5;

    // IP Tunnels have spoof protection. If the tunnel is configured for this
    // function, the device will accept packets on a tunnel only if the
    // the source IP address of the packets is reachable via the same tunnel
    // Number of packets that failed this Reverse Path Check (RPF)
    optional uint64      rpf_failed_packets   = 6;

    // Number of bytes that filed RPF check
    optional uint64      rpf_failed_bytes     = 7;
}

