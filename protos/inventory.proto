//
// This defines the gpb message format used by the chassis inventory
// sensor
//
// The top level messages is Inventory
//
// Copyrights (c)  2015, Juniper Networks, Inc.
// All rights reserved.
//

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

import "telemetry_top.proto";

//
// this occupies branch 13 from JuniperNetworksSensors
//
extend JuniperNetworksSensors {
    optional Inventory jnpr_inventory_ext = 13;
}

// Top level message
message Inventory {
    repeated Component component = 1;
}
            
// A component in the system
message Component {
    // Fixed properties of a component
    required string name                                = 1;
    optional uint32 serial_number                       = 2;
    optional uint32 part_number                         = 3;
    optional string description                         = 4;
    optional ComponentType type                         = 5;

    // List of other properties
    repeated InventoryKeyVal properties                 = 6;

    // All operational state for the component
    repeated InventoryKeyVal operational_state          = 7;

    // List of sub components. 
    repeated string sub_components                      = 8;
}

// Type of a component 
enum ComponentType {
    Null      = 0;
    Port      = 1;
    Linecard  = 2;
    Optic     = 3;
    Backplane = 4;
}

// Keys and values
message InventoryKeyVal {
    required string key       = 1;
    optional int64  int_value = 2;
    optional string str_value = 3;
}
